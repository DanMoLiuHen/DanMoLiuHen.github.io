<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>socket网络编程</title>
    <link href="/2022/11/26/ubuntu-server%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/11/26/ubuntu-server%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-server使用"><a href="#ubuntu-server使用" class="headerlink" title="ubuntu-server使用"></a>ubuntu-server使用</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>使用<code>vim /etc/apt/sources.list</code>修改源配置文件，在首行添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 阿里源</span><br>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h2 id="使用root账户"><a href="#使用root账户" class="headerlink" title="使用root账户"></a>使用root账户</h2><p>ubuntu初始没有root账户，需要登录后创建，输入指令<code>sudo passwd root</code>即可创建root用户，后续登录可以使用root登录，（在root角色下不需要执行<code>sudo</code>获取权限）</p><p>可以使用<code>su</code>进入root用户，退出root用户</p><p>若需要禁用root账户，执行即可<code>sudo passwd -l root</code></p><h2 id="vim行号设置"><a href="#vim行号设置" class="headerlink" title="vim行号设置"></a>vim行号设置</h2><p>输入<code>vim</code>进入vim界面，按<code>esc</code>+<code>:</code>进入底行模式，输入指令<code>echo $VIM</code>查看<code>vim</code>的环境变量</p><p>我的是<code>/usr/share/vim</code>，因此进入该目录修改<code>vimrc</code>文件即可，在文件末尾加上<code>set number</code>即可永久查看行号</p><h2 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h2><h1 id="socket网络编程"><a href="#socket网络编程" class="headerlink" title="socket网络编程"></a>socket网络编程</h1>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习</title>
    <link href="/2022/09/27/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/27/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>使用python完成爬虫，《python网络数据采集》学习笔记</p><div class="note note-warning">            <p>使用时需要关闭网络代理</p>          </div> <h1 id="python使用"><a href="#python使用" class="headerlink" title="python使用"></a>python使用</h1><h2 id="使用虚拟环境安装包"><a href="#使用虚拟环境安装包" class="headerlink" title="使用虚拟环境安装包"></a>使用虚拟环境安装包</h2><p><strong>使用好处</strong></p><ol><li>可以避免已安装的包产生冲突，若不使用则默认安装在root下（linux中）</li><li>可以打包整个环境发送给他人（项目关联的所有库单独放在一个虚拟环境）</li></ol><p><strong>使用方法</strong></p><p>创建了一个叫作 scrapingEnv 的新环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">virtualenv scrapingEnv<br></code></pre></td></tr></table></figure><p>执行activate文件，以激活新环境（部分版本是scripts目录不是bin目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> scrapingEnv <br><span class="hljs-built_in">source</span> bin/activate<br></code></pre></td></tr></table></figure><p>激活环境后环境名称出现在命令行提示符前，此后的任意安装包或执行程序都在该环境下（如下所示）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">(scrapingEnv)ryan$ </span><span class="language-bash">pip install beautifulsoup4</span><br></code></pre></td></tr></table></figure><p>退出虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">(scrapingEnv)ryan$ </span><span class="language-bash">deactivate</span><br></code></pre></td></tr></table></figure><p>生成依赖项清单<br><code>pip freeze &gt; requirements.txt</code></p><p>读取并安装依赖项<br><code>pip install -r requirements.txt</code></p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>先请求网络（即根据url等信息打开网页），再解析网页html（个人理解）</li><li>网络请求可用requests或urllib(python自带)</li><li>解析html和xml文档可用BeautifulSoup或lxml（处理速度很快）或<a href="https://docs.python.org/3/library/html.parser.html">HTML parser</a>(python自带)</li><li>Requests 库擅长处理复杂的HTTP请求、cookie、header（响应头和请求头）等内容<br>本次用到的包为urllib(进行网络请求)和BeautifulSoup（解析）,安装方式：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pip install requests</span><br>pip install beautifulsoup4<br></code></pre></td></tr></table></figure>requests使用<br>requests返回对象中包含的内容<table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>apparent_encoding</td><td>编码方式</td></tr><tr><td>close()</td><td>关闭与服务器的连接</td></tr><tr><td>content</td><td>返回响应的内容，以字节为单位</td></tr><tr><td>cookies</td><td>返回一个 CookieJar 对象，包含了从服务器发回的 cookie</td></tr><tr><td>elapsed</td><td>返回一个 timedelta 对象，包含了从发送请求到响应到达之间经过的时间量，可以用于测试响应速度。比如 r.elapsed.microseconds 表示响应到达需要多少微秒。</td></tr><tr><td>encoding</td><td>解码 r.text 的编码方式</td></tr><tr><td>headers</td><td>返回响应头，字典格式</td></tr><tr><td>history</td><td>返回包含请求历史的响应对象列表（url）</td></tr><tr><td>is_permanent_redirect</td><td>如果响应是永久重定向的 url，则返回 True，否则返回 False</td></tr><tr><td>is_redirect</td><td>如果响应被重定向，则返回 True，否则返回 False</td></tr><tr><td>iter_content()</td><td>迭代响应</td></tr><tr><td>iter_lines()</td><td>迭代响应的行</td></tr><tr><td>json()</td><td>返回结果的 JSON 对象 (结果需要以 JSON 格式编写的，否则会引发错误)</td></tr><tr><td>links</td><td>返回响应的解析头链接</td></tr><tr><td>next</td><td>返回重定向链中下一个请求的 PreparedRequest 对象</td></tr><tr><td>ok</td><td>检查 “status_code” 的值，如果小于400，则返回 True，如果不小于 400，则返回 False</td></tr><tr><td>raise_for_status()</td><td>如果发生错误，方法返回一个 HTTPError 对象</td></tr><tr><td>reason</td><td>响应状态的描述，比如 “Not Found” 或 “OK”</td></tr><tr><td>request</td><td>返回请求此响应的请求对象</td></tr><tr><td>status_code</td><td>返回 http 的状态码，比如 404 和 200（200 是 OK，404 是 Not Found）</td></tr><tr><td>text</td><td>返回响应的内容，unicode 类型数据</td></tr><tr><td>url</td><td>返回响应的 URL</td></tr></tbody></table></li></ul><p>参数说明<br><code>requests.post(url, data=&#123;key: value&#125;, json=&#123;key: value&#125;, args)</code></p><blockquote><p>url 请求 url。<br>data 参数为要发送到指定 url 的字典、元组列表、字节或文件对象。<br>json 参数为要发送到指定 url 的 JSON 对象。<br>args 为其他参数，比如 cookies、headers、verify等。</p></blockquote><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常情况：</p><ul><li>404、500抛出HTMLError</li><li>BeautifulSoup获取的标签不存在返回None</li><li>requests请求超时<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> HTTPError <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getTitle</span>(<span class="hljs-params">url</span>): <br>    <span class="hljs-keyword">try</span>:<br>        html = urlopen(url,timeout=<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">except</span> HTTPError <span class="hljs-keyword">as</span> e: <br>        <span class="hljs-comment"># 打印异常</span><br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 请求超时</span><br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">try</span>:<br>        bsObj = BeautifulSoup(html.read()) <br>        title = bsObj.body.h1<br>    <span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:     <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> title<br><br>title = getTitle(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page1.html&quot;</span>) <br><span class="hljs-keyword">if</span> title == <span class="hljs-literal">None</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Title could not be found&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(title)<br></code></pre></td></tr></table></figure></li></ul><h2 id="BeautifulSoup方法"><a href="#BeautifulSoup方法" class="headerlink" title="BeautifulSoup方法"></a>BeautifulSoup方法</h2><p>BeautifulSoup返回对象方法findAll()可以根据属性查找所需标签<code>findAll(tag, attributes, recursive, text, limit, keywords)</code></p><ul><li><code>recursive</code>是一个布尔变量，为<code>Ture</code>查找标签参数的所有子标签，以及子标签的子标签，默认值是<code>True</code></li><li><code>text</code>用文本内容去匹配，设置<code>text=&#39;the prince&#39;</code>是查找网页中包含“the prince”内容的标签数量</li><li><code>limit</code>范围限制参数,<code>find</code>等价于<code>findAll</code>的<code>limit</code>等于1时的情形 </li><li><code>keyword</code>选择那些具有指定属性的标签，如<code>findAll(id=&quot;text&quot;)</code>其等价于<code>findAll(&quot;&quot;, &#123;&quot;id&quot;:&quot;text&quot;&#125;)</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/warandpeace.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br><span class="hljs-comment"># 获取span标签中class属性为green的所有对象</span><br>nameList = bsObj.findAll(<span class="hljs-string">&quot;span&quot;</span>, &#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;green&quot;</span>&#125;) <br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> nameList:<br>    <span class="hljs-comment"># get_text()只保留文本</span><br>    <span class="hljs-built_in">print</span>(name.get_text())<br><br>---<br><br><span class="hljs-comment"># 标签列表作为参数</span><br>.findAll(&#123;<span class="hljs-string">&quot;h1&quot;</span>,<span class="hljs-string">&quot;h2&quot;</span>,<span class="hljs-string">&quot;h3&quot;</span>,<span class="hljs-string">&quot;h4&quot;</span>,<span class="hljs-string">&quot;h5&quot;</span>,<span class="hljs-string">&quot;h6&quot;</span>&#125;)<br><span class="hljs-comment"># 属性列表做参数,返回所有属性为green和red的span标签</span><br>.findAll(<span class="hljs-string">&quot;span&quot;</span>, &#123;<span class="hljs-string">&quot;class&quot;</span>:&#123;<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>&#125;&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="子标签、后代标签与兄弟标签"><a href="#子标签、后代标签与兄弟标签" class="headerlink" title="子标签、后代标签与兄弟标签"></a>子标签、后代标签与兄弟标签</h2><ul><li>子标签：一个父标签的下一级<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 只取下一级</span><br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page3.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> bsObj.find(<span class="hljs-string">&quot;table&quot;</span>,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;giftList&quot;</span>&#125;).children:<br>    <span class="hljs-built_in">print</span>(child)<br>---<br><span class="hljs-comment"># 与后代有区别（获取所有后代）</span><br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> bsObj.find(<span class="hljs-string">&quot;table&quot;</span>,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;giftList&quot;</span>&#125;).descendants:<br>    <span class="hljs-built_in">print</span>(child)<br></code></pre></td></tr></table></figure></li><li>后代标签：一个父标签下面所有级别的标签</li><li>兄弟标签：与自己平级的标签（不包含自己），常用于表格处理中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 取与tr平级的所有标签</span><br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page3.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br><span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> bsObj.find(<span class="hljs-string">&quot;table&quot;</span>,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;giftList&quot;</span>&#125;).tr.next_siblings:<br>    <span class="hljs-built_in">print</span>(sibling)<br></code></pre></td></tr></table></figure></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>大多数支持字符串参数的函数可用正则表达式实现，如下抓取所有以<code>../img/gifts/img</code>开头，以<code>.jpg</code>结尾的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">import</span> re<br>html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page3.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br>images = bsObj.findAll(<span class="hljs-string">&quot;img&quot;</span>,&#123;<span class="hljs-string">&quot;src&quot;</span>:re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;\.\.\/img\/gifts/img.*\.jpg&quot;</span>)&#125;) <br><span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> images:<br>    <span class="hljs-built_in">print</span>(image[<span class="hljs-string">&quot;src&quot;</span>])<br></code></pre></td></tr></table></figure><p>常用正则表达式<br><a href="https://www.runoob.com/regexp/regexp-syntax.html">参考链接</a><br><img src="/../img/regular-expression.png" alt="常用正则表达式"></p><h2 id="网站信息采集"><a href="#网站信息采集" class="headerlink" title="网站信息采集"></a>网站信息采集</h2><p>通过递归爬取一个有多页面的网站信息，策略：若获取的新链接不在全局变量集合中，则加入全局变量并爬取这个页面的信息，若已存在则跳过，python的递归限制为1000次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">import</span> re<br>pages = <span class="hljs-built_in">set</span>() <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getLinks</span>(<span class="hljs-params">pageUrl</span>): <br>    <span class="hljs-keyword">global</span> pages<br>    html = urlopen(<span class="hljs-string">&quot;http://en.wikipedia.org&quot;</span>+pageUrl) <br>    bsObj = BeautifulSoup(html) <br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> bsObj.findAll(<span class="hljs-string">&quot;a&quot;</span>, href=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;^(/wiki/)&quot;</span>)): <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;href&#x27;</span> <span class="hljs-keyword">in</span> link.attrs: <br>            <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> pages: <span class="hljs-comment"># 我们遇到了新页面</span><br>                newPage = link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>]    <br>                <span class="hljs-built_in">print</span>(newPage) <br>                pages.add(newPage) <br>                getLinks(newPage)<br>getLinks(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>以下代码从 <a href="http://oreilly.com/">http://oreilly.com</a> 开始，随机地从一个外链跳到另一个外链，但没有异常处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">import</span> re <br><span class="hljs-keyword">import</span> datetime <br><span class="hljs-keyword">import</span> random<br>pages = <span class="hljs-built_in">set</span>() <br>random.seed(datetime.datetime.now())<br><br><span class="hljs-comment"># 获取页面所有内链的列表 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getInternalLinks</span>(<span class="hljs-params">bsObj, includeUrl</span>): <br>    internalLinks = [] <br>    <span class="hljs-comment"># 找出所有以&quot;/&quot;开头的链接 .</span><br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> bsObj.findAll(<span class="hljs-string">&quot;a&quot;</span>, href=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;^(/|.*&quot;</span>+includeUrl+<span class="hljs-string">&quot;)&quot;</span>)): <br>        <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: <br>            <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> internalLinks: <br>                internalLinks.append(link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>])<br>    <span class="hljs-keyword">return</span> internalLinks<br><br><span class="hljs-comment"># 获取页面所有外链的列表 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getExternalLinks</span>(<span class="hljs-params">bsObj, excludeUrl</span>): <br>    externalLinks = [] <br>    <span class="hljs-comment"># 找出所有以&quot;http&quot;或&quot;www&quot;开头且不包含当前URL的链接 </span><br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> bsObj.findAll(<span class="hljs-string">&quot;a&quot;</span>,href=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;^(http|www)((?!&quot;</span>+excludeUrl+<span class="hljs-string">&quot;).)*$&quot;</span>)):<br>        <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: <br>            <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> externalLinks: <br>                externalLinks.append(link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>])<br>    <span class="hljs-keyword">return</span> externalLinks <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">splitAddress</span>(<span class="hljs-params">address</span>):<br>    addressParts = address.replace(<span class="hljs-string">&quot;http://&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-string">&quot;/&quot;</span>) <br>    <span class="hljs-keyword">return</span> addressParts<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRandomExternalLink</span>(<span class="hljs-params">startingPage</span>): <br>    html = urlopen(startingPage) <br>    bsObj = BeautifulSoup(html)<br>    externalLinks = getExternalLinks(bsObj, splitAddress(startingPage)[<span class="hljs-number">0</span>]) <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(externalLinks) == <span class="hljs-number">0</span>:<br>        internalLinks = getInternalLinks(startingPage) <br>        <span class="hljs-keyword">return</span> getNextExternalLink(internalLinks[random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(internalLinks)-<span class="hljs-number">1</span>)])<br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-keyword">return</span> externalLinks[random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(externalLinks)-<span class="hljs-number">1</span>)] <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">followExternalOnly</span>(<span class="hljs-params">startingSite</span>):<br>    externalLink = getRandomExternalLink(<span class="hljs-string">&quot;http://oreilly.com&quot;</span>) <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;随机外链是：&quot;</span>+externalLink) <br>    followExternalOnly(externalLink)<br><br>followExternalOnly(<span class="hljs-string">&quot;http://oreilly.com&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以使用scrapy完成爬虫</p><h2 id="scrapy使用"><a href="#scrapy使用" class="headerlink" title="scrapy使用"></a>scrapy使用</h2><p>scrapy是一个爬虫框架，相关教程可以参考<a href="https://docs.scrapy.org/en/latest/">scrapy教程</a>（另有一份<a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html">中文版</a>但不是最新且项目已废弃，可参考）这里只记录一点常用的指令和个人理解。</p><ol><li>安装<br><code>pip install scrapy</code>即可</li><li>创建一个命名为name的项目<br><code>scrapy startproject &lt;name&gt;</code></li><li>创建一个命名为douban域名为movie.douban.com的spider（也可以手动创建，继承Spider类即可）<br><code>scrapy genspider &lt;douban&gt; &lt;movie.douban.com&gt;</code></li><li>启动命名为name的spider<br><code>scrapy crawl &lt;name&gt;</code></li></ol><ul><li>scrapy shell功能有助于快速了解网页内容<br><code>scrapy shell &lt;&quot;https://www.amazon.com/dp/B00004CQT3/&quot;&gt;</code></li><li>运行quotes输出到quotes.json中，-O覆盖，-o续写<br><code>scrapy crawl &lt;quotes&gt; -O &lt;quotes.json&gt;</code></li></ul><h2 id="处理复杂的http请求"><a href="#处理复杂的http请求" class="headerlink" title="处理复杂的http请求"></a>处理复杂的http请求</h2><p>urllib在处理复杂的http请求（比如涉及传参）时有些不足，requests为更优选择</p><p>进行post请求，并传递参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>params = &#123;<span class="hljs-string">&#x27;firstname&#x27;</span>: <span class="hljs-string">&#x27;Ryan&#x27;</span>, <span class="hljs-string">&#x27;lastname&#x27;</span>: <span class="hljs-string">&#x27;Mitchell&#x27;</span>&#125;<br>r = requests.post(<span class="hljs-string">&quot;http://pythonscraping.com/files/processing.php&quot;</span>, data=params)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>跟踪cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此处代码不完整</span><br>r = requests.post(<span class="hljs-string">&quot;http://pythonscraping.com/pages/cookies/welcome.php&quot;</span>, params) <br><span class="hljs-built_in">print</span>(r.cookies.get_dict()) <br></code></pre></td></tr></table></figure><p>当网站cookies经常变动，可以使用session完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests <br>session = requests.Session()<br>params = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;password&#x27;</span>&#125; <br>s = session.post(<span class="hljs-string">&quot;http://pythonscraping.com/pages/cookies/welcome.php&quot;</span>, params) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cookie is set to:&quot;</span>) <br><span class="hljs-built_in">print</span>(s.cookies.get_dict()) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------&quot;</span>) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Going to profile page...&quot;</span>)<br>s = session.get(<span class="hljs-string">&quot;http://pythonscraping.com/pages/cookies/profile.php&quot;</span>)<br><span class="hljs-built_in">print</span>(s.text)<br></code></pre></td></tr></table></figure><h2 id="处理javascript"><a href="#处理javascript" class="headerlink" title="处理javascript"></a>处理javascript</h2><p>一般javascript不会被采集，因此对于一些动态的网站采集的数据与网站上显示的内容可能不一致，因此使用<a href="http://www.seleniumhq.org/">Selenium</a>库(可直接使用指令<code>pip install selenium</code>完成安装)，一般配合无头浏览器<a href="https://phantomjs.org/download.html">PhantomJS</a>(不是python库，所以安装需要在官网下载)使用，遇到Google Analytics时需要设置cookie</p><div class="note note-warning">            <p>新版Selenium不支持phantomjs（可通过安装低版本使用<code>pip install selenium==2.48.0</code>），也可以用谷歌浏览器</p>          </div> <h3 id="selenium-Chrome配置"><a href="#selenium-Chrome配置" class="headerlink" title="selenium+Chrome配置"></a>selenium+Chrome配置</h3><ol><li>在谷歌浏览器网址中输入<code>chrome://version/</code>，查看版本信息</li><li>在<code>https://chromedriver.chromium.org/home</code>网站下载对应版本的驱动</li><li>将下载后的exe文件放入python路径中的Scripts即可，如<code>...\Python\Python38\Scripts</code>路径</li><li>执行以下代码不报错说明成功<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>)<br>driver.quit()<br></code></pre></td></tr></table></figure></li></ol><h2 id="爬虫进阶"><a href="#爬虫进阶" class="headerlink" title="爬虫进阶"></a>爬虫进阶</h2><ol><li>修改请求头，以达到爬虫更像人<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit 537.36 (KHTML, like Gecko) Chrome&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>:<span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>&#125;<br></code></pre></td></tr></table></figure>使用use-gent：<code>iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257Safari/9537.53</code>相当于使用移动设备访问网站（内容更简化没有广告等干扰）</li><li>处理cookie<br>需要使用Selenium 和 PhantomJS，可以实现获取cookie或者保存cookie<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver <br>driver = webdriver.PhantomJS(executable_path=<span class="hljs-string">&#x27;&lt;Path to Phantom JS&gt;&#x27;</span>) <br>driver.get(<span class="hljs-string">&quot;http://pythonscraping.com&quot;</span>) <br>driver.implicitly_wait(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(driver.get_cookies())<br></code></pre></td></tr></table></figure></li><li>处理隐含字段<br>如下html网页，含有三个隐含字段，若填充并提交会被服务器判为机器人封杀，</li></ol><ul><li>第一个链接通过CSS属性设置display:None</li><li>name&#x3D;”phone” 一个隐含的输入字段 </li><li>name&#x3D;”email” 将元素向右移动 50 000 像素（超出电脑显示器的边界）并隐藏滚动条<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>A bot-proof form<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">overflow-x</span>:hidden; &#125; </span><br><span class="language-css">    <span class="hljs-selector-class">.customHidden</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>:absolute; </span><br><span class="language-css">    <span class="hljs-attribute">right</span>:<span class="hljs-number">50000px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>A bot-proof form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://pythonscraping.com/dontgohere&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span>Go here!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://pythonscraping.com&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;valueShouldNotBeModified&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;customHidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;intentionallyBlank&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstName&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>使用selenium解决，通过link.is_displayed()自动判断<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver <br><span class="hljs-keyword">from</span> selenium.webdriver.remote.webelement <span class="hljs-keyword">import</span> WebElement<br>driver = webdriver.PhantomJS(executable_path=<span class="hljs-string">&#x27;&#x27;</span>) <br>driver.get(<span class="hljs-string">&quot;http://pythonscraping.com/pages/itsatrap.html&quot;</span>) <br>links = driver.find_elements_by_tag_name(<span class="hljs-string">&quot;a&quot;</span>) <br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> links: <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> link.is_displayed(): <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The link &quot;</span>+link.get_attribute(<span class="hljs-string">&quot;href&quot;</span>)+<span class="hljs-string">&quot; is a trap&quot;</span>)<br><br>fields = driver.find_elements_by_tag_name(<span class="hljs-string">&quot;input&quot;</span>) <br><span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> fields: <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> field.is_displayed():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Do not change value of &quot;</span>+field.get_attribute(<span class="hljs-string">&quot;name&quot;</span>))<br></code></pre></td></tr></table></figure></li></ul><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="http消息"><a href="#http消息" class="headerlink" title="http消息"></a>http消息</h2><p>http消息由头字段（header field）和数据字段（data field）组成，常用的头字段有</p><table><thead><tr><th>名称</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>User-Agent</td><td>字符串，表示发出请求的浏览器和操作系统信息</td><td>Mozilla&#x2F;5.0 (X11; Ubuntu; Linux x86_64; rv:28.0) Gecko&#x2F;20100101 Firefox&#x2F;28.0</td></tr><tr><td>Cookie</td><td>变量，被网络应用用来存储会话数据和其他信息</td><td>实例略</td></tr><tr><td>Status</td><td>表示网页请求状态</td><td>“200”（成功），“404”（文件未找到）</td></tr></tbody></table><h2 id="关于《python网络数据采集》"><a href="#关于《python网络数据采集》" class="headerlink" title="关于《python网络数据采集》"></a>关于《python网络数据采集》</h2><p>书中还介绍了图像识别与文字处理（用于部分验证码）这部分笔记中未记录，以及很多技术比如lambda，“无头”（headless）浏览器PhantomJS等，这些没有详细展开</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>python网络数据采集<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.scrapy.org/en/latest/">scrapy教程</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生学习笔记</title>
    <link href="/2022/09/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p>记录云原生项目部署中的一些事项，从k8s部署到镜像打包推送（使用docker）</p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>运行在虚拟机ubuntu20.04上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 构建容器镜像，.表示在当前文件夹内，需要先有一个dockerfile</span><br>docker build -t getting-started .<br><br><span class="hljs-comment"># docker run运行docker，-d在后台运行，-p 80:6379，将主机的端口80映射到容器中的端口80</span><br><span class="hljs-comment"># --name给容命名</span><br>docker run -d -p 80:6379 --name redis redis:lastest<br></code></pre></td></tr></table></figure><p>更新源码后，需要先删除旧容器，再启动新容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取容器的 ID </span><br>docker ps<br><br><span class="hljs-comment"># 使用docker stop命令停止容器。</span><br><span class="hljs-comment"># 用docker ps查询的ip更换&lt;the-container-id&gt;</span><br>docker stop &lt;the-container-id&gt;<br><br><span class="hljs-comment"># 容器停止后，使用docker rm命令将其删除</span><br>docker <span class="hljs-built_in">rm</span> &lt;the-container-id&gt;<br><br><span class="hljs-comment"># 将停止和删除命令合并，通过force指令</span><br>docker <span class="hljs-built_in">rm</span> -f &lt;the-container-id&gt;<br><br><span class="hljs-comment"># 启动更新后的容器</span><br>docker run -dp 3000:3000 getting-started<br></code></pre></td></tr></table></figure><p>使用卷实现持久化数据，更换容器后被存储的数据不会改变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用docker volume create命令创建卷</span><br>docker volume create todo-db<br><br><span class="hljs-comment"># 再次停止并删除应用程序容器docker rm -f &lt;id&gt;，因为它仍在运行而不使用持久</span><br><br><span class="hljs-comment"># 启动 todo 应用程序容器，添加-v标志以指定卷安装，使用命名卷并将其挂载到/etc/todos，捕获在该路径创建的所有文件</span><br>docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started<br></code></pre></td></tr></table></figure><p>docker compose使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否安装上</span><br>docker compose version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动应用程序栈，-d在后台运行所有内容</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h2 id="安装与使用镜像"><a href="#安装与使用镜像" class="headerlink" title="安装与使用镜像"></a>安装与使用镜像</h2><h3 id="1-找镜像。"><a href="#1-找镜像。" class="headerlink" title="1. 找镜像。"></a>1. 找镜像。</h3><p>在<a href="https://hub.docker.com/">docker hub</a>找所需的镜像，找不同版本可以点击tag查找所需版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载最新版本</span><br>docker pull nginx<br><br>docker pull nginx:1.20.1<br><br><span class="hljs-comment"># 查看所有镜像</span><br>docker images<br><br><span class="hljs-comment"># 删除镜像</span><br>docker rmi 镜像名:版本号/镜像<span class="hljs-built_in">id</span><br><br>docker <span class="hljs-built_in">rm</span> 镜像<br></code></pre></td></tr></table></figure><h3 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2. 启动容器"></a>2. 启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><span class="hljs-comment"># 常用的OPTIONS</span><br><span class="hljs-comment"># OPTIONS:开机自启</span><br>--restart-always <br><span class="hljs-comment"># OPTIONS:端口映射，主机到镜像</span><br>-p 88:80<br><br><span class="hljs-comment"># 查看正在运行的容器</span><br>docker ps<br><span class="hljs-comment"># 查看所有</span><br>docker ps -a <br><span class="hljs-comment"># 删除停止的容器</span><br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span>/名称<br></code></pre></td></tr></table></figure><h3 id="3-进入容器修改内容"><a href="#3-进入容器修改内容" class="headerlink" title="3. 进入容器修改内容"></a>3. 进入容器修改内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器内部</span><br>docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> /bin/bash<br></code></pre></td></tr></table></figure><h3 id="4-提交改变"><a href="#4-提交改变" class="headerlink" title="4. 提交改变"></a>4. 提交改变</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 总命令,，打包成一个镜像，细节使用--help查看</span><br>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br><br><span class="hljs-comment"># 常用形式</span><br>docker commit -a <span class="hljs-string">&quot;作者&quot;</span> -m <span class="hljs-string">&quot;提交变化&quot;</span> 容器<span class="hljs-built_in">id</span> 自定义名称<br></code></pre></td></tr></table></figure><h3 id="5-远程使用"><a href="#5-远程使用" class="headerlink" title="5. 远程使用"></a>5. 远程使用</h3><ul><li>打包成一个压缩包tar后传输给另一个机器，另一个机器再解压运行即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打包成一个压缩包tar后传输</span><br>docker save -o 自定义名称 镜像<br><br><span class="hljs-comment"># 对压缩包解压运行即可</span><br>docker load -i 上一步定义的名称<br></code></pre></td></tr></table></figure></li><li>推送到远程仓库，需要先<code>docker login</code>登录，并且dockerhub上有自己的仓库(<code>docker logout</code>登出)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker tag &lt;local-image:tagname&gt; &lt;new-repo:tagname&gt;<br>docker push &lt;new-repo:tagname&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-将数据挂载到外部"><a href="#6-将数据挂载到外部" class="headerlink" title="6. 将数据挂载到外部"></a>6. 将数据挂载到外部</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro --restart=always -d nginx<br><span class="hljs-comment"># --name some-nginx 定义名称</span><br><span class="hljs-comment"># -v /some/content:/usr/share/nginx/html:ro 将/usr/share/nginx/html与主机/some/content目录挂载，且为只读模式</span><br><span class="hljs-comment"># -d 后台运行</span><br><span class="hljs-comment"># --restart=always 开机自启</span><br><br>docker run --name my-nginx \<br>-v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro <br>-d nginx<br></code></pre></td></tr></table></figure><p>挂载一个redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -v /data/redis/redis.conf:/etc/redis/redis.conf \<br>-v /data/redis/data:/data  \<br>-d --name myredis  \<br>-p 6379:6379 \<br>redis:latest redis-server /etc/redis/redis.conf<br><span class="hljs-comment"># 指令解释</span><br><span class="hljs-comment"># -v 进行挂载，将本地/data/redis/redis.conf与容器/etc/redis/redis.conf相挂载</span><br><span class="hljs-comment"># redis-server /etc/redis/redis.conf 启动自定义配置文件,指定配置文件必须是容器内的</span><br></code></pre></td></tr></table></figure><h3 id="7-杂项"><a href="#7-杂项" class="headerlink" title="7. 杂项"></a>7. 杂项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看日志</span><br>docker logs 容器<span class="hljs-built_in">id</span><br><br><span class="hljs-comment"># 把容器指定位置的东西复制出来，将命令返回来是将外部复制到容器内</span><br>docker <span class="hljs-built_in">cp</span> 容器<span class="hljs-built_in">id</span>:文件绝对路径 外部路径<br></code></pre></td></tr></table></figure><p>在docker运行期间操作防火墙需要重启docker<br><code>systemctl restart docker</code></p><h2 id="打包并使用镜像"><a href="#打包并使用镜像" class="headerlink" title="打包并使用镜像"></a>打包并使用镜像</h2><p>编写Dockerfile，示例如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> docker pull openjdk:<span class="hljs-number">8</span>-jdk-slim<br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=yedeng</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> target/*.jar /app.jar</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在当前目录下开始打包（必须要有docker环境），打包结束后可以使用<code>docker images</code>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t java-demo:v1.0 .<br><span class="hljs-comment"># -t java-demo:v1.0 表示命名</span><br><span class="hljs-comment"># . 表示在当前目录下，用于COPY中的路径</span><br></code></pre></td></tr></table></figure><p>设置主机名<br>hostnamectl set-hostname 自定义名称</p><h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h1><p>部分概念类似于docker，但k8s具有自愈、负载均衡等自动调整的能力</p><h2 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 验证集群节点状态</span><br>kubectl get nodes<br><br><span class="hljs-comment"># 获取各pod的ip</span><br>kubectl get pod -owide<br><br><span class="hljs-comment"># 查看对pod的描述</span><br>kubectl describe pod &lt;pod-name&gt;<br>kubectl describe pod -n &lt;namespace&gt; &lt;pod-name&gt;<br><br><span class="hljs-comment"># 应用yaml文件</span><br>kubectl apply -f &lt;calico.yaml&gt;<br><br><span class="hljs-comment"># 取消对yaml文件应用</span><br>kubectl delete -f &lt;ingress.yaml&gt;<br><br><span class="hljs-comment"># 查看集群信息</span><br>kubectl cluster-info<br></code></pre></td></tr></table></figure><h2 id="可视化工具dashboard"><a href="#可视化工具dashboard" class="headerlink" title="可视化工具dashboard"></a>可视化工具dashboard</h2><p><a href="https://github.com/kubernetes/dashboard">dashboard</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml<br></code></pre></td></tr></table></figure><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><p><a href="https://www.yuque.com/leifengyang/oncloud/gz1sls#XKRmo">安装步骤</a><br>部署中遇到<code>/proc/sys/net/ipv4/ip_forward</code>为0的问题<br><a href="https://stackoverflow.com/questions/55531834/kubeadm-fails-to-initialize-when-kubeadm-init-is-called">解决方法</a></p><p>部署网络组件calico时，应使用获取对应版本(部署使用1.20.9版本)的<code>calico.yaml</code><br><code>curl https://docs.projectcalico.org/v3.20/manifests/calico.yaml -O</code></p><p>部署metrics之后使用<code>kubectl top nodes</code>显示服务不可获取<br><a href="https://stackoverflow.com/questions/53811388/error-from-server-serviceunavailable-the-server-is-currently-unable-to-handle">参考资料</a></p><p>devops中使用apache下载，改为阿里云镜像<br>在ks-devops-agent配置文件修改MavenSetting</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>部署：(Deployment)<br>有状态副本集：中间件（StatefulSet）<br>守护进程集：(DaemonSet)日志收集</p><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><p>通过deployment部署的应用，只有删除deployment才能删除pod（直接删除pod将重启pod）<br>具有多副本、扩缩容、自愈、故障转移、滚动更新、版本回退能力<br>命令行部署<code>kubectl create deployment &lt;mytomcat&gt; --image=&lt;tomcat:8.5.68&gt;</code><br>查看部署<code>kubectl get deploy</code></p><p>yaml配置部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-dep</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>获取命名空间<code>kubectl get ns</code></p><p>命令行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create ns hello<br>kubectl delete ns hello<br></code></pre></td></tr></table></figure><p>通过yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br></code></pre></td></tr></table></figure><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>命令行创建，与docker类似<code>kubectl run mynginx --image=nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看default名称空间的Pod</span><br>kubectl get pod <br><span class="hljs-comment"># 描述</span><br>kubectl describe pod &lt;pod-name&gt;<br><span class="hljs-comment"># 删除</span><br>kubectl delete pod &lt;pod-name&gt; -n &lt;namespace&gt;<br><span class="hljs-comment"># 查看Pod的运行日志</span><br>kubectl logs &lt;pod-name&gt;<br><br><span class="hljs-comment"># 打印更完善的信息</span><br>kubectl get pod -owide<br><span class="hljs-comment"># 每个Pod,k8s都会分配一个ip（仅限集群内），使用Pod的ip+pod里面运行容器的端口</span><br>curl 192.168.169.136<br><br><span class="hljs-comment"># 集群中的任意一个机器以及任意的应用都能通过Pod分配的ip来访问这个Pod</span><br></code></pre></td></tr></table></figure><p>访问pod的bash，也可以使用dashboard选择’执行’访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">exec</span> -it &lt;pod-name&gt; -- /bin/bash<br></code></pre></td></tr></table></figure><p>通过yaml创建</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">mynginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mynginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mynginx</span><br></code></pre></td></tr></table></figure><p>一个pod两个容器（两个image），一个pod有一个内部ip，多个容器共用这个ip，通过不同的端口区分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:8.5.68</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br></code></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>仅限集群内部访问<br>获取所有暴露的服务<code>kubectl get service</code><br>删除某个service<code>kubectl delete service &lt;service-name&gt;</code></p><p>选择一次部署，统一部署pod使用的ip（任意）（在集群内的机器上可以通过该方法访问）<br>也可以在容器内部，使用域名访问，域名为：服务名.命名空间.svc（在机器上无法使用域名访问）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 暴露my-dep部署内容，--port是集群内部开放的端口，在集群内使用serviceip:8000即可负载均衡的访问，--target-port是（部署pod的）目标端口,type缺省为ClusterIP</span><br>kubectl expose deployment &lt;my-dep&gt; --port=8000 --target-port=80 --<span class="hljs-built_in">type</span>=ClusterIP<br><br><span class="hljs-comment">#使用标签检索Pod</span><br>kubectl get pod -l app=my-dep<br></code></pre></td></tr></table></figure><p>暴露服务有两种方式ClusterIP和NodeIP</p><h4 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h4><h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><p>集群外部可访问</p><p>nodeport在每个集群都会开放一个端口，开放的端口范围在30000-32767，可访问任意一台机器的ip:对应端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class="hljs-built_in">type</span>=NodePort<br></code></pre></td></tr></table></figure><p>通过yaml文件暴露端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-dep</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p>相当于网关层<br>查看规则<code>kubectl get ingress</code>可简写为<code>kubectl get ing</code><br>修改规则<code>kubectl edit ing &lt;name&gt;</code></p><p>配置通过域名访问服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span>  <br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-host-bar</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ingressClassName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;hello.atguigu.com&quot;</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span> <span class="hljs-comment"># 以&quot;hello.atguigu.com&quot;作为前缀的所有请求发给hello-server服务（即hello.atguigu.com/的所有请求）</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/&quot;</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">service:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">hello-server</span><br>            <span class="hljs-attr">port:</span><br>              <span class="hljs-attr">number:</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><h2 id="存储持久化"><a href="#存储持久化" class="headerlink" title="存储持久化"></a>存储持久化</h2><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>一个文件系统<br>实现k8s主从节点共享<br>在k8s的主节点运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#nfs主节点，将/ngs/data作为共享文件夹暴露</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot;</span> &gt; /etc/exports<br><br><span class="hljs-built_in">mkdir</span> -p /nfs/data<br><span class="hljs-comment"># 启用rpc远程绑定</span><br>systemctl <span class="hljs-built_in">enable</span> rpcbind --now<br><span class="hljs-comment"># 启动nfs服务器</span><br>systemctl <span class="hljs-built_in">enable</span> nfs-server --now<br><span class="hljs-comment">#配置生效</span><br>exportfs -r<br></code></pre></td></tr></table></figure><p>删除部署之后，文件系统内的东西不会自动清理</p><p>将部署中的<code>/usr/share/nginx/html</code>路径下内容挂载到<code>/nfs/data/nginx-pv</code>（nfs路径，需要装好nfs文件系统）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-pv-demo</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-pv-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-pv-demo</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-pv-demo</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">172.31</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/nginx-pv</span><br></code></pre></td></tr></table></figure><h4 id="PV-amp-PVC"><a href="#PV-amp-PVC" class="headerlink" title="PV&amp;PVC"></a>PV&amp;PVC</h4><p>PV：持久卷（Persistent Volume），将应用需要持久化的数据保存到指定位置<br>PVC：持久卷申明（Persistent Volume Claim），申明需要使用的持久卷规格<br>二者配合使用，能够为应用分配指定大小空间；当pod删除时，其对应的存储空间也会删除</p><p><strong>静态供应</strong>创建好PV池，申请时在内部选择<br>查看创建的pv池<code>kubectl get pv</code><br>创建PV</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># capacity.storage限定大小10M，</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv01-100m</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">100M</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/01</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.4</span><span class="hljs-number">.17</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv02-3gi</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">3Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/02</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.4</span><span class="hljs-number">.17</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv03-5gi</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/03</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.4</span><span class="hljs-number">.17</span><br></code></pre></td></tr></table></figure><p>PVC相当于申请书，用于申请空间<br><strong>动态供应</strong>申请时自动创建PV</p><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><p>配置统一管理</p><p>将redis.conf文件制作为configmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create cm redis-conf --from-file=redis.conf<br></code></pre></td></tr></table></figure><p>以上指令等价于一下yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">data:</span>    <span class="hljs-comment">#data是所有真正的数据，key：默认是文件名   value：配置文件的内容</span><br>  <span class="hljs-attr">redis.conf:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    appendonly yes</span><br><span class="hljs-string"></span><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis-conf</span> <span class="hljs-comment">#定义配置名</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure><p>在部署redis时使用配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-server</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/redis-master/redis.conf&quot;</span>  <span class="hljs-comment">#指的是redis容器内部的位置</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span> <span class="hljs-comment"># /data中的内容以data形式挂载，对应volume中name为data的挂载方式</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/redis-master</span> <span class="hljs-comment"># 挂载路径，名为config</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>      <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment"># 配置名为config的挂载方式</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">redis-conf</span> <span class="hljs-comment"># 名为redis-conf的配置集</span><br>        <span class="hljs-attr">items:</span> <span class="hljs-comment"># 获取data中的对应项目</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">redis.conf</span> <span class="hljs-comment"># 取出key值放在path（redis内部的）下</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">redis.conf</span><br></code></pre></td></tr></table></figure><h2 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h2><p>用于保存敏感信息</p><p>查看<code>kubectl get secret</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create secret docker-registry leifengyang-docker \<br>--docker-username=leifengyang \<br>--docker-password=Lfy123456 \<br>--docker-email=534096094@qq.com<br></code></pre></td></tr></table></figure><p>使用保存的secret下载镜像yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">private-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">private-nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">leifengyang/guignginx:v1.0</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">leifengyang-docker</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot+mysql+vue2尝试记录</title>
    <link href="/2022/09/24/springboot%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/24/springboot%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>记录一次springboot+mysql+vue2的尝试记录，从前端干到后端，主要使用IDEA,Mysql(后端),VSCode(前端)，先很粗略的走通一下</p><div class="note note-warning">            <p><strong>环境：</strong>windows10，IDEA2022.2.2，MySQL8.0.30</p>          </div> <h2 id="IDEA使用"><a href="#IDEA使用" class="headerlink" title="IDEA使用"></a>IDEA使用</h2><p>在application.properties文件中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.compression.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.devtools.restart.additional-paths</span>=<span class="hljs-string">src/main/java</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 静态资源映射</span><br><span class="hljs-comment"># 表示静态资源的访问路径（缺省为/**）</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/images/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 文件上传</span><br><span class="hljs-attr">&lt;!--</span> <span class="hljs-string">文件的最大大小 --&gt;</span><br><span class="hljs-attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.data.cassandra.request.throttler.max-requests-size</span>=<span class="hljs-string">10MB</span><br></code></pre></td></tr></table></figure><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><ul><li>controller控制器使用<ul><li>@Controller请求页面和数据，返回html页面（前后端不分离）</li><li>@RestController请求数据</li></ul></li><li>RequestMapping负责url的路由映射，可添加在controller类上，其参数有<ul><li>value（请求url的路径），</li><li>method（http的请求方法，如get（获取资源），delete（删除资源），post（新建或更新），put（更新资源）等），method匹配也可用getmapping，putmapping等</li><li>consumes请求的媒体类型，</li><li>produces请求的响应类型，</li><li>params,headers请求的参数和请求头的值</li></ul></li><li>参数传递，@RequestParam(value&#x3D;”nickname”，required&#x3D;fasle)传入nickname参数映射到其后一个参数，required表示是否可选参数，加上注解后表明该参数必须，</li><li>常见错误，<ul><li>4开头是浏览器的错误</li><li>404路径错误或未编译</li><li>405方法（post等）不匹配，参数有误</li></ul></li><li>通配符<ul><li>**表示路径后任意层都是该页面</li><li>*表示路径后一层是该页面</li></ul></li><li>拦截器，HandleInterceptor<ul><li>HandleInterceptor接口有三种方法，preHandle,postHandle,afterCompletion</li><li>拦截器注册，</li></ul></li></ul><p>Restful API</p><h2 id="Swagger使用"><a href="#Swagger使用" class="headerlink" title="Swagger使用"></a>Swagger使用</h2><ol><li>需要在项目中加入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在application.properties中添加配置<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="hljs-string">ant_path_matcher</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="Mysql使用"><a href="#Mysql使用" class="headerlink" title="Mysql使用"></a>Mysql使用</h2><p>密码：Ydx15877470609</p><ol><li>在项目中添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        MyBatisPlus依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mysql驱动依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        数据连接池druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在application.properties中配置数据库的相关信息<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mybatis-plus.comfiguration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure></li><li>添加@MapperScan注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootAppliation</span><br><span class="hljs-meta">@MapperScan(&quot;com.xx.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusDemoApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringBootAppliation.run(MybatisplusDemoApplication.class,args)<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="vue使用"><a href="#vue使用" class="headerlink" title="vue使用"></a>vue使用</h2><p>v-if是直接不创建对应标签，v-show是创建标签但通过css隐藏（频繁切换使用v-show）<br>v-for中的key一般取item.id而不能是index<br>package.json与IDEA中的pom.xml类似<br>vue3使用create创建组件；vue2使用render<br>使用了elementui和<a href="https://fontawesome.dashgame.com/">第三方图标库</a><br>使用axios进行网络请求<a href="https://axios-http.com/zh/docs/req_config">参考</a>，可直接在main.js中导入axios<br>使用vuerouter<code>npm vue-router@3</code>，有子路由，动态路由，路由传参<br>路由跳转分为声明式和编程式<br>路由守卫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">router.beforeEach((to,from,next)=&gt;&#123;<br>    if(to.path===&#x27;/main&#x27;&amp;&amp;!isAuthenticated)&#123;<br>        next(&#x27;/login&#x27;)<br>    &#125;<br>    else&#123;<br>        next()<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Vuex使用"><a href="#Vuex使用" class="headerlink" title="Vuex使用"></a>Vuex使用</h2><p>vuex中的State,Getter,Mutation,Action,Module五个概念<br>vue2对应安装vuex3<code>npm install vuex@3</code></p><p>跨域问题<br>不同源（同源是指两个页面具有相同的协议、主机和端口号）的客户端脚本在没有明确授权的情况下，不能读写对方资源，可通过CORS解决（后端实现）</p><h2 id="mock使用"><a href="#mock使用" class="headerlink" title="mock使用"></a>mock使用</h2><p>用于前端进行接口调用测试，模拟接口<br>语法规范：</p><ol><li><p>数据模板（Data Template Definition，DTD）</p></li><li><p>数据占位符（Data Placeholder Definition，DPD）<br>数据模板的组成：属性名name，生成规则rule，属性值value<br><code>&#39;name|rule&#39;: value</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 七种格式</span><br>&#x27;name|min-max&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|count&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|min-max.dmin-dmax&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|min-max.dcount&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|count.dmin-dmax&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|count.dcount&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|+step&#x27;<span class="hljs-punctuation">:</span> value<br></code></pre></td></tr></table></figure></li><li><p>属性值为string</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//1. 属性值是string</span><br><br><span class="hljs-comment">//重复string [min,max]次</span><br>&#x27;name|min-max&#x27;<span class="hljs-punctuation">:</span>String<br><span class="hljs-comment">//重复string count次</span><br>&#x27;name|count&#x27;<span class="hljs-punctuation">:</span>String<br></code></pre></td></tr></table></figure></li><li><p>属性值为numebr</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//属性值自动加一</span><br>&#x27;name|+<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">:</span>number<br><span class="hljs-comment">//生成一个[min,max]之间的数字,与number所填的数字无关</span><br>&#x27;name|min-max&#x27;<span class="hljs-punctuation">:</span>number<br><span class="hljs-comment">//生成一个整数在[min,max]，小数部分保留[dmin,dmax]位</span><br>&#x27;name|min-max.dmin-dmax&#x27;<span class="hljs-punctuation">:</span>number<br></code></pre></td></tr></table></figure></li><li><p>属性值为bool</p></li><li><p>属性值为Object</p></li><li><p>属性值为array</p></li><li><p>属性值为functio</p></li><li><p>属性值为正则表达式regexp</p></li></ol><p>数据占位符<br>格式：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-meta">@占位符</span><br><span class="hljs-meta">@占位符(参数</span> [， 参数])<br><br>例如<br><span class="hljs-meta">@ip,</span><span class="hljs-meta">@email,</span><span class="hljs-meta">@cname(随机生成中文名)</span><br></code></pre></td></tr></table></figure><h2 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h2><p>基于vue和element-ui用于后台管理员使用的界面</p><h2 id="跨域认证JWT"><a href="#跨域认证JWT" class="headerlink" title="跨域认证JWT"></a>跨域认证JWT</h2><p>json web token(JWT)是一个token的具体实现方案<br>分为三部分：Header(json对象，描述jwt的元数据，alg是签名算法，typ是令牌类型),Payload(json对象，存放实际传递的数据),Signatrue(对前两部分的签名，防止数据篡改)</p><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>ECS(Elastic Compute Service)</p><h2 id="云端环境准备"><a href="#云端环境准备" class="headerlink" title="云端环境准备"></a>云端环境准备</h2><p>以CentOS为例</p><h3 id="1-Xshell远程连接服务器，xftp上传文件"><a href="#1-Xshell远程连接服务器，xftp上传文件" class="headerlink" title="1. Xshell远程连接服务器，xftp上传文件"></a>1. Xshell远程连接服务器，xftp上传文件</h3><p>也可以在终端直接使用ssh连接远程服务器</p><h3 id="2-Mysql安装（用云服务器系统的版本）"><a href="#2-Mysql安装（用云服务器系统的版本）" class="headerlink" title="2. Mysql安装（用云服务器系统的版本）"></a>2. Mysql安装（用云服务器系统的版本）</h3><p>卸载CentOS7自带的mariadb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查找</span><br>rpm -qa|grep mariadb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载,卸载版本应对应查找结果</span><br>rpm -e mariadb-libs-5.5.52-1.e17.x86_64 --nodeps<br></code></pre></td></tr></table></figure><p>解压mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建mysql安装包存放点</span><br>mkdir /usr/server/mysql<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压，-C指定解压的目录</span><br>tar xvf mysql-5.7.34-1.el7.x86_64.rpm-bundle.tar -C mysql<br></code></pre></td></tr></table></figure><p>执行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到安装目录后安装依赖</span><br>yum -y install libaio<br>yum -y install libncurses*<br>yum -y install perl perl-devel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">正式安装</span><br>rpm -ivh mysql-community-common-5.7.34-1.e17.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.34-1.e17.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.34-1.e17.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.34-1.e17.x86_64.rpm<br></code></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动mysql</span><br>systemctl start mysqld.Service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看生成的临时root密码</span><br>cat /var/log/mysqld.log | grep password<br></code></pre></td></tr></table></figure><p>修改初始的随机密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录mysql</span><br>mysql -u root -p<br>Enter passsword: # 输入临时密码<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新root密码</span><br>set global validate_password_policy=0;<br>set global validate_password_length=1;<br>set passsword=passsword(&#x27;root&#x27;);<br></code></pre></td></tr></table></figure><p>授予远程连接的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all privilage on *.* to &#x27;root&#x27; @&#x27;%&#x27; identified by &#x27;root&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新</span><br>flush privileges;<br></code></pre></td></tr></table></figure><p>控制命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql的启动 状态查看 关闭</span><br>systemctl stop mysqld<br>systemctl status mysqld<br>systemctl start mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置为开机自启</span><br>systemctl enable mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看是否设置成功</span><br>systemctl list-unit-files | grep mysqld<br></code></pre></td></tr></table></figure><p>关闭防火墙(如果是自己的虚拟机)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看防火墙状态</span><br>firewall-cmd --state<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止firewall</span><br>systemctl stop firewalld.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁止firewall开机启动</span><br>systemctl disable firewalld.service<br><br><br></code></pre></td></tr></table></figure><h3 id="3-nginx安装"><a href="#3-nginx安装" class="headerlink" title="3. nginx安装"></a>3. nginx安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br>yum update<br>yum -y install nginx<br></code></pre></td></tr></table></figure><p>nginx命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx<br>systemctl stop nginx<br>systemctl restart nginx<br></code></pre></td></tr></table></figure><h3 id="4-配置jdk"><a href="#4-配置jdk" class="headerlink" title="4. 配置jdk"></a>4. 配置jdk</h3><p>下载所需的jdk后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zvxf jdk-8u131-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打开文件后在文末添加</span><br>export JAVA_HOME=/usr/server/jdk1.8.0_131 # 解压路径（自定义）<br>export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使修改生效</span><br>source /stc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试</span><br>java -version<br></code></pre></td></tr></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">构建项目，生成dist文件夹</span><br>npm run build<br></code></pre></td></tr></table></figure><p>将dist文件夹上传云服务器，再配置nginx<br>修改nginx&#x2F;conf.d目录下的vue.conf文件（没有则新建）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">server&#123;<br>    listen 80;<br>    # 域名<br>    server_name localhost;<br><br>    location / &#123;<br>        root /usr/app/dist;# 路径自定义<br>        index index.html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>将java程序打包生成jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">nohup</span>是在后台执行</span><br>nohup java -jar xxx.jar &gt; logName.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://cn.vuejs.org/guide/introduction.html">vue文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://baomidou.com/pages/24112f/">MyBatisPlus文档</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://element.eleme.cn/#/zh-CN/component/table">elementui文档</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.logosc.cn/logo/favicon">favicon图标制作</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://fontawesome.dashgame.com/">小图标库</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">vue-element-admin文档</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>practical-experience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake学习笔记</title>
    <link href="/2022/09/23/cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/23/cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在项目目录下写好cmake文件，然后</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>cmake ..(若有VS则用指令cmake -G “MinGW Makefiles” ..仅第一次需要使用该指令)<br>cmake ..<br>mingw32.make.exe<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算理解</title>
    <link href="/2022/09/23/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2022/09/23/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>在涉及数字的算法中，如果要追求最优解，往往会使用位运算，而位运算在高中以前接触不多，印象不够深刻，所以特此系统的学习位运算，并运用在一些很作者认为很奇妙的算法中。</p><h1 id="位运算基础"><a href="#位运算基础" class="headerlink" title="位运算基础"></a>位运算基础</h1><table><thead><tr><th></th><th>&amp;</th><th>^</th><th>$\vert$</th><th>~</th><th>&gt;&gt;</th><th>&lt;&lt;</th></tr></thead><tbody><tr><td>名称</td><td>与</td><td>异或</td><td>或</td><td>非</td><td>右移</td><td>左移</td></tr><tr><td>0 1</td><td>0</td><td>1</td><td>1</td><td></td><td></td><td></td></tr><tr><td>1 0</td><td>0</td><td>1</td><td>1</td><td></td><td></td><td></td></tr><tr><td>1 1</td><td>1</td><td>0</td><td>1</td><td></td><td></td><td></td></tr><tr><td>0 0</td><td>0</td><td>0</td><td>0</td><td></td><td></td><td></td></tr></tbody></table><p>所有的位运算都先将数字转化为二进制（从左到右对应高位到低位），再进行对应的操作</p><h1 id="位运算性质"><a href="#位运算性质" class="headerlink" title="位运算性质"></a>位运算性质</h1><p>（也不能说是所有的性质，只是算法中会用的一些方法）</p><ol><li>a^a&#x3D;0</li><li>a^0&#x3D;a</li><li>a&gt;&gt;1相当于a&#x2F;2，a&lt;&lt;1相当于a*2</li><li>a&amp;(a-1)是移除最末尾的1（与最低位的1不同）</li><li>偶数&amp;1&#x3D;&#x3D;0，奇数&amp;1&#x3D;&#x3D;1(奇偶判断的新方式)</li></ol><h1 id="算法应用"><a href="#算法应用" class="headerlink" title="算法应用"></a>算法应用</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p>有点加法器运算的感觉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">sum</span> (a^b, (a&amp;b) &lt;&lt; <span class="hljs-number">1</span>) : a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="找单出来的数字"><a href="#找单出来的数字" class="headerlink" title="找单出来的数字"></a>找单出来的数字</h2><p>要求：在一个int数组中，除了一个数字只出现一次，其余数字均出现两次，找出出现一次的数字（原题目忘记了，但意思是这样）</p><p>分析：利用异或的性质a^a&#x3D;0，使用位运算对数组内所有数字取异或和，所有出现两次的数字异或和将为0，最终只留下出现一次的数字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();i++)&#123;   <br>        tmp = tmp ^ nums[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="找缺掉的两个数字"><a href="#找缺掉的两个数字" class="headerlink" title="找缺掉的两个数字"></a>找缺掉的两个数字</h2><p>要求：给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。在 O(N) 时间内只用 O(1) 的空间找到它们，以任意顺序返回这两个数字均可</p><p>分析：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git学习笔记</title>
    <link href="/2022/08/23/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/23/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将文件add到（本地）仓库，可一次add多个</span><br>git add readme.txt<br><br><span class="hljs-comment"># 提交全部修改</span><br>git add --all<br><br><span class="hljs-comment"># commit到（本地）仓库，双引号内为注释</span><br>git commit -m <span class="hljs-string">&quot;wrote a readme file&quot;</span><br><br><span class="hljs-comment"># 将当前分支上传到远程仓库</span><br>git push<br><br><span class="hljs-comment"># 查看远程仓库的信息，包括命名</span><br>git remote -v<br><br><span class="hljs-comment"># 本地仓库和远程仓库解绑,origin是对远程仓库的命名，查看远程仓库信息以获取</span><br>git remote <span class="hljs-built_in">rm</span> origin<br><br><span class="hljs-comment"># 关联一个远程仓库，origin是对远程仓库的命名，可修改</span><br>git remote add origin git@server-name:path/repo-name.git<br><br><span class="hljs-comment"># 查看当前分支</span><br>git branch<br><br><span class="hljs-comment"># 创建分支dev，并切换到dev分支</span><br>git checkout -b dev<br><span class="hljs-comment"># 相当于一下两条指令</span><br>git branch dev <span class="hljs-comment"># 创建分支</span><br>git checkout dev <span class="hljs-comment"># 切换分支</span><br><br><span class="hljs-comment"># 设置用户名和邮箱(--global 为全局参数，表明本地所有Git仓库都会使用这个配置)</span><br>git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br><br><span class="hljs-comment"># 查看工作区状态</span><br>git status<br></code></pre></td></tr></table></figure><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="为常用指令配置别名"><a href="#为常用指令配置别名" class="headerlink" title="为常用指令配置别名"></a>为常用指令配置别名</h2><p>在用户目录下创建.bashrc文件，在其中输入想要执行的指令（比较难输入的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出git提交日志</span><br><span class="hljs-built_in">alias</span> git-log=<span class="hljs-string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="hljs-comment"># 输出当前目录所有文件信息</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -al&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h2><p>创建<code>.gitignore</code>文件，在其中输入不需要管理的文件名*.a</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> .gitignore<br>vim .gitignore<br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>查看当前分支<code>git branch</code></p><h3 id="切换与创建分支"><a href="#切换与创建分支" class="headerlink" title="切换与创建分支"></a>切换与创建分支</h3><p>创建分支dev，并切换到dev分支<code>git checkout -b &lt;dev&gt;</code>，相当于以下两条指令</p><ul><li><code>git branch dev</code> # 创建分支</li><li><code>git checkout dev</code> # 切换分支<br>对于切换<code>checkout</code>可以用<code>switch</code>代替<br>创建并切换分支<code>git switch -c &lt;dev&gt;</code></li></ul><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>不能删除当前所在的分支<br>删除dev01分支<code>git branch -d &lt;dev01&gt;</code><br>强制删除dev01分支<code>git branch -D &lt;dev01&gt;</code></p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>将<code>&lt;dev01&gt;</code>分支合并到当前所在的分支上<code>git merge &lt;dev01&gt; </code></p><p>合并冲突之后，将保留冲突部分，手动消除冲突后，再add，commit</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>查看历史提交信息<br><code>git log [options]</code><br>  options可以重复添加:</p><ul><li>–all 显示所有分支</li><li>–pretty&#x3D;online 将提交信息显示为一行</li><li>–abbrev-commit 使得输出的commitid变简短</li><li>–graph 以图的形式显示</li></ul><p>查看之前的所有操作记录<br><code>git reflog</code></p><p>选中即复制，点击鼠标滚轮粘贴</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p><code>git reset --hard &lt;commitid&gt;</code><br><code>&lt;commitid&gt;</code>根据<code>git log</code>查看</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>添加远程仓库<code>git remote add &lt;origin&gt; &lt;仓库地址&gt;</code><br>查看关联的仓库<code>git remote -v</code></p><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p><code>git push [-f] [--set-upstream] [远程仓库名称] [本地分支名][:远端分支名]</code></p><ul><li>远程仓库和本地仓库分支名称相同<code>git push &lt;origin&gt; &lt;master&gt;</code></li><li>–set-upstream 推送到远程的同时并建立起和远端分支的关联</li><li>-f表示强制覆盖<br>当前分支和远程分支已建立联系可以直接<code>git push</code>，第一次push时需要添加<code>--set-upstream</code>参数或者直接使用<code>-u</code></li></ul><h3 id="抓取与拉取"><a href="#抓取与拉取" class="headerlink" title="抓取与拉取"></a>抓取与拉取</h3><p>抓取指令<code>git fetch [remote name] [branch name]</code></p><ul><li>将远程仓库里的更新都抓取到本地，不会进行合并</li><li>不指定远程仓库名和分支名则抓取所有分支</li></ul><p>拉取指令<code>git pull [remote name] [branch name]</code></p><ul><li>将远程仓库的修改拉到本地自动合并，等于fetch+merge</li><li>若不指定remote name 和 branch name 抓取所有并更新当前分支</li></ul><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><h2 id="个人开发"><a href="#个人开发" class="headerlink" title="个人开发"></a>个人开发</h2><p>&amp;emsp;&amp;emsp; 配合远程仓库使用，一般从远程仓库拉取下代码<code>git clone xxx</code>，在本地新建一个分支<code>git checkout -b &lt;new_branch&gt;</code>进行开发测试，开发完成后切换回到主分支，与测试新开的分支合并<code>git merge &lt;new_branch&gt;</code>，最后<code>push</code>到远程仓库即可</p><h2 id="团队开发"><a href="#团队开发" class="headerlink" title="团队开发"></a>团队开发</h2><p>&amp;emsp;&amp;emsp;与个人开发流程比较类似，但在本地修改完成，上传远程仓库时（此时已处于主分支上）可能会出现冲突（原因：他人先一步提交）导致上传失败，此时需要先<code>git pull</code>拉取远程主分支的内容，在本地修改冲突内容（会有提示），修改完成再依次<code>add commit push</code>即可</p>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+githubPage创建博客</title>
    <link href="/2022/08/23/hexo+githubPage%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/08/23/hexo+githubPage%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>想要拥有和本网站类似的博客吗？本篇博客记录作者用hexo+githubPage+travis创建博客的全部过程，部分步骤官方教程比较详细，因此本博客将结合官方教程和个人经历进行说明，主要是讲讲几个踩过的坑，</p><div class="note note-warning">            <p><strong>环境：windows10</strong><br>适用于对github有了解的人（至少有github账号）</p>          </div> <h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里官网教程比较详细，按照<a href="https://hexo.io/zh-cn/docs/">官网教程</a>先安装<a href="https://nodejs.org/en/">Node.js</a>和<a href="https://git-scm.com/">Git</a>即可。</p><p><strong>注意</strong>：Node.js需要添加到系统环境变量中（安装时有Add to PATH 选项需要勾选上，如果未勾选可在编辑系统环境变量中手动添加，即在系统Path中添加bin文件夹目录，具体过程可自行百度，比较简单），如果添加成功在cmd中输入指令<code>node -v</code>可以显示node.js的版本信息（后面有用）</p><p>在cmd中使用以下指令安装hexo即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="建站（其实就是创建范例）"><a href="#建站（其实就是创建范例）" class="headerlink" title="建站（其实就是创建范例）"></a>建站（其实就是创建范例）</h2><p>建站的前几步和<a href="https://hexo.io/zh-cn/docs/">官网教程</a>一致，这里简写了（建议参考官网教程）</p><p>依次输入以下指令，创建本地项目，folder是文件夹名称可自定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建文件夹</span><br>$ hexo init &lt;folder&gt;<br><span class="hljs-comment"># 进入文件夹</span><br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></td></tr></table></figure><p>之后该文件夹下的目录结构为（每个文件夹作用可见<a href="https://hexo.io/zh-cn/docs/">hexo教程</a>）</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><p>到这里项目已经可以运行了（具体运行方法参见<a href="https://hexo.io/zh-cn/docs/">hexo教程</a>，但运行不是本博客的重点，后面将介绍如何添加主题(theme)，作者使用的主题是fluid，对应<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">fluid教程</a></p><p>在博客目录下执行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a>内容复制过去。</p><p>修改目录下的_config.yml文件，原文件若无theme则添加，若有theme只需要修改对应主题，language同</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>至于更详细的favicon、背景图等修改参见<a href="https://hexo.fluid-dev.com/docs/guide/">fluid配置指南</a></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>部署主要参考<a href="https://hexo.io/zh-cn/docs/github-pages">hexo教程</a>，但教程非常粗略，导致作者踩了几个坑，这也是本博客的重点，前面的安装、建站都可以跟着教程走。</p><ol><li>在github中新建一个命名为&lt;你的GitHub用户名&gt;.github.io的repository</li><li>利用git将博客目录全部推送到这个仓库，参考指令（具体过程有点记不清了，若有问题可联系我）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关联一个远程仓库，origin是对远程仓库的命名，可修改，git@后的内容在github里也会有提示，需要自定义</span><br>git remote add origin git@user-name:path/repo-name.git<br><br><span class="hljs-comment"># 如果本地仓库还没有分支，可以先创建分支，以下指令即创建dev分支并转入到dev分支</span><br>git checkout -b dev<br><br><span class="hljs-comment"># 在本地仓库完成commit</span><br>git add --all<br>git commit -m <span class="hljs-string">&quot;Description of this submission&quot;</span><br><br><span class="hljs-comment"># 上传给远程仓库（在git中使用这个指令应该会有一段报错，因为远程仓库还没有分支，可按照给出的提示完成push）</span><br>git push <br></code></pre></td></tr></table></figure></li><li>创建免费的<a href="https://github.com/marketplace/travis-ci">Travis CI</a>账户，用于在github上运行项目。只需要使用0元的plan即可满足本项目需求，需要完成创建账户，可直接使用github创建账号</li><li>在GitHub的Applications settings(点击右上角菜单-&gt;下拉框中选择setting-&gt;找到Applications-&gt;点击Travis Cl的Configure)，配置 Travis CI 权限，使其能够访问你的 repository<br><img src="/img/github-travis.png" alt="Github图示"></li><li>上一步点击save后会自动跳转到Travis中，若没有则<a href="https://travis-ci.com/">手动前往</a></li><li>点击对应项目，如图所示（图示是已经正常运行，读者应该项目是灰色），选择More option-&gt;在下拉框中选择Setting（或者也有其他方法进入setting）-&gt;找到Environment Variables一栏，准备添加Environment Variable<br><img src="/img/github-travis2.png"></li><li>在github的<a href="https://github.com/settings/tokens">新建 Personal Access Token</a>中，点击Generate new token，只勾选repo的权限并生成一个新的Token，Token内容复制好（网页关闭无法再查看，只能重新创建）</li><li>在Travis CI中，新建一个环境变量，Name为GH_TOKEN（关系后面的配置文件），Value为刚才在GitHub生成的Token。确保 DISPLAY VALUE IN BUILD LOG 保持不被勾选避免你的Token泄漏，点击Add保存。</li><li>在Hexo站点文件夹（即博客目录下）中新建一个.travis.yml文件，<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sudo:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">node_js</span><br><span class="hljs-attr">node_js:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 需要自定义</span><br><span class="hljs-attr">cache:</span> <span class="hljs-string">npm</span><br><span class="hljs-attr">branches:</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 需要自定义</span><br><span class="hljs-attr">script:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span> <span class="hljs-comment"># generate static files</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">provider:</span> <span class="hljs-string">pages</span><br>  <span class="hljs-attr">skip-cleanup:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">github-token:</span> <span class="hljs-string">$GH_TOKEN</span> <span class="hljs-comment"># 需要自定义</span><br>  <span class="hljs-attr">keep-history:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">on:</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 需要自定义</span><br>  <span class="hljs-attr">local-dir:</span> <span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><strong>注意</strong>：部分内容需要自行修改node_js为本地所使用的node版本，可在cmd中用<code>node -v</code>查看，github-token与上一步的Name一致，branch和branches需要与github中的分支一致<br>修改完成后将该文件推送到远程仓库</li><li>在Travis Cl中选择该项目，与第六步类似，选择More option-&gt;在下拉框中选择Trigger build运行项目（如果该按钮为灰色，说明账户plan没有设置好，需要根据提示将账户配置好后再build，作者当时账号中不仅填写了个人信息还绑定了农行卡，才得以运行），如果运行成功与第六步中图示类似，如果错误可看运行log修改.travis.yml（如果是网站出现红色弹窗则是网站的一些配置没有做好，根据提示自行搜索解决方案）</li><li>Travis Cl正常运行后进入Github中的对应项目（可以发现会多一个gh-pages分支），点击Setting-&gt;Pages-&gt;Branch设置页面的分支为gh-pages，等待一段时间（github说是最长等待20分钟），可以看到Pages中出现<code>Your site is live at https://danmoliuhen.github.io/</code>即可去访问网站<br><img src="/img/github-pages.png"></li></ol><h2 id="作者猜想"><a href="#作者猜想" class="headerlink" title="作者猜想"></a>作者猜想</h2><p>Travis Cl在线运行后的gh-pages分支是一堆html,css,js等文件，与本地执行<code>hexo generate</code>后生成的public文件夹内容似乎一致，是否可以直接在本地博客目录下执行<code>hexo generate</code>后将public内容提交给githubPage，即可跳过Travis Cl（并且Travis Cl中也是执行了<code>hexo generate</code>指令）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/">hexo官网教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/start/#%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC">fluid主题</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://pages.github.com/">githubpage教程</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>practical-experience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell学习笔记</title>
    <link href="/2022/08/23/shell_notes/"/>
    <url>/2022/08/23/shell_notes/</url>
    
    <content type="html"><![CDATA[<h2 id="shell注意事项"><a href="#shell注意事项" class="headerlink" title="shell注意事项"></a>shell注意事项</h2><ul><li><p>重定向<br>  标准输入文件，stdin文件描述符0<br>  标准输出文件，stdout文件描述符1<br>  标准错误文件，stderr文件描述符2<br>  重定向到&#x2F;dev&#x2F;null文件&#x3D;禁止输出（任何内容均丢弃）</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将hello.txt文件中的内容传给<span class="hljs-built_in">cat</span> ,然后再传给hello2.txt（覆盖原内容）</span><br>cat &lt; hello.txt &gt; hello2.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将hello.txt文件中的内容传给<span class="hljs-built_in">cat</span> ,再追加给hello2.txt（不覆盖原内容）</span><br>cat &lt; hello.txt &gt;&gt; hello2.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将错误信息重定向到文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> 2&gt;file</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将错误信息和标准输出信息重定向到文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> &gt; file 2&gt;&amp;1</span><br></code></pre></td></tr></table></figure></li><li><p><code>let</code>指令无法使用，将开头的<code>#!/bin/sh</code>换为<code>#!/bin/bash</code><br>语法</p></li><li><p>变量名和等号之间不能有空格</p></li><li><p>0代表true，1代表false</p></li></ul><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>以下两种启动子shell执行脚本，执行完成后回到父shell，子shell可以使用父shell的变量<br>绝对&#x2F;相对路径（需要x权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./hello.sh<br>绝对路径/hello.sh<br></code></pre></td></tr></table></figure><p>使用bash执行（不需要x权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh hello.sh<br></code></pre></td></tr></table></figure><p>使用source执行，不启动子shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">. hello.sh<br>source hello.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">source</span>是shell中内嵌的，<span class="hljs-built_in">source</span>中不会启动子shell</span><br></code></pre></td></tr></table></figure><p><img src="/img/note-picture/4.png"></p><h2 id="权限说明"><a href="#权限说明" class="headerlink" title="权限说明"></a>权限说明</h2><p><img src="/img/note-picture/3.png"></p><table><thead><tr><th>符号</th><th>d</th><th>-</th><th>l</th><th>r</th><th>w</th><th>x</th></tr></thead><tbody><tr><td>含义</td><td>文件夹</td><td>文件</td><td>链接</td><td>可读</td><td>可写</td><td>可执行</td></tr></tbody></table><ul><li>第一个字符是类型，后每三个为一组，分别表示文件的<strong>拥有者</strong>，文件的<strong>所属组</strong>，文件的<strong>其他用户</strong>所拥有的权限</li><li>第一个yede表示拥有者，第二个为这个拥有者所在组</li></ul><p>赋于执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x ./filename # 使脚本具有执行权限<br>./filename # 执行脚步<br></code></pre></td></tr></table></figure><h2 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h2><ul><li><code>export variable_name</code>将局部变量提升为全局变量（不需要$），子bash中的修改只对子bash有效</li><li><code>set</code>包含所有系统和用户定义的全局变量、局部变量；<br>  <code>env</code>中是系统中的全局变量；<br>  局部变量在子shell中无效</li><li><code>readonly variable_name</code>设置变量只读  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">myUrl=&quot;https://www.google.com&quot;<br>readonly myUrl<br></code></pre></td></tr></table></figure></li><li><code>unset variable_name</code>删除变量，测试之后需要及时删除以免占用内存,<code>readonly</code>无法<code>unset</code>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unset variable_name<br></code></pre></td></tr></table></figure></li><li>特殊变量<table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>$#</td><td>参数个数</td></tr><tr><td>$*</td><td>所有参数，以”$1 $2 … $n”的形式输出所有参数</td></tr><tr><td>$@</td><td>所有参数，以”$1”,”$2” … “$n” 的形式输出所有参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$?</td><td>最后命令的退出状态。0没有错误，其他值有错</td></tr></tbody></table></li><li>字符串<br>  单引号内任何字符都会原样输出，转义符无效；双引号里可以有变量，有转义字符;也可以不要引号</li><li>数组<br>  定义方式array_name&#x3D;(value0 value1 value2 value3)，用空格分开  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">读取某一元素的值</span><br>valuen=$&#123;array_name[n]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash"> @可以获取数组中的所有元素</span><br>echo $&#123;array_name[@]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span><br>length=$&#123;#array_name[@]&#125;<br>length=$&#123;#array_name[*]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span><br>lengthn=$&#123;#array_name[n]&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>使用<code>expr</code>完成计算</li><li>使用<code>$[]</code>或者<code>$(())</code></li><li>关系运算符,使用如右<code>[ $a -eq $b ]</code><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>equal 相等</td></tr><tr><td>-ne</td><td>not equal 不相等</td></tr><tr><td>-lt</td><td>less than 小于</td></tr><tr><td>-le</td><td>less equal 小于等于</td></tr><tr><td>-gt</td><td>greater than 大于</td></tr><tr><td>-ge</td><td>greater equal 大于等于</td></tr><tr><td>!</td><td>非</td></tr><tr><td>-r</td><td>or 或</td></tr><tr><td>-a</td><td>and 与</td></tr></tbody></table></li><li>逻辑运算符&amp;&amp; ,||可借此形成三元表达式</li><li>字符串运算符，文件测试运算符，不常用,见<a href="https://www.runoob.com/linux/linux-shell-basic-operators.html">链接</a></li></ul><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">expression</span><br>a=`expr 1 + 2`<br>echo $a<br><br>expr 4 \* 2 # 乘法运算<br>echo $[ 1+2 ]<br>echo $((3*5))<br><br>echo $[ 3 == 3 ]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在比较运算中使用[]不能用&lt;&gt;，但(())中可以使用&lt;&gt;（测试中好像都行）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行加一操作的两种方法</span><br>let a++<br>let a+=1<br>a=$[$a+1]<br><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>在<code>expr</code>表达式和运算符之间要有空格</li><li>条件表达式注意空格<code>[ 2 == 3 ]</code>（测试中主要是[]两侧的空格）</li><li>表达式中的&#x3D;可用于检测字符串是否相等，&#x3D;&#x3D;检测</li></ul><h2 id="if-for-while-case-until语句"><a href="#if-for-while-case-until语句" class="headerlink" title="if,for,while,case,until语句"></a>if,for,while,case,until语句</h2><p><strong>if</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">if-slse</span><br>if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN<br>else<br>    command<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">if-elif-else</span><br>if condition1<br>then<br>    command1<br>elif condition2 <br>then <br>    command2<br>else<br>    commandN<br>fi<br></code></pre></td></tr></table></figure><p><strong>for</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br><br>for ((初始值;循环控制条件;变量变化))<br>do<br>    command<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">实例</span><br>for loop in 1 2 3 4 5<br>do<br>    echo &quot;The value is: $loop&quot;<br>done<br></code></pre></td></tr></table></figure><p><strong>while</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p><strong>多选择语句</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">;;相当于<span class="hljs-built_in">break</span></span><br>case 值 in<br>模式1)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>模式2)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><h2 id="读取输入read"><a href="#读取输入read" class="headerlink" title="读取输入read"></a>读取输入read</h2><p>-t 指定等待时间，不加则一直等待<br>-p 指定提示语</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">实例，name表示输入数据名称</span><br>read -t 10 -p &quot;please input your name: &quot; name<br>echo $name<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>系统函数<br>basename获取当前文件名<br>dirname获取路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">函数的格式，[]内的是可省略部分</span><br>[ function ] funname [()]<br>&#123;<br><br>    action;<br><br>    [return int;]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>return后的数值n(0-255)</p><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><p><strong>字符串截取</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">从start开始，截取长度为length的字符串<br>格式：$&#123;str:start:length&#125;  <br>echo $&#123;str:5:8&#125;<br></code></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li><p>wc 统计文件信息</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>统计行数</td></tr><tr><td>-m</td><td>统计字符数</td></tr><tr><td>-w</td><td>统计字数</td></tr><tr><td>-c</td><td>统计字节数</td></tr></tbody></table>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">统计3个文件的信息，输出分别表示行数、单词数、字节数</span><br>wc filename1 filename2 filename3<br>3 94 234 filename1<br>...<br></code></pre></td></tr></table></figure></li><li><p>uptime 获取服务器信息</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">uptime<br>08:21:34 up 36 min,  2 users,  load average: 0.00, 0.00, 0.00<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前服务器时间：    08:21:34</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前服务器运行时长  36 min</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前用户数          2 <span class="hljs-built_in">users</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前的负载均衡      load average  0.00, 0.00, 0.00，分别取1min,5min,15min的均值</span><br></code></pre></td></tr></table></figure></li><li><p>date 有关日期的指令</p></li><li><p>head </p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看第一行内容</span><br>head -1 filename<br></code></pre></td></tr></table></figure></li><li><p>tail<br>  与head类似</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看最后一行内容</span><br>tail -1 filename<br></code></pre></td></tr></table></figure></li><li><p>ssh 远程连接</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">连接远程服务器并执行以下指令</span><br>ssh user@公网ip &quot;cd /home ; ./a.sh&quot;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用指令汇总</title>
    <link href="/2022/08/23/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/08/23/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将文件add到（本地）仓库，可一次add多个</span><br>git add readme.txt<br><br><span class="hljs-comment"># 提交全部修改</span><br>git add --all<br><br><span class="hljs-comment"># commit到（本地）仓库，双引号内为注释</span><br>git commit -m <span class="hljs-string">&quot;wrote a readme file&quot;</span><br><br><span class="hljs-comment"># 将当前分支上传到远程仓库</span><br>git push<br><br><span class="hljs-comment"># 查看远程仓库的信息，包括命名</span><br>git remote -v<br><br><span class="hljs-comment"># 本地仓库和远程仓库解绑,origin是对远程仓库的命名，查看远程仓库信息以获取</span><br>git remote <span class="hljs-built_in">rm</span> origin<br><br><span class="hljs-comment"># 关联一个远程仓库，origin是对远程仓库的命名，可修改</span><br>git remote add origin git@server-name:path/repo-name.git<br><br><span class="hljs-comment"># 查看当前分支</span><br>git branch<br><br><span class="hljs-comment"># 创建分支dev，并切换到dev分支</span><br>git checkout -b dev<br><span class="hljs-comment"># 相当于一下两条指令</span><br>git branch dev <span class="hljs-comment"># 创建分支</span><br>git checkout dev <span class="hljs-comment"># 切换分支</span><br><br><span class="hljs-comment"># 设置用户名和邮箱(--global 为全局参数，表明本地所有Git仓库都会使用这个配置)</span><br>git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br><br><span class="hljs-comment"># 查看历史提交信息</span><br>git <span class="hljs-built_in">log</span> <br>git reflog<br></code></pre></td></tr></table></figure><h1 id="服务器常用指令"><a href="#服务器常用指令" class="headerlink" title="服务器常用指令"></a>服务器常用指令</h1><ol><li>ssh<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 连接服务器，并执行指令</span><br>ssh user@公网ip <span class="hljs-string">&quot;cd /home ; ./a.sh&quot;</span><br><br><span class="hljs-comment"># 连接某端口的服务器</span><br>ssh -p &lt;port&gt; &lt;remote_username&gt;@&lt;remote_ip&gt;<br></code></pre></td></tr></table></figure></li><li>scp<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 向服务器传输文件夹</span><br>scp -r &lt;local_folder&gt; &lt;remote_username&gt;@&lt;remote_ip&gt;:&lt;remote_folder&gt;<br><br><span class="hljs-comment"># 向服务器传输文件</span><br>scp &lt;local_file&gt; &lt;remote_username&gt;@&lt;remote_ip&gt;:&lt;remote_file&gt;<br><br><span class="hljs-comment"># 从服务器传到本地</span><br>scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3 <br>scp -r www.runoob.com:/home/root/others/ /home/space/music/<br><br><span class="hljs-comment"># 通过指定端口号传输</span><br>scp -P 4588 remote@www.runoob.com:/usr/local/sin.sh /home/administrator<br></code></pre></td></tr></table></figure></li></ol><h1 id="linux常用指令"><a href="#linux常用指令" class="headerlink" title="linux常用指令"></a>linux常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前所有进程</span><br>ps -f<br><br><span class="hljs-comment"># 查看文件夹下所有文件的数量（不含隐藏文件</span><br>ll | <span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 删除文件夹及内部的所有文件，不提醒</span><br><span class="hljs-built_in">rm</span> -rf /var/log/httpd/access<br>-r 向下递归<br>-f 强制删除不提醒<br><br></code></pre></td></tr></table></figure><ol><li>打压缩包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将/home/这个目录下所有文件和文件夹打包为当前目录下的files.zip</span><br>zip –q –r files.zip /home<br><br><span class="hljs-comment"># 强制删除文件夹及其内容，不提示</span><br><span class="hljs-built_in">rm</span> -rf &lt;<span class="hljs-built_in">dir</span>&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
