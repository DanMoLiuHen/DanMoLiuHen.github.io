<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>neon优化</title>
    <link href="/2023/05/20/neon%E4%BC%98%E5%8C%96/"/>
    <url>/2023/05/20/neon%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>交叉编译，arm平台环境如下所示</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Architecture</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                   aarch64</span><br><span class="hljs-attribute">CPU op-mode(s)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                 32-bit, 64-bit</span><br><span class="hljs-attribute">Byte Order</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                     Little Endian</span><br><span class="hljs-attribute">CPU(s)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                         2</span><br><span class="hljs-attribute">On-line CPU(s) list</span><span class="hljs-punctuation">:</span> <span class="hljs-string">            0,1</span><br><span class="hljs-attribute">Thread(s) per core</span><span class="hljs-punctuation">:</span> <span class="hljs-string">             1</span><br><span class="hljs-attribute">Core(s) per socket</span><span class="hljs-punctuation">:</span> <span class="hljs-string">             2</span><br><span class="hljs-attribute">Socket(s)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                      1</span><br><span class="hljs-attribute">Vendor ID</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                      ARM</span><br><span class="hljs-attribute">Model</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                          0</span><br><span class="hljs-attribute">Model name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                     Cortex-A72</span><br><span class="hljs-attribute">Stepping</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                       r1p0</span><br><span class="hljs-attribute">BogoMIPS</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                       400.00</span><br><span class="hljs-attribute">L1d cache</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                      64 KiB</span><br><span class="hljs-attribute">L1i cache</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                      96 KiB</span><br><span class="hljs-attribute">L2 cache</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                       1 MiB</span><br><span class="hljs-attribute">Vulnerability Itlb multihit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">    Not affected</span><br><span class="hljs-attribute">Vulnerability L1tf</span><span class="hljs-punctuation">:</span> <span class="hljs-string">             Not affected</span><br><span class="hljs-attribute">Vulnerability Mds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">              Not affected</span><br><span class="hljs-attribute">Vulnerability Meltdown</span><span class="hljs-punctuation">:</span> <span class="hljs-string">         Not affected</span><br><span class="hljs-attribute">Vulnerability Spec store bypass</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Vulnerable</span><br><span class="hljs-attribute">Vulnerability Spectre v1</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       Mitigation; __user pointer sanitization</span><br><span class="hljs-attribute">Vulnerability Spectre v2</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       Not affected</span><br><span class="hljs-attribute">Vulnerability Srbds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">            Not affected</span><br><span class="hljs-attribute">Vulnerability Tsx async abort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">  Not affected</span><br><span class="hljs-attribute">Flags</span><span class="hljs-punctuation">:</span> <span class="hljs-string">                          fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br></code></pre></td></tr></table></figure>          </div> <h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>neon是arm提供的一套SIMD，可以借此在arm平台上实现并行运算，达到提速目的，在C++中<code>#include&lt;arm_neon.h&gt;</code>即可使用封装好的<code>Intrinsics</code>，<a href="https://developer.arm.com/architectures/instruction-sets/intrinsics/#f:@navigationhierarchiessimdisa=[Neon]&first=160">intrinsics参考网站</a>，使用<code>Intrinsics</code>只是提速的方法之一，还可以通过汇编等操作寄存器，实现更高效使用。</p><h2 id="neon优化基础"><a href="#neon优化基础" class="headerlink" title="neon优化基础"></a>neon优化基础</h2><p>neon寄存器是128位，共有32个寄存器，</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>neon中类型格式如下所示，表示向量</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;type&gt;&lt;size&gt;x&lt;number_of_lanes&gt;x&lt;length_of_array&gt;<span class="hljs-type">_t</span> <br><br><span class="hljs-type">float16x4_t</span><span class="hljs-type">float16x8_t</span><br><span class="hljs-type">float32x2_t</span><span class="hljs-type">float32x4_t</span><br><span class="hljs-type">poly8x8_t</span><span class="hljs-type">poly8x16_t</span><br></code></pre></td></tr></table></figure><h2 id="neon优化实例"><a href="#neon优化实例" class="headerlink" title="neon优化实例"></a>neon优化实例</h2><ol><li><p>2x3矩阵转置，涉及的核心函数为<code>vtrn1q_f64(A0,A1)</code>，作用是将A0,A1向量中的奇数位取出(<code>vtrn2q_f64(A0,A1)</code>取出偶数位)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// neon优化的2x3矩阵转置，A是待转置矩阵(按行主序展开)，B是转置结果(行主序)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">neon_2x3_matrix_transpose</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float64_t</span>* A,<span class="hljs-type">float64_t</span>* B)</span></span>&#123;<br>  <span class="hljs-type">float64x2_t</span> A0=<span class="hljs-built_in">vld1q_f64</span>(A);<br>  <span class="hljs-type">float64x2_t</span> A1=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">3</span>);<br>  <span class="hljs-type">float64x2_t</span> A2=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">2</span>);<br>  <span class="hljs-type">float64x2_t</span> A3=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">5</span>);<br><br>  <span class="hljs-type">float64x2_t</span> C0,C1,C2;<br>  C0=<span class="hljs-built_in">vtrn1q_f64</span>(A0,A1);<br>  C1=<span class="hljs-built_in">vtrn2q_f64</span>(A0,A1);<br>  C2=<span class="hljs-built_in">vtrn1q_f64</span>(A2,A3);<br><br>  <span class="hljs-built_in">vst1q_f64</span>(B, C0);<br>  <span class="hljs-built_in">vst1q_f64</span>(B+<span class="hljs-number">2</span>, C1);<br>  <span class="hljs-built_in">vst1q_f64</span>(B+<span class="hljs-number">4</span>, C2);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>矩阵乘法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 4x4矩阵乘以4x1列向量，矩阵按列主序展开为数组表示</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">neon_4x4_matrix_4x1_vector_multiply</span><span class="hljs-params">(<span class="hljs-type">float64_t</span>* A, <span class="hljs-type">float64_t</span>* B, <span class="hljs-type">float64_t</span>* C)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float64x2_t</span> A0=<span class="hljs-built_in">vld1q_f64</span>(A);<br>    <span class="hljs-type">float64x2_t</span> A1=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">2</span>);<br>    <span class="hljs-type">float64x2_t</span> A2=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">4</span>);<br>    <span class="hljs-type">float64x2_t</span> A3=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">6</span>);<br>    <span class="hljs-type">float64x2_t</span> A4=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">8</span>);<br>    <span class="hljs-type">float64x2_t</span> A5=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">10</span>);<br>    <span class="hljs-type">float64x2_t</span> A6=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">12</span>);<br>    <span class="hljs-type">float64x2_t</span> A7=<span class="hljs-built_in">vld1q_f64</span>(A+<span class="hljs-number">14</span>);<br><br>    <span class="hljs-type">float64x2_t</span> B0=<span class="hljs-built_in">vld1q_f64</span>(B);<br>    <span class="hljs-type">float64x2_t</span> B1=<span class="hljs-built_in">vld1q_f64</span>(B+<span class="hljs-number">2</span>);<br>    <br>    <span class="hljs-type">float64x2_t</span> C0,C1;<br>    <span class="hljs-comment">// set C0 = &#123;0,0&#125;</span><br>    C0 = <span class="hljs-built_in">vmovq_n_f64</span>(<span class="hljs-number">0</span>);<br>    C1 = <span class="hljs-built_in">vmovq_n_f64</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// return C0+A0*B0[0]</span><br>    C0 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C0, A0, B0, <span class="hljs-number">0</span>);<br>    C0 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C0, A2, B0, <span class="hljs-number">1</span>);<br>    C0 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C0, A4, B1, <span class="hljs-number">0</span>);<br>    C0 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C0, A6, B1, <span class="hljs-number">1</span>);<br><br>    C1 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C1, A1, B0, <span class="hljs-number">0</span>);<br>    C1 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C1, A3, B0, <span class="hljs-number">1</span>);<br>    C1 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C1, A5, B1, <span class="hljs-number">0</span>);<br>    C1 = <span class="hljs-built_in">vfmaq_laneq_f64</span>(C1, A7, B1, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">vst1q_f64</span>(C, C0);<br>    <span class="hljs-built_in">vst1q_f64</span>(C+<span class="hljs-number">2</span>, C1);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="eigen使用"><a href="#eigen使用" class="headerlink" title="eigen使用"></a>eigen使用</h2><p>eigen支持的SIMD向量化引擎:</p><ul><li>SSE{2,3,4}</li><li>NEON(ARM)</li><li>Altivec(PowerPC)</li></ul><ol><li>对于 matrix-vector ，lazyProduct 性能比 .noalias() 更好<br><code>Aref.transpose().lazyProduct(bref);//Aref matrix, Bref vector</code></li></ol><h2 id="perf使用"><a href="#perf使用" class="headerlink" title="perf使用"></a>perf使用</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每隔一个固定的时间，在CPU上（每个核上都有）产生一个中断，在中断上看当前是哪个pid，哪个函数，然后给对应的pid和函数加一个统计值，由此可知CPU有百分几的时间在某个pid，或者某个函数上</p><h3 id="使用perf对程序概览"><a href="#使用perf对程序概览" class="headerlink" title="使用perf对程序概览"></a>使用perf对程序概览</h3><p>linux下可以使用perf分析程序性能，执行<code>perf stat ./your_program</code>(可能需要sudo权限)，输出程序的性能概览，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">       141.56 msec task-clock                <span class="hljs-comment">#    0.998 CPUs utilized          </span><br>            2      context-switches          <span class="hljs-comment">#   14.129 /sec                   </span><br>            0      cpu-migrations            <span class="hljs-comment">#    0.000 /sec                   </span><br>        1,537      page-faults               <span class="hljs-comment">#   10.858 K/sec                  </span><br>  488,545,772      cycles                    <span class="hljs-comment">#    3.451 GHz                    </span><br>1,238,032,409      instructions              <span class="hljs-comment">#    2.53  insn per cycle         </span><br>  179,236,314      branches                  <span class="hljs-comment">#    1.266 G/sec                  </span><br>      620,952      branch-misses             <span class="hljs-comment">#    0.35% of all branches        </span><br><br>  0.141870608 seconds time elapsed<br><br>  0.141916000 seconds user<br>  0.000000000 seconds sys<br></code></pre></td></tr></table></figure><p><code>sudo perf top -g</code>可以实时显示当前系统的性能信息</p><p><a href="http://ceres-solver.org/nnls_modeling.html">Modeling Non-linear Least Squares</a></p><p>上述指标的含义如下：</p><ul><li>task-clock：任务时钟，表示程序运行期间占用了xx的任务时钟周期，该值高，说明程序的多数时间花费在 CPU 计算上而非 IO</li><li>context-switches：上下文切换次数，表示程序执行过程中发生的上下文切换的总次数。上下文切换是指CPU从一个进程或线程切换到另一个进程或线程的操作。</li><li>cpu-migrations：CPU迁移次数，表示程序执行过程中发生的CPU迁移的总次数。用户程序原本在一个CPU上运行，后来迁移到另一个CPU</li><li>page-faults：页错误次数，表示程序执行期间发生的页错误（Page Fault）的总次数。页错误是指程序访问的页面不在主存中，需要从磁盘或其他存储介质加载到主存中的情况。</li><li>Cycles：CPU周期数，表示程序执行期间所消耗的CPU周期数。</li><li>Instructions：指令数，表示程序执行期间的指令数量。</li><li>Branches：分支数，表示程序执行期间发生的总分支数。</li><li>Branch misses：分支未命中次数，表示程序执行期间发生的分支未命中的总次数。</li></ul><h3 id="perf可以监视的事件"><a href="#perf可以监视的事件" class="headerlink" title="perf可以监视的事件"></a>perf可以监视的事件</h3><p>指令<code>sudo perf list</code>可以列出所有的事件，如下所示：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">List</span> of pre-defined events (to be used in -e):<br><br>  branch-instructions <span class="hljs-symbol">OR</span> branches                    [<span class="hljs-symbol">Hardware</span> event]<br>  branch-misses                                      [<span class="hljs-symbol">Hardware</span> event]<br>  bus-cycles                                         [<span class="hljs-symbol">Hardware</span> event]<br>  cache-misses                                       [<span class="hljs-symbol">Hardware</span> event]<br>  cache-references                                   [<span class="hljs-symbol">Hardware</span> event]<br>  cpu-cycles <span class="hljs-symbol">OR</span> cycles                               [<span class="hljs-symbol">Hardware</span> event]<br>  instructions                                       [<span class="hljs-symbol">Hardware</span> event]<br>  ref-cycles                                         [<span class="hljs-symbol">Hardware</span> event]<br><br>  alignment-faults                                   [<span class="hljs-symbol">Software</span> event]<br>  bpf-output                                         [<span class="hljs-symbol">Software</span> event]<br>  cgroup-switches                                    [<span class="hljs-symbol">Software</span> event]<br>  context-switches <span class="hljs-symbol">OR</span> cs                             [<span class="hljs-symbol">Software</span> event]<br>  cpu-clock                                          [<span class="hljs-symbol">Software</span> event]<br>  cpu-migrations <span class="hljs-symbol">OR</span> migrations                       [<span class="hljs-symbol">Software</span> event]<br>  dummy                                              [<span class="hljs-symbol">Software</span> event]<br>  emulation-faults                                   [<span class="hljs-symbol">Software</span> event]<br>  major-faults                                       [<span class="hljs-symbol">Software</span> event]<br>  minor-faults                                       [<span class="hljs-symbol">Software</span> event]<br>  page-faults <span class="hljs-symbol">OR</span> faults                              [<span class="hljs-symbol">Software</span> event]<br>  task-clock                                         [<span class="hljs-symbol">Software</span> event]<br>  ...<br></code></pre></td></tr></table></figure><h3 id="perf-record记录采集的数据"><a href="#perf-record记录采集的数据" class="headerlink" title="perf record记录采集的数据"></a><code>perf record</code>记录采集的数据</h3><p><code>sudo perf record -g ./ceres_lba_os</code>,记录采集的数据,<code>-g</code>表示记录程序的调用栈，如果调用栈过多可能显示会出问题，执行之后在目录下会生成一个<code>perf.data</code>文件(<code>perf.data.old</code>是上一次的执行结果)，该文件需要使用<code>report</code>指令打开，比较常用的参数还有<code>-e</code>表示记录的事件，如<code>sudo perf record -e cache-misses -g ./ceres_lba_os</code>，详细的参数可以使用<code>perf record --help</code>查看</p><p><code>-g</code>参数作用： 比如fun1()中调用fun11()和fun12()两个函数，没有<code>-g</code>统计时单独统计，可能会出现fun11()时间大于fun1()，加上<code>-g</code>表示启动堆栈跟踪，在击中fun11()函数时将向上追溯调用栈，即fun11()的耗时会算在fun1()内</p><p><code>sudo perf report -i perf.data</code>打开<code>perf.data</code>文件，有如下所示内容，<code>record</code>缺省事件为<code>cycles</code></p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs zephir">Samples: <span class="hljs-number">561</span>  of event <span class="hljs-string">&#x27;cycles&#x27;</span>, Event count (approx.): <span class="hljs-number">500263139</span><br>  Children      Self  Command       Shared Object            Symbol<br>+   <span class="hljs-number">23.17</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  [unknown]                [.] <span class="hljs-number">0x000055c220ce6e40</span><br>+   <span class="hljs-number">20.14</span>%     <span class="hljs-number">2.32</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] std::_Function_handler&lt;void (<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>), ceres::internal::ProgramEvaluator&lt;ceres::internal::BlockEvaluatePreparer, ceres<br>+   <span class="hljs-number">14.98</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::ParallelFor<br>+   <span class="hljs-number">14.62</span>%     <span class="hljs-number">7.31</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::ResidualBlock::Evaluate<br>+   <span class="hljs-number">13.19</span>%     <span class="hljs-number">0.71</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::SchurEliminator&lt;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>&gt;::Eliminate(ceres::internal::BlockSparseMatrixData <span class="hljs-keyword">const</span>&amp;, <span class="hljs-keyword">double</span> <span class="hljs-keyword">const</span>*, doub<br>     <span class="hljs-number">9.80</span>%     <span class="hljs-number">9.80</span>%  ceres_lba_os  libm<span class="hljs-number">-2.31</span>.so             [.] __sincos<br>+    <span class="hljs-number">9.63</span>%     <span class="hljs-number">2.67</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::SchurEliminator&lt;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>&gt;::ChunkDiagonalBlockAndGradient<br>+    <span class="hljs-number">7.67</span>%     <span class="hljs-number">7.49</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::SchurEliminator&lt;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>&gt;::ChunkOuterProduct<br>+    <span class="hljs-number">6.24</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  [unknown]                [.] <span class="hljs-number">0xb5e79a17e7482e00</span><br>+    <span class="hljs-number">6.06</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  [unknown]                [.] <span class="hljs-number">0x0000000000841f0f</span><br>+    <span class="hljs-number">6.06</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::Solver::~Solver<br>+    <span class="hljs-number">6.06</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::Solve<br>+    <span class="hljs-number">6.06</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::Solver::Solve<br>+    <span class="hljs-number">5.71</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::TrustRegionMinimizer::Minimize<br>+    <span class="hljs-number">5.71</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::TrustRegionMinimizer::EvaluateGradientAndJacobian<br>+    <span class="hljs-number">5.35</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::TrustRegionMinimizer::HandleSuccessfulStep<br>+    <span class="hljs-number">4.28</span>%     <span class="hljs-number">4.28</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::BlockSparseMatrix::SquaredColumnNorm<br>+    <span class="hljs-number">3.92</span>%     <span class="hljs-number">3.92</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::BlockSparseMatrix::ScaleColumns<br>+    <span class="hljs-number">3.92</span>%     <span class="hljs-number">3.92</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::BlockEvaluatePreparer::Prepare<br>+    <span class="hljs-number">3.92</span>%     <span class="hljs-number">1.43</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::SchurEliminator&lt;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>&gt;::EBlockRowOuterProduct<br>+    <span class="hljs-number">3.92</span>%     <span class="hljs-number">3.92</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::MatrixMatrixMultiplyNaive&lt;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&gt;<br>     <span class="hljs-number">3.74</span>%     <span class="hljs-number">3.74</span>%  ceres_lba_os  ceres_lba_os             [.] LocalBAProjectUV::Evaluate<br>+    <span class="hljs-number">3.74</span>%     <span class="hljs-number">3.74</span>%  ceres_lba_os  libpthread<span class="hljs-number">-2.31</span>.so       [.] __pthread_mutex_unlock<br>     <span class="hljs-number">3.74</span>%     <span class="hljs-number">3.57</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::SchurEliminator&lt;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>&gt;::BackSubstitute(ceres::internal::BlockSparseMatrixData <span class="hljs-keyword">const</span>&amp;, <span class="hljs-keyword">double</span> <span class="hljs-keyword">const</span>*,<br>+    <span class="hljs-number">3.39</span>%     <span class="hljs-number">0.00</span>%  ceres_lba_os  [unknown]                [.] <span class="hljs-number">0000000000000000</span><br>+    <span class="hljs-number">2.67</span>%     <span class="hljs-number">0.36</span>%  ceres_lba_os  libceres-debug.so<span class="hljs-number">.2</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>  [.] ceres::internal::BlockSparseMatrix::RightMultiply<br></code></pre></td></tr></table></figure><p><code>sudo perf diff</code>对比<code>perf.data</code>与<code>perf.data.old</code></p><h2 id="使用perf优化性能的实例"><a href="#使用perf优化性能的实例" class="headerlink" title="使用perf优化性能的实例"></a>使用perf优化性能的实例</h2><p>本示例用于优化cache-misses问题，发生于二重循环中</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void fun()&#123;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=0;j&lt;1e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=1e4;j&lt;2e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=2e4;j&lt;3e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=3e4;j&lt;4e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=4e4;j&lt;5e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=5e4;j&lt;6e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=6e4;j&lt;7e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=7e4;j&lt;8e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=8e4;j&lt;9e4;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=9e4;j&lt;1e5;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>&#125;<br><br>void fun2()&#123;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;1e4;i++)&#123;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=0;j&lt;1e5;j++)&#123;<br>            int <span class="hljs-attribute">a</span>=i+j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个函数都是做二重循环计算，执行的内容和复杂度一致，fun()将fun2()的二重循环拆开（二重循环的内部循环过大，导致计算到内部循环末尾，起始的值已拿出cache，内部循环进入下一次时，重新将起始值放入cache，cache频繁存取影响性能），使用perf查看cache-misses如下所示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Samples: <span class="hljs-number">86</span>  of event <span class="hljs-string">&#x27;cache-misses&#x27;</span>, Event count (approx.): <span class="hljs-number">140933</span><br>  Children      Self  Command  Shared Object        Symbol<br>+   <span class="hljs-number">24.87%</span>     <span class="hljs-number">1.25%</span>  two      two                  <span class="hljs-selector-attr">[.]</span> fun2<br>+   <span class="hljs-number">24.21%</span>     <span class="hljs-number">0.00%</span>  two      <span class="hljs-selector-attr">[kernel.kallsyms]</span>    <span class="hljs-selector-attr">[k]</span> tick_sched_handle<span class="hljs-selector-class">.isra</span>.<span class="hljs-number">0</span><br>+   <span class="hljs-number">23.79%</span>     <span class="hljs-number">0.42%</span>  two      <span class="hljs-selector-attr">[kernel.kallsyms]</span>    <span class="hljs-selector-attr">[k]</span> update_process_times<br>+   <span class="hljs-number">22.25%</span>     <span class="hljs-number">0.17%</span>  two      <span class="hljs-selector-attr">[kernel.kallsyms]</span>    <span class="hljs-selector-attr">[k]</span> scheduler_tick<br>+   <span class="hljs-number">21.63%</span>     <span class="hljs-number">0.00%</span>  two      <span class="hljs-selector-attr">[kernel.kallsyms]</span>    <span class="hljs-selector-attr">[k]</span> entry_SYSCALL_64_after_hwframe<br>+   <span class="hljs-number">21.63%</span>     <span class="hljs-number">0.00%</span>  two      <span class="hljs-selector-attr">[kernel.kallsyms]</span>    <span class="hljs-selector-attr">[k]</span> do_syscall_64<br>+   <span class="hljs-number">18.19%</span>     <span class="hljs-number">0.00%</span>  two      two                  <span class="hljs-selector-attr">[.]</span> fun<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://juconcurrent.com/books-jksj-11-20/">12-Linux性能优化实战</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>practical-experience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL泛型进阶</title>
    <link href="/2023/03/20/C++STL%E6%B3%9B%E5%9E%8B%E8%BF%9B%E9%98%B6/"/>
    <url>/2023/03/20/C++STL%E6%B3%9B%E5%9E%8B%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>在STL中常见对象函数，可变参数模板等语法，在GNU4.9中使用大量typedef，但目前using使用的更多。<br>本文是侯捷STL源码剖析的笔记，源码内容以GNU2.9和GNU4.9为主，有点过时，现在源码非常复杂，很难直接入手，但STL使用的思想基本没有变化，因此即使侯捷STL过时，但也能收获颇多，总体来说其中的模板递归，函数对象，traits等内容留下的影响最深，STL实现非常奇妙</p>          </div> <h2 id="C-STL六大部件概览"><a href="#C-STL六大部件概览" class="headerlink" title="C++STL六大部件概览"></a>C++STL六大部件概览</h2><ol><li>容器Containers</li><li>分配器Allocators</li><li>算法Algorithms，函数模板</li><li>迭代器Iterators</li><li>适配器Adapters</li><li>仿函数Functors</li></ol><p>迭代器可以看做是一种泛化的指针，<code>vector&lt;int,allocator&lt;int&gt;&gt;</code>分配器有缺省值，一般可以省略，以下是一段使用示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>, allocator&lt;<span class="hljs-type">int</span>&gt;&gt;a = &#123; <span class="hljs-number">25</span>,<span class="hljs-number">124</span>,<span class="hljs-number">566</span>,<span class="hljs-number">112</span>,<span class="hljs-number">34</span>,<span class="hljs-number">56</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">344</span>,<span class="hljs-number">32</span> &#125;;<br>cout &lt;&lt; <span class="hljs-built_in">count_if</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <br><span class="hljs-built_in">not1</span>(<span class="hljs-built_in">bind2nd</span>(<span class="hljs-built_in">less</span>&lt;<span class="hljs-type">int</span>&gt;(), <span class="hljs-number">40</span>)));<span class="hljs-comment">//判断&gt;=40的数据个数</span><br><span class="hljs-comment">//less是functor</span><br>&#125;<br></code></pre></td></tr></table></figure><p>begin()指向第一个元素，end()指向最后一个元素的下一个位置<br>C++11后有<code>range-based for statement</code>简化遍历，以及智能指针<code>auto</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// </span><br><span class="hljs-comment">// for(decl: coll)&#123;</span><br><span class="hljs-comment">//   statement</span><br><span class="hljs-comment">// &#125;</span><br><br>vector&lt;<span class="hljs-type">int</span>, allocator&lt;<span class="hljs-type">int</span>&gt;&gt;a = &#123; <span class="hljs-number">25</span>,<span class="hljs-number">124</span>,<span class="hljs-number">566</span>,<span class="hljs-number">112</span>,<span class="hljs-number">34</span>,<span class="hljs-number">56</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">344</span>,<span class="hljs-number">32</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>&#125;) &#123;<br>  cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : a) &#123;<br>  cout &lt;&lt; it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//输出1 2 3 5 3 2 7 12</span><br><span class="hljs-comment">//25 124 566 112 34 56 2 12 344 32</span><br></code></pre></td></tr></table></figure><p>结构分类：序列容器，关联容器，无序容器(<code>Unordered Containers</code>，顺序不确定，由<code>hashtable</code>实现)<br>C++11新增<code>array</code>,<code>forward-list</code>,<code>unordered containers</code>，</p><ol><li><p><code>array</code>一段固定的空间，无法扩充，<code>vector</code>一端可扩充，均为连续空间，<code>deque</code>两端可扩充，分段连续</p></li><li><p><code>list</code>双向链表，<code>forward-list</code>单向链表，均为非连续空间</p></li><li><p><code>set</code>，<code>map</code>,<code>multimap</code>,<code>multiset</code>使用红黑树实现</p></li><li><p><code>unordered map</code>,<code>unordered map</code>实际是<code>hash table</code>中的<code>separate chain</code></p></li><li><p><strong>sequence containers</strong></p><ul><li><code>vector</code>当空间不够，扩容为原来的2倍，将原来的元素搬到新的<code>vector</code>中，可以通过<code>capacity()</code>查看分配的空间</li><li><code>list</code>有自己的排序函数，每次扩充一个节点</li><li><code>forward_list</code>没有<code>back()</code>,<code>size()</code>方法，有自己的排序函数<code>sort()</code></li><li><code>deque</code>分段连续，一段称为<code>buffer</code></li><li><code>stack</code>与<code>queue</code>内部使用<code>deque</code>实现，有的地方认为<code>stack</code>与<code>queue</code>是<code>Adapter</code>，分别具有先进后出，先进先出的特点</li><li><code>slist</code>也是单向列表，但不是STL内容，在<code>ext/slist</code>头文件中</li></ul></li><li><p><strong>Associative Containers</strong></p><ul><li><code>multiset</code>自己有find函数，查找较快，红黑树结构</li><li><code>multimap</code>插入不能使用<code>[]</code>，只能通过<code>insert()</code>插入，红黑树结构</li></ul></li><li><p><strong>unordered containers</strong></p><ul><li><code>unordered_multiset</code>通过<code>hash</code>分配给各个<code>bucket</code>，每个<code>bucket</code>有一个链表放元素，可通过<code>bucket_count</code>查询bucket个数，bucket数量多于元素数量，自己又查找方法</li><li><code>unordered_multimap</code>与<code>unordered_multiset</code>类似，使用<code>hash table</code>做底层</li></ul></li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>Dev-C++的STL源码路径<code>...\Dev-Cpp\MinGW64\lib\gcc\x86_64-w64-mingw32\4.9.2\include\c++\bits</code></li><li>C++标准库&gt;C++标准模板库</li><li>标准库以head files形式存在</li><li>C++标准库的header files不带后缀，如<code>#include&lt;vector&gt;</code></li><li>新式C<code>header files</code>不带.h后缀，如<code>#include&lt;cstdio&gt;</code></li><li>旧式的<code>header files</code>带.h后缀，仍可用，<code>#include&lt;stdio.h&gt;</code></li><li>新式<code>headers</code>的所有组件封装在<code>namespace std</code>中；旧式<code>headers</code>内组件不会封装在<code>namespace std</code>中</li></ul><h3 id="OOP与GP"><a href="#OOP与GP" class="headerlink" title="OOP与GP"></a>OOP与GP</h3><p>OOP(object-oriented programming)面向对象，数据与方法放在一起，如<code>list</code>中的<code>sort()</code>方法<br>GP（generic programming）泛型，数据与方法分离，将容器与算法（对应数据与方法）分开，两者通过iterator沟通</p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p><a href="https://en.cppreference.com/w/cpp/language/operators">参考资料</a><br>包含哪些操作符不能重载，能重载的操作符如何重载</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>类和函数都有模板，在声明时，类需要<code>&lt;&gt;</code>指明数据类型，但函数不用<code>&lt;&gt;</code>指明数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 下面两种方式均可</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br></code></pre></td></tr></table></figure><h3 id="泛化与特化"><a href="#泛化与特化" class="headerlink" title="泛化与特化"></a>泛化与特化</h3><p>泛化，特化，偏特化，例子如下，优先匹配特化类型，没有则采用泛化类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 泛化</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__type</span> &#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> miao;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> dmiao;<br>&#125;;<br><br><span class="hljs-comment">// 特化，也被称为全特化</span><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__type</span>&lt;<span class="hljs-type">int</span>&gt;<br>&#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> miao;<br>&#125;;<br><br><span class="hljs-comment">// 偏特化,partial specialization</span><br><span class="hljs-comment">// 第一种偏特化</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__type</span> &#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> miao;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> dmiao;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__type</span>&lt;T*&gt;<br>&#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> miao;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__type</span>&lt;<span class="hljs-type">const</span> T*&gt;<br>&#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> miao;<br>&#125;;<br><span class="hljs-comment">// 第二种偏特化，对一个typename取具体的数据类型</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__type</span> &#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> miao;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> dmiao;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__type</span>&lt;<span class="hljs-type">int</span>,T2&gt;<br>&#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> miao;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="分配器"><a href="#分配器" class="headerlink" title="分配器"></a>分配器</h2><p>GNU4.9中，在<code>__gnu_cxx</code>命名空间，需要<code>#include&lt;ext\array_allocator&gt;</code>，有以下分配器</p><ol><li>array_allocator</li><li>mt_allocator</li><li>debug_allocator</li><li>pool_allocator</li><li>bitmap_allocator</li><li>malloc_allocator</li><li>new_allocator</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//不会直接使用分配器</span><br>allocator&lt;<span class="hljs-type">int</span>&gt;a;<br><span class="hljs-type">int</span>* p = a.<span class="hljs-built_in">allocate</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//分配一个单元</span><br>a.<span class="hljs-built_in">deallocate</span>(p, <span class="hljs-number">1</span>);<span class="hljs-comment">//还回一个单元和一个指针</span><br></code></pre></td></tr></table></figure><p>各个版本中的分配器</p><ol><li>VC6 STL对allocator的使用，没有特殊设计<ul><li>allocate时，调用operator new，最底层是使用malloc（在使用malloc申请空间时，多个小字节元素申请的空间overhead会很大，每一块空间需要记录空间大小，因此有较多额外开销）</li><li>deallocate，调用operator delete，最底层调用free <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// ()临时对象</span><br><span class="hljs-type">int</span>* p = <span class="hljs-built_in">allocator</span>&lt;<span class="hljs-type">int</span>&gt;().<span class="hljs-built_in">allocate</span>(<span class="hljs-number">512</span>, (<span class="hljs-type">int</span>*)<span class="hljs-number">0</span>);<span class="hljs-comment">//给出0或1等都无所谓</span><br><span class="hljs-comment">// 在归还内存时还需要告知申请时的空间</span><br><span class="hljs-built_in">allocator</span>&lt;<span class="hljs-type">int</span>&gt;().<span class="hljs-built_in">deallocate</span>(p, <span class="hljs-number">512</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li>BC5中的allocate和deallocate与VC相同，无特殊设计</li><li>GNU2.9中allocator的allocate与deallocate与VC相同，无特殊设计，默认使用alloc分配器。GNU2.9中alloc有独特的设计，在<code>&lt;stl_alloc.h&gt;</code>中alloc通过16个类似链表的东西实现内存分配，每一块增加8，能够申请一大块空间，避免额外开销来记录每一个空间的大小</li><li>G4.9，默认使用allocator，<code>&lt;bits/allocator.h&gt;</code>中的allocator类继承new_allocator类(在<code>&lt;bits/new_allocator.h&gt;</code>中)，但new_allocator中的allocate和deallocate方法与VC一致，在G4.9中有很多扩展allocator，其中的<code>pool_alloc</code>就是G2.9的<code>alloc</code></li></ol><h2 id="迭代器与iterator-traits"><a href="#迭代器与iterator-traits" class="headerlink" title="迭代器与iterator traits"></a>迭代器与iterator traits</h2><ul><li>迭代器需要有5种<code>associated types</code>（迭代器作为算法和容器的桥梁，在使用算法时，迭代器需要给算法提供这5个东西），能够得出迭代器<code>category</code>（种类），<code>difference</code>（迭代器距离），<code>value</code>（被指元素数据类型），<code>reference</code> 和<code>pointer</code>（后两种在标准库中未被采用）</li><li>注意：<code>difference_type</code>大小超过其数据类型（定义中的数据类型是<code>ptrdiff_t</code>，实际是unsigned int）所允许的大小时可能会失效</li><li>有两种迭代器<code>class iterators</code> 和<code>non-class iterators</code>（即pointer，退化的迭代器），前者可以方便的获取5种<code>associated types</code>，后者则不行，因此需要<code>iterator traits</code>萃取机，分离两种迭代器，<code>traits</code>如果接收<code>pointer</code>将使用偏特化<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">iterator_traits</span>&lt;T*&gt;<br>&#123;<br><span class="hljs-keyword">typedef</span> random_access_iterator_tag iterator_category;<br><span class="hljs-keyword">typedef</span> T   value_type;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">ptrdiff_t</span>   difference_type;<br><span class="hljs-keyword">typedef</span> T*   pointer;<br><span class="hljs-keyword">typedef</span> T&amp;   reference;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">iterator_traits</span>&lt;<span class="hljs-type">const</span> T*&gt;<br>&#123;<br><span class="hljs-keyword">typedef</span> random_access_iterator_tag iterator_category;<br><span class="hljs-keyword">typedef</span> T   value_type;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">ptrdiff_t</span>   difference_type;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> T* pointer;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> T&amp; reference;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="迭代器种类"><a href="#迭代器种类" class="headerlink" title="迭代器种类"></a>迭代器种类</h3><p>五种迭代器category，下一行继承上一行的迭代器（通过类提高算法复用，如实现input_iterator对应的算法，其子类若无特殊性质也可以使用该算法）</p><ol><li>input_iterator_tag&#x2F;ouput_iterator_tag</li><li>forward_iterator_tag</li><li>bidirectional_iterator_tag</li><li>random_access_iterator_tag</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//需要包含#include&lt;typeinfo&gt;</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-comment">// 得到指针的type</span><br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(it).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(<span class="hljs-built_in">istream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;()).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(<span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cout, <span class="hljs-string">&quot;&quot;</span>)).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>下面示例中缩进表示后者由前者衍生，复合关系，即后者中有一个前者，通过<code>sizeof()</code>函数可以查看容器的大小（与容器的<code>size()</code>方法不同，是查看容器中的指针等结构所占大小），如<code>cout &lt;&lt; sizeof(vector&lt;int&gt;) &lt;&lt; endl;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- sequence --&gt;</span><br>array<br>vector<br>heap<br>priority_queue<br>list<br>slist，非标准<br>deque<br>stack<br>queue<br><br><span class="hljs-comment">&lt;!-- Associative Containers --&gt;</span><br>rb_tree，非公开<br>set<br>map<br>multiset<br>multimap<br><span class="hljs-comment">&lt;!-- unordered containers --&gt;</span><br>hashtable，非公开<br>hash_set，非标准<br>hash_map，非标准<br>hash_multimap，非标准<br>hash_multiset，非标准<br></code></pre></td></tr></table></figure><p>C++11中<code>slist</code>改名为<code>forward_list</code>，<code>hash_set</code>,<code>hash_map</code>改名为<code>unordered_set</code>等，并新加<code>array</code></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><ul><li><code>list</code>实际是一个双向循环链表，并且具有额外的一个元素，即最后一个元素的下一个元素。</li><li><code>iterator</code>是<code>list</code>中的一个类，这个类对指针常用的操作符有重载</li><li>版本区别：<ul><li>在GNU2.9中列表的指针使用<code>void*</code>类型，迭代器需要三个参数<code>&lt;T,T&amp;,T*&gt;</code>，链表类与相关的类关系不复杂，迭代器定义中含有5种<code>associated types</code>；</li><li>在GNU4.9版本中迭代器只有一个参数<code>&lt;T&gt;</code>在迭代器内实现<code>T*</code>和<code>T&amp;</code>，并且链表指针成为指向自己的类型，即<code>_list_node_base</code>，链表类的相关类增加出现继承，组合等多种关系，迭代器定义中含有5中<code>associated types</code>。</li></ul></li><li><code>iterator++</code>返回不带<code>reference</code>所以不能<code>++</code>两次，与<code>int i=0;i++;</code>同理，但<code>++iterator</code>返回<code>reference</code>，可以前<code>++</code>两次</li></ul><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><ol><li>vector扩充。当vector空间不够时会在内存中找到另一块<strong>2倍大</strong>的空间（如果找不到则生命结束），然后将原来的元素拷贝过来，并将原来的元素删除，因此在使用时需要注意扩容问题，vector中的各个指针如下图所示<br><img src="/../img/C++STL%E6%B3%9B%E5%9E%8B%E8%BF%9B%E9%98%B6/vector.png"></li><li>对于空间是连续的容器往往会提供<code>[]</code>操作符</li><li>版本差别：<ul><li>G2.9中使用一个指针做迭代器（退化的迭代器），因此在使用迭代器时先输入萃取机<code>traits</code>再获取5个<code>associated type</code></li><li>G4.9增加了继承关系</li></ul></li></ol><p><strong>vector在扩容中的优化</strong>：</p><ol><li>使用<code>emplace_back()</code>代替<code>push_back()</code>，尽量避免不必要的对象拷贝操作。<code>emplace_back()</code>在容器末尾直接构造元素，而<code>push_back()</code>需要先构造一个对象，再将对象拷贝到容器中。</li><li>避免频繁插入或删除元素，这会导致<code>vector</code>容器的动态扩容和缩容，影响性能。</li><li>可以先将元素保存到一个临时<code>vector</code>中，再使用<code>swap()</code>函数一次性将所有元素插入到目标<code>vector</code>中，使用浅拷贝。</li></ol><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>array是不能扩充的，一经创建大小就不能改变，没有构造函数和析构函数，只有<code>pointer</code>（退化的迭代器），4.9版本也多了很多继承关系</p><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul><li>分段串联起来，使用一个类似<code>vector</code>的结构，每个位置存储指向对应<code>buffer</code>的指针，表现上看是（分段）连续的，可以使用<code>[]</code>访问元素</li><li><code>deque</code>的迭代器是一个类，迭代器含有<code>first</code>(buffer开始位置),<code>cur</code>（当前位置）,<code>last</code>（buffer结束位置，与first共同确定buffer的边界）,<code>node</code>(在控制中心vector的位置，在一个buffer走到尾时会使用)，<code>deque</code>含有三个迭代器，<code>start</code>，<code>finish</code>和<code>iterator</code></li><li><code>deque</code>的插入函数<code>insert()</code>会根据被插入元素位置前后的元素个数决定，把其余数据向头端推动或者向后端推动</li><li>为了模拟连续空间。对大部分操作符进行了重载。</li><li>版本区别。G2.9版本<code>deque</code>是单一的一个类，可以指派<code>buffer_size</code>，G4.9变为多个，且不能指定<code>buffer_size</code>，512&#x2F;元素大小作为buffer大小</li><li>扩容。<code>deque</code>的控制中心使用与<code>vector</code>类似的结构，因此当控制中心满后也需要扩容，与<code>vector</code>扩容类似，但<code>deque</code>在将原来元素复制到新空间时，会复制到新空间的中间（给前方留出空间）</li></ul><h3 id="stack，queue"><a href="#stack，queue" class="headerlink" title="stack，queue"></a>stack，queue</h3><ul><li>底层默认使用<code>deque</code>实现，只需要调用<code>deque</code>的一些操作即可</li><li>不提供迭代器，不可遍历</li><li>模板类的第二个参数是<code>class Sequence=deque&lt;T&gt;</code>即默认底层使用<code>deque</code>，也可使用<code>list</code>做底层实现，但<code>deque</code>效率更高；都不可选择<code>map</code>或<code>set</code>作为底层</li><li>区别：<code>queue</code>不可使用<code>vector</code>做底层，但<code>stack</code>可以使用<code>vector</code>做底层</li></ul><h3 id="rb-tree（非公开）"><a href="#rb-tree（非公开）" class="headerlink" title="rb-tree（非公开）"></a>rb-tree（非公开）</h3><ul><li>红黑树采用中序遍历，有两种<code>insertion</code>操作，<code>insert_unique()</code>插入唯一值和<code>insert_equal()</code>插入值可以重复</li><li>红黑树的<code>header</code>节点是一个空的仅有辅助功能的节点</li><li>迭代器可以修改元素值</li><li>红黑树模板有5个参数，<code>key</code>，<code>value</code>(key+data)，<code>keyOfValue</code>（如何取到key），<code>compare</code>（比较规则），<code>Alloc</code>(分配器)</li></ul><h3 id="set-x2F-multiset"><a href="#set-x2F-multiset" class="headerlink" title="set&#x2F;multiset"></a>set&#x2F;multiset</h3><ul><li>以红黑树为底层，<code>value</code>与<code>key</code>一致，<code>value</code>就是<code>key</code>，不能使用迭代器修改元素值（因为<code>key</code>就是<code>value</code>），通过<code>const_iterator</code>实现禁用迭代器修改</li><li><code>set</code>的<code>insert</code>使用红黑树的<code>insert_unique()</code>；<code>multiset</code>的<code>insert</code>使用<code>insert_equal()</code></li><li><code>set</code>所有操作依靠红黑树的方法实现，因此也可以将<code>set</code>看做一个<code>container Adapter</code></li></ul><h3 id="map-x2F-multimap"><a href="#map-x2F-multimap" class="headerlink" title="map&#x2F;multimap"></a>map&#x2F;multimap</h3><ul><li>以红黑树为底层，要求放入四个模板参数（<code>class Key,class T,class Compare=less&lt;Key&gt;,class Alloc=alloc</code>）后两个参数有默认值，因此一般只需要给出两个参数即可，调用的底层的红黑树参数<code>Key, pair&lt;const Key,T&gt;, select1st&lt;pair&lt;const Key,T&gt;&gt;, Compare, Alloc</code>，在VC6中没有<code>select1st()</code></li><li>禁止修改<code>key</code>而可以修改<code>data</code>，通过设置<code>key</code>为<code>const</code>类型实现</li><li>map可以通过<code>[]</code>修改或插入值，但multimap不能。<code>[]</code>返回key所对应的data，如果key不存在则新建一个以key，data&#x3D;默认值的节点并被返回，<code>[]</code>内部先<code>lower_bound()</code>再调用<code>insert()</code>，因此<code>insert()</code>效率更高</li></ul><h3 id="hashtable-非公开"><a href="#hashtable-非公开" class="headerlink" title="hashtable(非公开)"></a>hashtable(非公开)</h3><ul><li>同一位置出现多个元素使用单向链表（VC使用双向链表），即<code>separate chaining</code></li><li><code>hashtable</code>（实际使用<code>vector+list</code>）中的每一个位置称为一个<code>bucket</code>，一般<code>bucket</code>数量会选择素数，当一个<code>bucket</code>所挂的链表过长时（长度超过总<code>bucket</code>数量），将<code>hashtable</code>进行扩充（扩充为原来2倍附近的素数）以便将元素打散重排，没扩充一次都会将所有元素重新排列</li><li><code>hashtable</code>要求给出六个模板参数<code>&lt;class Value,class Key,class HashFcn, class ExtractKey, class EqualKey, class Alloc=alloc&gt;</code>，<code>HashFcn</code>仿函数，用于计算编号放入对应的<code>bucket</code>；<code>ExtractKey</code>如何取出<code>key</code>；<code>EqualKey</code>指定什么叫<code>key</code>相等。</li><li><code>hash&lt;&gt;</code>具有多个特化版本，用于产生编号以便排序</li><li>迭代器根据链表是否为单向或双向，使用<code>bidirectional</code>和<code>forward</code></li></ul><h3 id="unordered-set-unordered-multiset-unordered-map-unordered-multimap"><a href="#unordered-set-unordered-multiset-unordered-map-unordered-multimap" class="headerlink" title="unordered_set,unordered_multiset,unordered_map,unordered_multimap"></a>unordered_set,unordered_multiset,unordered_map,unordered_multimap</h3><ul><li><code>bucket_size(i)</code>查询第i个bucket含有的元素个数</li><li><code>bucket</code>数量一定大于元素个数</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法首先要根据迭代器获取必需的信息（5种<code>associated type</code>），<code>iterator traits</code>与<code>type traits</code>对算法效率有较大影响，算法需要根据数据特性选择最高效的算法</p><h3 id="部分算法举例"><a href="#部分算法举例" class="headerlink" title="部分算法举例"></a>部分算法举例</h3><ul><li><code>accumulate(InputIterator first,InputIterator last,T init,BinaryOperation binary_op)</code>将first至last中的元素使用binary_op操作累计给init并返回</li><li><code>for_each(InputIterator first,InputIterator last,Function f)</code>对<code>[first,last]</code>的元素使用函数f</li><li><code>replace(ForwardIterator first,ForwardIterator last,const T&amp;old_value,const T&amp;new_value)</code>将<code>[first,last]</code>中所有等于old_value的元素更换为 new_value</li><li><code>replace_if(ForwardIterator first,ForwardIterator last,Predicate pred,const T&amp;old_value,const T&amp;new_value)</code>将<code>[first,last]</code>内满足pred条件（pred返回true or false）的取代</li><li><code>replace_copy(InputIterator first,InputIterator last,OutputIterator result,const T&amp;old_value,const T&amp;new_value)</code>将<code>[first,last]</code>中等于old_value的元素放入result区间中</li><li><code>count(..)</code>（循序计数），<code>count_if(..)</code>,<code>find(..)</code>（循序查找）,<code>find_if(..)</code>,<code>sort(..)</code>（快排）五种函数使用方式类似(省略了参数)，在部分容器中有自己的同名成员函数<ul><li>容器不带<code>count()</code>,<code>find(..)</code>方法: <code>array,vector</code>,<code>list</code>,<code>forward_list</code>,<code>deque</code></li><li>容器带有<code>count()</code>,<code>find(..)</code>方法: <code>set/multiset</code>, <code>map/multimap</code>, <code>unordered_set/unordered_multiset</code>, <code>unordered_map/unordered_multimap </code></li><li>除了<code>list</code>和<code>forward_list</code>都没有成员函数<code>sort()</code>，且不能使用算法中的<code>std::sort()</code>（set等容器自带排序）</li></ul></li><li><code>binary_search()</code>使用二分查找，必需是已排序的容器，底层调用<code>lower_bound()</code></li><li><code>lower_bound(ForwardIterator first,ForwardIterator last,const T&amp;val)</code>将val插入已排序容器所能存在的最低点，<code>upper_bound(ForwardIterator first,ForwardIterator last,const T&amp;val)</code>将val插入已排序容器所能存在的最高点</li></ul><h2 id="Functors仿函数"><a href="#Functors仿函数" class="headerlink" title="Functors仿函数"></a>Functors仿函数</h2><p>把类当做函数用，只为算法服务，比如排序默认使用从小到大，通过仿函数实现从大到小排序，都是对操作符<code>()</code>进行重载，是个对象但像函数<br>三类仿函数：</p><ol><li>算术类Arithmetic</li><li>逻辑运算类Logical</li><li>相对关系类（比大小）Relational</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 算术类仿函数如下</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">plus</span>:<span class="hljs-keyword">public</span> binary_function&lt;T,T,T&gt;&#123;<br><span class="hljs-function">T <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y)</span><span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> x + y;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">minus</span> :<span class="hljs-keyword">public</span> binary_function&lt;T, T, T&gt; &#123;<br><span class="hljs-function">T <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y)</span><span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> x - y;<br>&#125;<br>&#125;; <br></code></pre></td></tr></table></figure><p>STL中的仿函数都继承了<code>binary_function&lt;T,T,T&gt;</code>或者另一个类<code>unary_function()</code>，其类的实现示例如下，使仿函数可适配化，没有继承<code>binary_function&lt;T,T,T&gt;</code>在一些算法(比如<code>sort()</code>)中可以使用，但当算法需要适配器时将无法使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Arg</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">unary_function</span> &#123;<br><span class="hljs-keyword">typedef</span> Arg argument_type;<br><span class="hljs-keyword">typedef</span> Result result_type;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Arg1</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">Arg2</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">binary_function</span> &#123;<br><span class="hljs-keyword">typedef</span> Arg1 first_argument_type;<br><span class="hljs-keyword">typedef</span> Arg2 second_argument_type;<br><span class="hljs-keyword">typedef</span> Result result_type;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><p>在仿函数，迭代器，容器中都有适配器出现<br><code>typename</code>使用<code>typename</code>关键字修饰，编译器将这个名字当做是类型（避免在编译时才能确认是变量还是类型）</p><ul><li>容器迭代器：<code>stack</code>，<code>queue</code></li><li>函数迭代器：<code>binder2nd(const Operation&amp;op,const T&amp;x)</code>（已被<code>bind()</code>取代），将op的第二个参数绑定为x，要求op必须继承<code>binary_function</code>；<code>not1(const Predicate&amp; pred)</code><br><code>bind()</code>绑定函数，使用_2（第二实参），_1（第一实参）等作为占位符，可以指定模板类型，表示返回类型，可以绑定四种类型<code>functions</code>，<code>function objects</code>, <code>member functions</code>, <code>data members</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// bind example</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>     <span class="hljs-comment">// std::cout</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span>   <span class="hljs-comment">// std::bind</span></span><br><br><span class="hljs-comment">// a function: (also works with function object: std::divides&lt;double&gt; my_divide;)</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">my_divide</span> <span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> x/y;&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyPair</span> &#123;<br>  <span class="hljs-type">double</span> a,b;<br>  <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">multiply</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> a*b;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::placeholders;    <span class="hljs-comment">// adds visibility of _1, _2, _3,...</span><br><br>  <span class="hljs-comment">// binding functions:</span><br>  <span class="hljs-keyword">auto</span> fn_five = std::<span class="hljs-built_in">bind</span> (my_divide,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>);               <span class="hljs-comment">// returns 10/2</span><br>  std::cout &lt;&lt; <span class="hljs-built_in">fn_five</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;                          <span class="hljs-comment">// 5</span><br><br>  <span class="hljs-keyword">auto</span> fn_half = std::<span class="hljs-built_in">bind</span> (my_divide,_1,<span class="hljs-number">2</span>);               <span class="hljs-comment">// returns x/2</span><br>  std::cout &lt;&lt; <span class="hljs-built_in">fn_half</span>(<span class="hljs-number">10</span>) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;                        <span class="hljs-comment">// 5</span><br><br>  <span class="hljs-keyword">auto</span> fn_invert = std::<span class="hljs-built_in">bind</span> (my_divide,_2,_1);            <span class="hljs-comment">// returns y/x</span><br>  std::cout &lt;&lt; <span class="hljs-built_in">fn_invert</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;                    <span class="hljs-comment">// 0.2</span><br><br>  <span class="hljs-keyword">auto</span> fn_rounding = std::<span class="hljs-built_in">bind</span>&lt;<span class="hljs-type">int</span>&gt; (my_divide,_1,_2);     <span class="hljs-comment">// returns int(x/y)</span><br>  std::cout &lt;&lt; <span class="hljs-built_in">fn_rounding</span>(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;                  <span class="hljs-comment">// 3</span><br><br>  MyPair ten_two &#123;<span class="hljs-number">10</span>,<span class="hljs-number">2</span>&#125;;<br><br>  <span class="hljs-comment">// binding members:</span><br>  <span class="hljs-keyword">auto</span> bound_member_fn = std::<span class="hljs-built_in">bind</span> (&amp;MyPair::multiply,_1); <span class="hljs-comment">// returns x.multiply()</span><br>  std::cout &lt;&lt; <span class="hljs-built_in">bound_member_fn</span>(ten_two) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;           <span class="hljs-comment">// 20</span><br><br>  <span class="hljs-keyword">auto</span> bound_member_data = std::<span class="hljs-built_in">bind</span> (&amp;MyPair::a,ten_two); <span class="hljs-comment">// returns ten_two.a</span><br>  std::cout &lt;&lt; <span class="hljs-built_in">bound_member_data</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;                <span class="hljs-comment">// 10</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>迭代器适配器，<code>reverse_iterator</code>，<code>inserter</code>,在<code>copy()</code>函数中，是直接将一段数据复制到（通过赋值实现）另一个容器中，如果另一个容器空间不够将出错，通过inserter可以将赋值操作改为<code>insert()</code>，从而不用担心空间问题。</li><li><code>istream_iterator</code>, <code>ostream_iterator</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>     <span class="hljs-comment">// std::cout</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span>   <span class="hljs-comment">// std::bind</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iterator&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; a = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">123</span> &#125;;<br><span class="hljs-function">std::ostream_iterator&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">out_it</span><span class="hljs-params">(std::cout, <span class="hljs-string">&quot;,&quot;</span>)</span></span>;<span class="hljs-comment">//内部对指针++，相当于再次执行对应操作</span><br>std::<span class="hljs-built_in">copy</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), out_it);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::vector&lt;<span class="hljs-type">int</span>&gt;c;<br>std::istream_iterator&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">iit</span>(std::cin), eos;<span class="hljs-comment">//在这一行就已经开始等待输入了</span><br><span class="hljs-built_in">copy</span>(iit, eos, std::<span class="hljs-built_in">inserter</span>(c, c.<span class="hljs-built_in">begin</span>()));<br></code></pre></td></tr></table></figure></li></ul><h2 id="STL周边"><a href="#STL周边" class="headerlink" title="STL周边"></a>STL周边</h2><ul><li><code>hash_function</code>通过调用对象函数实现递归处理</li><li><code>tuple</code>使用可变参数模板（将n个模板参数分解为1+(n-1)然后递归处理）,能够使用任意数量任意种类的参数，通过继承实现递归处理，如声明<code>tuple&lt;int,int,double&gt;</code>将被递归为：<code>tuple&lt;int,int,double&gt;</code>继承自<code>tuple&lt;int,double&gt;</code>继承自<code>tuple&lt;double&gt;</code>继承自<code>tuple&lt;&gt;</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// tuple实现部分代码，与源码变量名称有差别</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Head</span>, <span class="hljs-keyword">class</span>... Tail&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tuple</span>&lt;Head, Tail...&gt; : <span class="hljs-keyword">private</span> tuple&lt;Tail...&gt; &#123; <span class="hljs-comment">// recursive tuple definition</span><br><span class="hljs-keyword">public</span>:<br><br>&#125;;<br><br><span class="hljs-comment">// tuple使用示例</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>     <span class="hljs-comment">// cout</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;functional&gt;</span><span class="hljs-comment">//tuple</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;complex&gt;</span><span class="hljs-comment">//complex</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">a</span>&#123;<br>string a1;<br><span class="hljs-type">int</span> a2;<br><span class="hljs-type">int</span> a3;<br>complex&lt;<span class="hljs-type">double</span>&gt; a4;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(string) &lt;&lt; endl;<span class="hljs-comment">//28</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(complex&lt;<span class="hljs-type">double</span>&gt;) &lt;&lt; endl;<span class="hljs-comment">//16</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) &lt;&lt; endl;<span class="hljs-comment">//4</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(tuple&lt;string, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, complex&lt;<span class="hljs-type">double</span>&gt;&gt;) &lt;&lt; endl;<span class="hljs-comment">//64</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(a) &lt;&lt; endl;<span class="hljs-comment">//56</span><br><br>tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>, <span class="hljs-type">int</span>&gt;<span class="hljs-built_in">t1</span>(<span class="hljs-number">31</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">123</span>);<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(t1) &lt;&lt; endl;<span class="hljs-comment">//24</span><br>cout &lt;&lt; <span class="hljs-built_in">get</span>&lt;<span class="hljs-number">0</span>&gt;(t1)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">1</span>&gt;(t1) &lt;&lt; endl;<br><br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">make_tuple</span>(<span class="hljs-number">23</span>, <span class="hljs-string">&quot;2332&quot;</span>, <span class="hljs-number">2.3</span>);<br><br><span class="hljs-keyword">typedef</span> tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, string&gt; t;<br><span class="hljs-keyword">typedef</span> tuple_element&lt;<span class="hljs-number">1</span>, t&gt; tmp;<br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(tmp).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>type_traits</code>。所有的<code>type_traits</code>可见<a href="https://cplusplus.com/reference/type_traits/?kw=type_traits">cplus网站</a>，用于获取对象的信息，对于自己写的类也可以使用，一个类带指针就需要析构函数，不带则不用析构<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// is_void等即为type_traits，下面是部分type_traits展示，使用如下所示</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">type_test</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; x)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;type traits for type: &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(T).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_void: &quot;</span> &lt;&lt; is_void&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_integral: &quot;</span> &lt;&lt; is_integral&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_floatinf_point: &quot;</span> &lt;&lt; is_floating_point&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_arithmetic: &quot;</span> &lt;&lt; is_arithmetic&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_signed: &quot;</span> &lt;&lt; is_signed&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_unsigned: &quot;</span> &lt;&lt; is_unsigned&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_const: &quot;</span> &lt;&lt; is_const&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_class: &quot;</span> &lt;&lt; is_class&lt;T&gt;::value &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;is_function: &quot;</span> &lt;&lt; is_function&lt;T&gt;::value &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">type_test</span>(<span class="hljs-built_in">string</span>());<span class="hljs-comment">//放入一个临时对象</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>moveable</code>对效率有较大影响，深拷贝和<code>move construct</code>(也称浅拷贝)，深拷贝开辟一块空间将指针和数据都拷贝，浅拷贝只拷贝了指针，因此浅拷贝很快，使用浅拷贝需要确保原数据不再使用（临时对象拷贝可以用<code>move</code>），对于使用了<code>move construct</code>的类在析构时需要先判断指针是否为0，然后再<code>delete</code>指针。在<code>vector</code>中使用浅拷贝，相当于只把新容器的指针指向（新建三个指针）被<code>copy</code>容器的数据，即两个容器数据共享，两者指针指向相同。类中是否有浅拷贝可以通过<code>type_traits</code>获取</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.youtube.com/watch?v=_dzIvOmXfKI&list=PLTcwR9j5y6W2Bf4S-qi0HBQlHXQVFoJrP&index=19">侯捷STL源码剖析视频</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://cplusplus.com/">Cplusplus</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://gcc.gnu.org/">gcc.gnu</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://en.cppreference.com/w/">cppreference</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>C++</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csp做题记录</title>
    <link href="/2023/03/08/csp%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/03/08/csp%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>是我蠢了，这玩意官方有<a href="https://dl.ccf.org.cn/index.html?_ack=1">解析</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>以下注意事项均针对csp中选择Dev-cpp(C++语言)条件</p><ol><li>使用<code>pow()</code>函数需要加上<code>cmath</code>库否则编译错误，与在vs中仅添加<code>iostream</code>有区别</li><li>二维数组声明时注意空格如<code>vector&lt;vector&lt;int&gt; &gt;</code>，写为<code>&gt;&gt;</code>出现编译错误</li><li>选择C++环境不支持auto智能指针</li></ol><h2 id="202209-1如此编码"><a href="#202209-1如此编码" class="headerlink" title="202209-1如此编码"></a>202209-1如此编码</h2><p>根据提示完成即可，比较简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">ifstream <span class="hljs-title">cin</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa.txt&quot;</span>)</span></span>;<br><span class="hljs-type">int</span> n, m;<br>cin &gt;&gt; n &gt;&gt; m;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(n+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>cin &gt;&gt; a[i];<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">c</span>(n+<span class="hljs-number">1</span>);<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">b</span>(n+<span class="hljs-number">1</span>);<br>c[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>c[i] = c[i - <span class="hljs-number">1</span>] * a[i];<br>b[i] = (m % c[i] - m % c[i - <span class="hljs-number">1</span>]) / c[i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="202209-2何以包邮"><a href="#202209-2何以包邮" class="headerlink" title="202209-2何以包邮"></a>202209-2何以包邮</h2><p>如果遍历所有的可能的取法，会有$2^{n}$种，运算量比较大，会有超时，只能拿下70分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, x;<br>cin &gt;&gt; n &gt;&gt; x;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>cin &gt;&gt; a[i];<br><span class="hljs-comment">//遍历</span><br><span class="hljs-type">int</span> res = INT_MAX;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, n); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n &amp;&amp; (i &gt;&gt; j); j++) &#123;<br><span class="hljs-keyword">if</span> ((i &gt;&gt; j) &amp; <span class="hljs-number">1</span>) &#123;<br>sum += a[j];<br>&#125;<br>&#125;<br>res = sum &gt;= x ? <span class="hljs-built_in">min</span>(sum, res) : res;<br>&#125;<br>cout &lt;&lt; res;<br>&#125;<br></code></pre></td></tr></table></figure><p>考虑dfs+剪枝优化，同样是遍历，但通过计算节点后续能拿到的最大金额是否大于x，能够剪枝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure><p>但感觉还能用dp快速求解，类似于01背包，相当于把01背包问题的容量看做价格，用dp[j]表示价格不超过j的这n本书能组成的最大值，那么<code>dp[j]=max(dp[j],dp[j-a[i]]+a[i])</code>，该解法满分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, x,sum = <span class="hljs-number">0</span>;<span class="hljs-comment">//sum记录书本总价</span><br>cin &gt;&gt; n &gt;&gt; x;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(n);<span class="hljs-comment">//记录书本价格</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; a[i];<br>sum += a[i];<br>&#125;<br><span class="hljs-comment">//构建sum+1个空间，如果x&lt;sum那么符合条件的价格会出现在dp[x]之后所以不能仅仅构建x+1个空间，如果x=sum那么dp[x]就是符合条件的答案</span><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dp</span>(sum+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//对于每本书都需要重新修正dp的每一项</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = sum; j &gt;= a[i]; j--) &#123;<br><span class="hljs-keyword">if</span> (j - a[i] &gt;= <span class="hljs-number">0</span>)<br>dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - a[i]] + a[i]);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 不必从开始查找，分析见上述注释</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;sum+<span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (dp[i] &gt; x) &#123;<br>cout &lt;&lt; dp[i];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL泛型</title>
    <link href="/2023/02/19/C++STL%E6%B3%9B%E5%9E%8B/"/>
    <url>/2023/02/19/C++STL%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <ol><li><code>a.begin() + a.size() == a.end()</code>a为vector或者string等含有迭代器</li><li>示例代码并不是全部代码，只是核心部分</li><li>忽略某个警告，如忽略4305警告<code>#pragma warning(disable:4305)</code></li><li>有关迭代器的相关内容在C++STL泛型进阶中会有详细说明</li><li>强烈建议把cppreference作为字典使用，非常方便</li></ol>          </div> <h2 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h2><p>在使用时需要<code>#include&lt;algorithm&gt;</code></p><h3 id="反转函数"><a href="#反转函数" class="headerlink" title="反转函数"></a>反转函数</h3><p><code>reverse()</code>将迭代器区间内的元素反转，可以是string，vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//反转[a.begin(),a.end())内的元素</span><br><span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><h3 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h3><p><code>sort()</code>排序，默认按照升序排列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>也可以自定义排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">com</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a &gt; b ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span> &gt;<span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>a[i] = i;<br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), com);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分查找函数"><a href="#二分查找函数" class="headerlink" title="二分查找函数"></a>二分查找函数</h3><p>在 log(n) 的时间复杂度内查找给定值</p><ol><li><code>lower_bound()</code>在指定区域内查找<strong>不小于目标值</strong>的第一个元素。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 在 [first, last) 区域内查找第一个不小于目标值的元素。</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">lower_bound</span> <span class="hljs-params">(ForwardIterator first, ForwardIterator last,<span class="hljs-type">const</span> T&amp; val)</span></span>;<br><span class="hljs-comment">// 在 [first, last) 区域内查找第一个不符合 comp 规则的元素</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">lower_bound</span> <span class="hljs-params">(ForwardIterator first, ForwardIterator last,<span class="hljs-type">const</span> T&amp; val, Compare comp)</span></span>;<br></code></pre></td></tr></table></figure></li><li><code>upper_bound()</code>在指定区域内查找<strong>大于目标值</strong>的第一个元素。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//查找[first, last)区域中第一个大于 val 的元素。</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">upper_bound</span> <span class="hljs-params">(ForwardIterator first, ForwardIterator last,<span class="hljs-type">const</span> T&amp; val)</span></span>;<br><span class="hljs-comment">//查找[first, last)区域中第一个不符合 comp 规则的元素</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">upper_bound</span> <span class="hljs-params">(ForwardIterator first, ForwardIterator last,<span class="hljs-type">const</span> T&amp; val, Compare comp)</span></span>;<br></code></pre></td></tr></table></figure></li><li>如果在序列中有多个（&gt;&#x3D;1）等于给定值的元素，<code>lower_bound</code>函数返回其中等于给定值的第一个迭代器，而<code>upper_bound</code>函数返回的是最后一个等于给定值的元素的下一个元素迭代器。如果给定值在序列中不存在，<code>lower_bound</code>函数与<code>upper_bound</code>函数返回一致，是指向第一个大于该值的元素的迭代器。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt;a = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">30</span>,<span class="hljs-number">32</span>,<span class="hljs-number">45</span>,<span class="hljs-number">174</span>,<span class="hljs-number">1345</span> &#125;;<br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">upper_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-number">30</span>);<br><span class="hljs-keyword">auto</span> it2 = <span class="hljs-built_in">lower_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-number">30</span>);<br>cout &lt;&lt; *it &lt;&lt; endl;<br>cout &lt;&lt; *it2 &lt;&lt; endl;<br><span class="hljs-comment">// 输出32\n30</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="vector使用"><a href="#vector使用" class="headerlink" title="vector使用"></a>vector使用</h2><h3 id="vector初始化方式"><a href="#vector初始化方式" class="headerlink" title="vector初始化方式"></a>vector初始化方式</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 只申明</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;string&gt; v3;<br><br><span class="hljs-comment">// 初始化二维数组，n1行n2列。默认值为0</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">stu</span>(n1,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n2));  <br><br>vector&lt;<span class="hljs-type">int</span>&gt; v5 = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;; <span class="hljs-comment">//使用花括号初始化</span><br>vector&lt;string&gt; v6 = &#123; <span class="hljs-string">&quot;hi&quot;</span>,<span class="hljs-string">&quot;my&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;is&quot;</span>,<span class="hljs-string">&quot;lee&quot;</span> &#125;;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v7</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">-1</span>)</span></span>; <span class="hljs-comment">//申请含5个-1的数组，即-1,-1,-1,-1,-1。</span><br><br><span class="hljs-comment">// vector的元素类型是int，初始化为0</span><br><span class="hljs-comment">// string类型，初始化为&quot;&quot;</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v9</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v10</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>; <br></code></pre></td></tr></table></figure><h3 id="vector元素访问或遍历"><a href="#vector元素访问或遍历" class="headerlink" title="vector元素访问或遍历"></a>vector元素访问或遍历</h3><ol><li>下标访问，与数组类似<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//非完整代码</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;<br>cout&lt;&lt;a[<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure></li><li>迭代器访问(迭代器类型要与被遍历的vector对象类型一直)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//非完整代码</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=a.<span class="hljs-built_in">begin</span>();it!=a.<span class="hljs-built_in">end</span>();it++)&#123;<br>  cout&lt;&lt;*it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="元素插入"><a href="#元素插入" class="headerlink" title="元素插入"></a>元素插入</h3><p><code>insert()</code>可以在vector对象的任意位置<strong>前</strong>插入一个元素，插入位置后的所有元素依次向后挪动一个位置，<code>insert()</code>要求插入的位置是元素的迭代器而非下标</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//非完整代码</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;<br>a.<span class="hljs-built_in">insert</span>(a.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">4</span>)<span class="hljs-comment">//在最前面插入新元素，元素值为4</span><br></code></pre></td></tr></table></figure><h3 id="元素删除"><a href="#元素删除" class="headerlink" title="元素删除"></a>元素删除</h3><p><code>erase()</code>删除vector迭代器所指的一个元素或一个区间内的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-comment">//删除第三个元素（begin()相当于下标访问中的0）</span><br>a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">2</span>);<br><span class="hljs-comment">//删除[a.begin()+1,a.begin()+5)元素</span><br>a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>size()</code>方法返回向量大小（元素个数）<br><code>empty()</code>返回向量是否为空，非空为0，空为1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>a.<span class="hljs-built_in">size</span>();<br>a.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><hr><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><code>vector&lt;char&gt;</code>可以处理字符，但不如string方便，有添加，删除，查找和比较的功能，使用需要加<code>#include&lt;string&gt;</code></p><h3 id="赋值与创建"><a href="#赋值与创建" class="headerlink" title="赋值与创建"></a>赋值与创建</h3><p>直接创建缺省为””</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//直接创建</span><br>string a;<br><br><span class="hljs-comment">//赋值</span><br>string a=<span class="hljs-string">&quot;hello&quot;</span>;<br><br><span class="hljs-comment">//字符指针赋给字符对象</span><br><span class="hljs-type">char</span> a[<span class="hljs-number">20</span>]=<span class="hljs-string">&quot;hello&quot;</span>;<br>string b=a;<br></code></pre></td></tr></table></figure><h3 id="尾部添加"><a href="#尾部添加" class="headerlink" title="尾部添加"></a>尾部添加</h3><p>可以直接用<code>+</code>给string对象尾部添加<strong>字符或字符串</strong>，也可以用<code>append()</code>添加字符串（不能是字符）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//使用+添加</span><br>string s;<br>s+=<span class="hljs-string">&#x27;a&#x27;</span>;<br>s+=<span class="hljs-string">&quot;bf&quot;</span>;<br><br><span class="hljs-comment">//使用append()添加字符串（如果用append()添加字符将会报错）</span><br>s.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;123&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="插入字符"><a href="#插入字符" class="headerlink" title="插入字符"></a>插入字符</h3><p><code>insert()</code>将字符插入到迭代器位置之<strong>前</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s=<span class="hljs-string">&quot;12345&quot;</span>;<br>s.<span class="hljs-built_in">insert</span>(s.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol><li>清空字符串可以赋空字符串</li><li><code>erase()</code>与vector类似，删除迭代器所指元素或一个区间内元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">string a=<span class="hljs-string">&quot;123456&quot;</span>;<br>a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="返回长度"><a href="#返回长度" class="headerlink" title="返回长度"></a>返回长度</h3><p><code>length()</code>返回字符串长度，<code>size()</code>也可以返回字符串长度；<code>empty()</code>返回字符串是否为空，字符串为空返回1，非空返回0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">string a=<span class="hljs-string">&quot;1234567&quot;</span>;<br>cout&lt;&lt;a.<span class="hljs-built_in">length</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;a.<span class="hljs-built_in">size</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>&lt;&lt;a.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h3 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h3><p><code>replace()</code>可以替换string对象的字符，其重载函数较多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s=<span class="hljs-string">&quot;1234567&quot;</span>;<br><span class="hljs-comment">//从第3个开始，将连续的2个字符替换为&quot;nihao&quot;</span><br>s.<span class="hljs-built_in">replace</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;nihao&quot;</span>);<br><span class="hljs-comment">//输出为123nihao67</span><br></code></pre></td></tr></table></figure><h3 id="查找-x2F-搜索字符"><a href="#查找-x2F-搜索字符" class="headerlink" title="查找&#x2F;搜索字符"></a>查找&#x2F;搜索字符</h3><p><code>find()</code>查找字符串中的第一个字符元素或子串，查到返回下标（从0开始），否则返回4,294,967,295(2^32-1,windows中表现如此，其余未测试)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s = <span class="hljs-string">&quot;1234567&quot;</span>;<br>cout &lt;&lt; s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;4&#x27;</span>)&lt;&lt;endl;<span class="hljs-comment">//返回3</span><br>cout &lt;&lt; s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;45&quot;</span>)&lt;&lt;endl;<span class="hljs-comment">//返回3</span><br>cout&lt;&lt;s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;c&#x27;</span>);<span class="hljs-comment">//返回4294967295</span><br></code></pre></td></tr></table></figure><h3 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h3><p><code>compare()</code>方法可以与其他字符串进行比较，比对方大返回1，比对方小返回-1，相等返回0。<br>字符串的大小比较原则：逐字符比较，对于字符串A与B比较，若<code>A[0]&gt;B[0]</code>返回1，<code>A[0]&lt;B[0]</code>返回-1，<code>A[0]=B[0]</code>看下一个字符，若下一字符B没有则A大，若下一位A没有则B大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s = <span class="hljs-string">&quot;1234&quot;</span>;<br>string a = <span class="hljs-string">&quot;a&quot;</span>;<br>cout &lt;&lt; s.<span class="hljs-built_in">compare</span>(a);<br></code></pre></td></tr></table></figure><h3 id="string对象与字符数组互操作"><a href="#string对象与字符数组互操作" class="headerlink" title="string对象与字符数组互操作"></a>string对象与字符数组互操作</h3><p>C语言中使用<code>printf()</code>输出时，不能直接输出string对象，需要使用<code>c_str()</code>方法，将string对象转为了const char*</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s = <span class="hljs-string">&quot;1234&quot;</span>;<br>string a = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-built_in">printf</span>(s.<span class="hljs-built_in">c_str</span>());<br></code></pre></td></tr></table></figure><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><h4 id="1-截取子串"><a href="#1-截取子串" class="headerlink" title="1. 截取子串"></a>1. 截取子串</h4><p><code>string substr(int pos = 0,int n = n) const;</code>返回pos开始（包含pos）的n个字符组成的字符串</p><ol start="2"><li>分割字符串<br>在STL中<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">mysplit</span><span class="hljs-params">(string a,<span class="hljs-type">const</span> string&amp; b)</span> </span>&#123;<br>vector&lt;string&gt;res;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> tmp = a.<span class="hljs-built_in">find</span>(b);tmp&lt;a.<span class="hljs-built_in">size</span>();tmp=a.<span class="hljs-built_in">find</span>(b)) &#123;<br>res.<span class="hljs-built_in">emplace_back</span>(a.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, tmp));<br>a = a.<span class="hljs-built_in">substr</span>(tmp + b.<span class="hljs-built_in">size</span>(), a.<span class="hljs-built_in">size</span>());<br>&#125;<br>res.<span class="hljs-built_in">emplace_back</span>(a);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="set使用"><a href="#set使用" class="headerlink" title="set使用"></a>set使用</h2><ul><li>set集合容器实现了红黑树（Red-Black Tree）的平衡二叉检索树的数据结构，每个子树根节点键值大于左子树所有节点的键值，而小于右子树所有节点的键值，并且根节点左子树高度与右子树高度相同，<strong>不会重复插入相同键值元素</strong>。</li><li>平衡二叉检索树的检索使用中序遍历，效率高于vector,list,deque等容器</li><li>set中的键值不能直接修改。一旦修改将根据新的键值旋转子树，以达到平衡，因此修改的键值可能不在原位置，构建set集合主要是为了快速检索</li><li>multiset,map,multimap的内部结构也是平衡二叉检索树</li><li>使用需要<code>#include&lt;set&gt;</code></li></ul><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>与其他容器类似，元素的排列按默认的比较规则（由小到大，在比较规则函数未自定义时）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;<span class="hljs-type">int</span>&gt; a;<br></code></pre></td></tr></table></figure><h3 id="插入与中序遍历"><a href="#插入与中序遍历" class="headerlink" title="插入与中序遍历"></a>插入与中序遍历</h3><p><code>insert()</code>将元素插入集合，默认是按照由小到大插入，使用前向迭代器对集合中序遍历，结果即为排序结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;<span class="hljs-type">int</span>&gt;a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">4</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">9</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//第二次插入无效</span><br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++) &#123;<br>  cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//输出为2 4 9</span><br></code></pre></td></tr></table></figure><h3 id="反向遍历"><a href="#反向遍历" class="headerlink" title="反向遍历"></a>反向遍历</h3><p>反向迭代器<code>reverse_iterator</code>能够反向遍历集合，输出为集合反向排序结果，其中<code>rbegin()</code>和<code>rend()</code>两个方法，分别给出反向遍历的开始位置和结束位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;<span class="hljs-type">int</span>&gt;a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">4</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">9</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::reverse_iterator it = a.<span class="hljs-built_in">rbegin</span>(); it != a.<span class="hljs-built_in">rend</span>(); it++) &#123;<br>  cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="元素删除-1"><a href="#元素删除-1" class="headerlink" title="元素删除"></a>元素删除</h3><p><code>erase()</code>方法可以删除某个迭代器位置上的元素，等于某键值的元素，一个区间上的元素和清空集合。删除的效率也比较高，同时自动调整内部的红黑树平衡</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;<span class="hljs-type">int</span>&gt;a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">4</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">9</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">8</span>);<br>a.<span class="hljs-built_in">erase</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//删除键值为2的元素</span><br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::reverse_iterator it = a.<span class="hljs-built_in">rbegin</span>(); it != a.<span class="hljs-built_in">rend</span>(); it++) &#123;<br>  cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>());<span class="hljs-comment">//删除第一个元素(键值最小的元素)</span><br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++) &#123;<br>  cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="元素检索"><a href="#元素检索" class="headerlink" title="元素检索"></a>元素检索</h3><p><code>find()</code>方法（不是算法函数<code>find()</code>，算法函数时间复杂度为线性即逐个比较）对集合进行搜索，时间复杂度为<code>logn</code>，如果查到键值，返回该键值的迭代器位置，否则，返回集合最后一个元素后面的一个位置，即<code>end()</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;<span class="hljs-type">int</span>&gt;a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">4</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">9</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">8</span>);<br><span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">find</span>(<span class="hljs-number">4</span>);<span class="hljs-comment">//返回键值为4的迭代器位置</span><br><span class="hljs-keyword">if</span> (it != a.<span class="hljs-built_in">end</span>())<br>  cout &lt;&lt; <span class="hljs-string">&quot;find &quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="自定义比较函数"><a href="#自定义比较函数" class="headerlink" title="自定义比较函数"></a>自定义比较函数</h3><p>在插入操作<code>insert()</code>中集合根据比较函数放置元素，缺省按照由小到大的顺序，也可以自己编写，有两种编写比较函数的方法：</p><ol><li>元素不是结构体。写一个结构体然后重载<code>()</code>操作符(相当于是一个仿函数，有关仿函数介绍可见C++STL泛型进阶)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-comment">//自定义比较函数 myComp，重载“()”操作符 </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myComp</span> &#123;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; a, <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; b)</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-comment">//形参类型int必须与set中的值类型一致</span><br><span class="hljs-keyword">if</span> (a != b) <span class="hljs-comment">// 取等时需要特殊处理，否则小于等于的情况混杂</span><br><span class="hljs-keyword">return</span> a &gt; b;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>set&lt;<span class="hljs-type">int</span>,myComp&gt; s; <span class="hljs-comment">//第二个类型必须是结构体</span><br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>); <br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">12</span>); <br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">6</span>); <br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">8</span>);<br>set&lt;<span class="hljs-type">int</span>,myComp&gt;::iterator it;<br><span class="hljs-keyword">for</span> (it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>元素是结构体。将比较函数写在结构体内，重载<code>&lt;</code>符号自定义排序规则<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br>string name;<br><span class="hljs-type">float</span> score;<br><span class="hljs-built_in">Info</span>(string n, <span class="hljs-type">float</span> s) :<span class="hljs-built_in">name</span>(n), <span class="hljs-built_in">score</span>(s) &#123;&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Info &amp;a) <span class="hljs-type">const</span> &#123;<span class="hljs-comment">//形参类型int必须与set中的值类型一致</span><br><span class="hljs-comment">//按照score从大到小排序</span><br><span class="hljs-keyword">return</span> a.score &lt; score;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>set&lt;Info&gt; s; <span class="hljs-comment">//第二个类型必须是结构体</span><br><span class="hljs-function">Info <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;yede&quot;</span>, <span class="hljs-number">3.5</span>)</span></span>;<br>s.<span class="hljs-built_in">insert</span>(a);<br>a.name = <span class="hljs-string">&quot;y2&quot;</span>;<br>a.score = <span class="hljs-number">7.9</span>;<br>s.<span class="hljs-built_in">insert</span>(a); <br>a.name = <span class="hljs-string">&quot;y3&quot;</span>;<br>a.score = <span class="hljs-number">8.9</span>;<br>s.<span class="hljs-built_in">insert</span>(a); <br>set&lt;Info&gt;::iterator it;<br><span class="hljs-keyword">for</span> (it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; (*it).name&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;(*it).score &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//输出y3:8.9 y2:7.9 yede:3.5</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><h4 id="1-集合求并集"><a href="#1-集合求并集" class="headerlink" title="1. 集合求并集"></a>1. 集合求并集</h4><p>需要使用<code>set_union</code>函数，<code>#incldue&lt;algorithm&gt;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;<span class="hljs-type">int</span>&gt; s1 = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span> &#125;;<br>set&lt;<span class="hljs-type">int</span>&gt;s2 = &#123; <span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">34</span>,<span class="hljs-number">56</span>,<span class="hljs-number">45</span> &#125;;<br>set&lt;<span class="hljs-type">int</span>&gt;s3;<br><span class="hljs-built_in">set_union</span>(s1.<span class="hljs-built_in">begin</span>(), s1.<span class="hljs-built_in">end</span>(), s2.<span class="hljs-built_in">begin</span>(), s2.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">inserter</span>(s3,s3.<span class="hljs-built_in">begin</span>()));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = s3.<span class="hljs-built_in">begin</span>(); it != s3.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="multiset-多重集合容器"><a href="#multiset-多重集合容器" class="headerlink" title="multiset 多重集合容器"></a>multiset 多重集合容器</h2><ul><li><code>multiset</code>与<code>set</code>一样，也使用红黑树来组织元素数据的，唯一不同的是，<code>multiset</code>允许重复的元素键值插入，而<code>set</code>则不允许。</li><li>需要声明头文件<code>#include&lt;set&gt;</code></li></ul><h3 id="multiset插入"><a href="#multiset插入" class="headerlink" title="multiset插入"></a>multiset插入</h3><p>除了可以插入键值重复的元素，其余与set一致</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">multiset&lt;string&gt;a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;nihao&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;12fe&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++) &#123;<br>  cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//输出1234 1234 12fe nihao</span><br></code></pre></td></tr></table></figure><h3 id="multiset删除"><a href="#multiset删除" class="headerlink" title="multiset删除"></a>multiset删除</h3><p><code>erase()</code>删除与set略微不同，它可以删除<code>multiset</code>对象中的某个迭代器位置上的元素返回下一个元素的迭代器、某段迭代器区间中的元素返回下一个元素迭代器，也可以删除键值等于某个值的<strong>所有重复元素同时返回删除元素的个数</strong>。此外<code>clear()</code>可以清空元素 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">multiset&lt;string&gt;a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;nihao&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;12fe&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1237&quot;</span>);<br><span class="hljs-type">int</span> tmp = a.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&quot;1234&quot;</span>);<span class="hljs-comment">//删除所有&quot;1234&quot;元素，并返回元素总数2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;delete &quot;</span> &lt;&lt; tmp &lt;&lt; <span class="hljs-string">&quot; elements&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">auto</span> it=a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>());<span class="hljs-comment">//删除第一个元素，返回下一个元素的迭代</span><br>cout &lt;&lt; *it &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++) &#123;<br>  cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p><code>find()</code>与set中类似，若找到返回该元素的迭代器位置（若元素存在重复，返回第一个重复元素迭代器位置），未找到返回<code>end()</code>迭代器位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">multiset&lt;string&gt;a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;nihao&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;1237&quot;</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;12fe&quot;</span>);<br><span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;1234&quot;</span>);<span class="hljs-comment">//找到&quot;1234&quot;返回第一个&quot;1234&quot;的位置</span><br>cout &lt;&lt; *it &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="map映照容器"><a href="#map映照容器" class="headerlink" title="map映照容器"></a>map映照容器</h2><ul><li>元素数据由一个键值(key)和一个映照数据(value)组成的，键值与映照数据之间具有一一映照的关系。</li><li>采用红黑树来实现的，插入元素的键值<strong>不允许重复</strong>，比较函数只对元素的键值进行比较，元素的各项数据可通过键值检索出来。<code>map</code> 与 <code>set</code>采用的都是红黑树的数据结构，用法基本相似。</li><li>使用需要包括<code>#include&lt;map&gt;</code></li></ul><h3 id="创建、插入和遍历"><a href="#创建、插入和遍历" class="headerlink" title="创建、插入和遍历"></a>创建、插入和遍历</h3><p>创建时key和value需要自己定义，比较规则缺省为key的由小到大顺序插入红黑树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 构造函数初始化</span><br>std::map&lt;std::string, <span class="hljs-type">int</span>&gt; m&#123;&#123;<span class="hljs-string">&quot;CPU&quot;</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-string">&quot;GPU&quot;</span>, <span class="hljs-number">15</span>&#125;, &#123;<span class="hljs-string">&quot;RAM&quot;</span>, <span class="hljs-number">20</span>&#125;&#125;;<br><br><span class="hljs-comment">// 插入数值完成初始化</span><br>std::map&lt;std::string, <span class="hljs-type">float</span>&gt; a;<br>a[<span class="hljs-string">&quot;yede&quot;</span>] = <span class="hljs-number">8.9</span>;<br>a[<span class="hljs-string">&quot;nide&quot;</span>] = <span class="hljs-number">34.5</span>;<br>a[<span class="hljs-string">&quot;hello&quot;</span>] = <span class="hljs-number">4.6</span>;<br><br><span class="hljs-comment">// 两种遍历方法</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [key, value] : m)<br>std::cout &lt;&lt; <span class="hljs-string">&#x27;[&#x27;</span> &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span> &lt;&lt; value &lt;&lt; <span class="hljs-string">&quot;; &quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++) &#123;<span class="hljs-comment">//这里使用auto也可以使用map&lt;string, float&gt;::iterator</span><br>  <span class="hljs-comment">//(*it)的括号是不可省略的，否则相当于*(it.first)，原因考虑优先级</span><br>  cout &lt;&lt; (*it).first &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; (*it).second &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中已包含了前向遍历的方法，map容器还可以通过反向迭代器，进行反向遍历map元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">map&lt;string, <span class="hljs-type">float</span>&gt; a;<br>a[<span class="hljs-string">&quot;yede&quot;</span>] = <span class="hljs-number">8.9</span>;<br>a[<span class="hljs-string">&quot;nide&quot;</span>] = <span class="hljs-number">34.5</span>;<br>a[<span class="hljs-string">&quot;hello&quot;</span>] = <span class="hljs-number">4.6</span>;<br>map&lt;string, <span class="hljs-type">float</span>&gt;::reverse_iterator it;<br><span class="hljs-keyword">for</span> (it = a.<span class="hljs-built_in">rbegin</span>(); it != a.<span class="hljs-built_in">rend</span>(); it++) &#123;<br>  cout &lt;&lt; (*it).first &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; (*it).second &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>与set类似，<code>erase()</code>可以删除某个迭代器上的元素，等于某个键值的元素，一个迭代器区间上的所有元素。使用<code>clear()</code>清空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">map&lt;string, <span class="hljs-type">float</span>&gt; a;<br>a[<span class="hljs-string">&quot;yede&quot;</span>] = <span class="hljs-number">8.9</span>;<br>a[<span class="hljs-string">&quot;nide&quot;</span>] = <span class="hljs-number">34.5</span>;<br>a[<span class="hljs-string">&quot;hello&quot;</span>] = <span class="hljs-number">4.6</span>;<br>a.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&quot;nide&quot;</span>);<span class="hljs-comment">//删除键值为nide的元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++) &#123;<br>  cout &lt;&lt; (*it).first &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; (*it).second &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//输出为hello : 4.6 yede : 8.9</span><br></code></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p><code>find()</code>方法用于搜索某个键值，若找到返回键值所在迭代器的位置，否则返回<code>end()</code>位置，搜索效率极高</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">map&lt;string, <span class="hljs-type">float</span>&gt; a;<br>a[<span class="hljs-string">&quot;yede&quot;</span>] = <span class="hljs-number">8.9</span>;<br>a[<span class="hljs-string">&quot;nide&quot;</span>] = <span class="hljs-number">34.5</span>;<br>a[<span class="hljs-string">&quot;hello&quot;</span>] = <span class="hljs-number">4.6</span>;<br><span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;nide&quot;</span>);<br><span class="hljs-keyword">if</span> (it != a.<span class="hljs-built_in">end</span>())<br>  cout &lt;&lt; <span class="hljs-string">&quot;find&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>  cout &lt;&lt; <span class="hljs-string">&quot;not found it &quot;</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="自定义比较函数-1"><a href="#自定义比较函数-1" class="headerlink" title="自定义比较函数"></a>自定义比较函数</h3><p>与set类似，比较函数缺省时按照升序排列，有两种自定义比较规则的方式</p><ol><li>元素不是结构体，创建结构体，在结构体中重载()<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myComp</span> &#123;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; a, <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; b)</span><span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">if</span> (a != b)<br><span class="hljs-keyword">return</span> a &gt; b; <br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>, myComp&gt; m; <br>m[<span class="hljs-number">25</span>] = <span class="hljs-string">&#x27;m&#x27;</span>;<br>m[<span class="hljs-number">28</span>] = <span class="hljs-string">&#x27;k&#x27;</span>;<br>m[<span class="hljs-number">10</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>m[<span class="hljs-number">30</span>] = <span class="hljs-string">&#x27;a&#x27;</span>; <br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>, myComp&gt;::iterator it;<br><span class="hljs-keyword">for</span> (it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; (*it).first &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; (*it).second &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>元素是结构体，在结构体中实现比较函数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br>string name;<br><span class="hljs-type">float</span> score;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Info &amp;a)<span class="hljs-type">const</span> &#123;<br><span class="hljs-keyword">return</span> a.score &lt; score;<span class="hljs-comment">//按降序排列</span><br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>map&lt;Info,<span class="hljs-type">int</span>&gt; m; <br>Info in;<br>in.score = <span class="hljs-number">60</span>;<br>in.name = <span class="hljs-string">&quot;jack&quot;</span>;<br>m[in] = <span class="hljs-number">25</span>;<br>in.score = <span class="hljs-number">70</span>;<br>in.name = <span class="hljs-string">&quot;yede&quot;</span>;<br>m[in] = <span class="hljs-number">40</span>;<br>in.score = <span class="hljs-number">40</span>;<br>in.name = <span class="hljs-string">&quot;nide&quot;</span>;<br>m[in] = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; (*it).second &lt;&lt; <span class="hljs-string">&quot; : &quot;</span>;<br>cout &lt;&lt; ((*it).first).name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ((*it).first).score &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">// 40 : yede 70</span><br><span class="hljs-comment">// 25 : jack 60</span><br><span class="hljs-comment">// 20 : nide 40</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="multimap-多重映照容器"><a href="#multimap-多重映照容器" class="headerlink" title="multimap 多重映照容器"></a>multimap 多重映照容器</h2><ul><li><code>multimap</code>允许插入重复键值的元素</li><li><code>multimap</code>的元素插入、删除、查找都与<code>map</code>不相同</li><li>使用需要<code>#include&lt;map&gt;</code></li></ul><h3 id="multimap创建，插入"><a href="#multimap创建，插入" class="headerlink" title="multimap创建，插入"></a>multimap创建，插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">multimap&lt;string, <span class="hljs-type">double</span>&gt;m;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;nide&quot;</span>, <span class="hljs-number">500</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">600</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;wide&quot;</span>, <span class="hljs-number">450</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;wide&quot;</span>, <span class="hljs-number">450</span>));<span class="hljs-comment">//重复插入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++)<br>  cout &lt;&lt; (*it).first &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; (*it).second &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p>与multiset类似，对于有重复的键值，删除操作会将其全部删除返回删除元素的数量；其他与map一直也可以删除某个迭代器位置上的元素，一个区间上的元素等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">multimap&lt;string, <span class="hljs-type">double</span>&gt;m;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;nide&quot;</span>, <span class="hljs-number">500</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">600</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;wide&quot;</span>, <span class="hljs-number">450</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;wide&quot;</span>, <span class="hljs-number">450</span>));<span class="hljs-comment">//重复插入</span><br><span class="hljs-type">int</span> a=m.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&quot;wide&quot;</span>);<span class="hljs-comment">//删除所有键值为wide的元素（哪怕value不一样）返回2</span><br>cout &lt;&lt; a &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++)<br>  cout &lt;&lt; (*it).first &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; (*it).second &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><p><code>find()</code>返回重复键值中的第一个元素的迭代器位置，如果没有找到该键值，则返回end()迭代器位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">multimap&lt;string, <span class="hljs-type">double</span>&gt;m;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;nide&quot;</span>, <span class="hljs-number">500</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">600</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;wide&quot;</span>, <span class="hljs-number">500</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">double</span>&gt;(<span class="hljs-string">&quot;wide&quot;</span>, <span class="hljs-number">450</span>));<span class="hljs-comment">//重复插入</span><br><span class="hljs-keyword">auto</span> f = m.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;wide&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="deque使用"><a href="#deque使用" class="headerlink" title="deque使用"></a>deque使用</h2><ul><li>与<code>vector</code>类似采用线性表顺序存储结构，不同的是，<code>deque</code>采用分块的线性存储结构来存储数据</li><li>每块大小一般512字节，称为一个<code>deque</code>块，所有<code>deque</code>块使用一个<code>Map</code>块进行管理，每个<code>Map</code>数据项记录各个<code>deque</code>块首地址</li><li><code>deque</code>在首尾插入或删除的时间复杂度是常数</li><li>考虑到容器元素的内存分配策略和操作的性能时，<code>deque</code> 相对于 <code>vector</code> 更有优势</li><li>使用需要<code>#include&lt;deque&gt;</code></li></ul><h3 id="创建deque对象"><a href="#创建deque对象" class="headerlink" title="创建deque对象"></a>创建deque对象</h3><p>三种创建方式，与<code>vector</code>类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">deque&lt;<span class="hljs-type">int</span>&gt; a;<br><span class="hljs-function">deque&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//创建10个int型元素deque对象b</span><br><span class="hljs-function">deque&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">d</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">8.5</span>)</span></span>;<span class="hljs-comment">//创建10个double型元素的deque对象并初始化为8.5</span><br></code></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><div class="note note-warning">            <p>参考资料中指明从<strong>头部和中间</strong>插入元素，不会增加新元素，只将原有的元素覆盖；使用<code>push_back()</code>从尾部插入元素，会不断扩张队列。不理解</p>          </div> <p>使用<code>push_back()</code>方法从尾部插入元素，使用<code>push_front()</code>从头部插入元素，也可以使用<code>insert()</code>插入元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">deque&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//从尾部插入两个元素</span><br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">//从头部插入元素</span><br>q.<span class="hljs-built_in">insert</span>(q.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>, <span class="hljs-number">90</span>);<span class="hljs-comment">//在第5个元素前插入元素90</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q.<span class="hljs-built_in">size</span>(); i++)<span class="hljs-comment">//以数组方式输出元素</span><br>cout &lt;&lt; q[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><ol><li>使用下标访问与数组相同，参考上段代码</li><li>以前向迭代器方式遍历<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">deque&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//从尾部插入两个元素</span><br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">//从头部插入元素</span><br>q.<span class="hljs-built_in">insert</span>(q.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>, <span class="hljs-number">90</span>);<span class="hljs-comment">//在第5个元素前插入元素90</span><br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::iterator i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure></li><li>以反向迭代器方式遍历<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::reverse_iterator i = q.<span class="hljs-built_in">rbegin</span>(); i != q.<span class="hljs-built_in">rend</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>可以从队列的首部，尾部，中部删除元素，并可以清空容器，</p><ol><li>使用<code>pop_front()</code>元素从头部删除元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">deque&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">20</span>); <br>q.<span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//从头部删除元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-comment">//输出10 1 2 5</span><br></code></pre></td></tr></table></figure></li><li>使用<code>pop_back()</code>方法从尾部删除元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">deque&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">20</span>); <br>q.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//从尾部删除元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-comment">// 输出20 10 1 2</span><br></code></pre></td></tr></table></figure></li><li>使用<code>erase()</code>方法从中间删除元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">20</span>); <br>q.<span class="hljs-built_in">erase</span>(q.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">3</span>);<span class="hljs-comment">//删除第4个元素2</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-comment">//输出 20 10 1 5</span><br></code></pre></td></tr></table></figure></li><li>使用<code>clear()</code>方法清空<code>deque</code>对象</li></ol><h2 id="list双向链表容器"><a href="#list双向链表容器" class="headerlink" title="list双向链表容器"></a>list双向链表容器</h2><ul><li><code>list</code>数据结构为双向循环链表，每个节点有前驱指针，数据，后继指针</li><li>对链表的任意位置元素进行插入，删除和查找都很快</li><li>list对象节点不要求在一段连续的内存中，所以对于迭代器只能使用<code>++</code>或者<code>--</code>进行移动</li><li>使用需要<code>#incldue&lt;list&gt;</code></li></ul><h3 id="创建list对象"><a href="#创建list对象" class="headerlink" title="创建list对象"></a>创建list对象</h3><p>与<code>vector</code>容器类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; l;<span class="hljs-comment">//创建空链表</span><br><span class="hljs-function">list&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">l</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//创建一个具有10个元素的链表</span><br></code></pre></td></tr></table></figure><h3 id="插入与遍历"><a href="#插入与遍历" class="headerlink" title="插入与遍历"></a>插入与遍历</h3><p>有三种方法进行插入，三种方法插入后链表自动扩张</p><ol><li>使用<code>push_back()</code>从尾部插入元素</li><li><code>push_front()</code>从首部插入元素</li><li><code>insert()</code>在迭代器位置插入元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>cout &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<span class="hljs-comment">//输出链表大小方便与后续对比</span><br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>cout &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">20</span>);<br>q.<span class="hljs-built_in">insert</span>(++q.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">90</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 20 90 10 1 5</span><br></code></pre></td></tr></table></figure>遍历可以使用前向迭代器对链表遍历，也可以使用反向迭代器遍历与之前的大部分遍历相同，不再赘述</li></ol><h3 id="元素删除-2"><a href="#元素删除-2" class="headerlink" title="元素删除"></a>元素删除</h3><ol><li>使用<code>remove()</code>方法删除链表中的一个元素，值相同的元素都会被删除</li><li>使用<code>pop_back()</code>删除链尾元素，或使用<code>pop_front</code>删除链首元素</li><li>使用<code>erase()</code>删除迭代器位置上的元素</li><li>使用<code>clear()</code>方法清空链表<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-comment">//先构建链表</span><br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">34</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">20</span>);<br>q.<span class="hljs-built_in">insert</span>(++q.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">90</span>);<br><br>q.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//删除尾部元素34</span><br>q.<span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//删除首部元素20</span><br>q.<span class="hljs-built_in">remove</span>(<span class="hljs-number">5</span>);<span class="hljs-comment">//删除所有为5的元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>q.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空链表</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="元素查找"><a href="#元素查找" class="headerlink" title="元素查找"></a>元素查找</h3><p>使用<code>find()</code>查找算法（不是链表的成员），查到返回迭代器位置，否则返回<code>end()</code>迭代器，使用需要<code>#incldue&lt;algorithm&gt;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-comment">//先构建链表</span><br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">34</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>);<br><span class="hljs-keyword">if</span> (it != q.<span class="hljs-built_in">end</span>())<br>cout &lt;&lt; <span class="hljs-string">&quot;find&quot;</span>&lt;&lt;endl;<br><span class="hljs-comment">// 输出find</span><br></code></pre></td></tr></table></figure><h3 id="元素排序"><a href="#元素排序" class="headerlink" title="元素排序"></a>元素排序</h3><p>使用<code>sort()</code>方法（不是<code>algorithm</code>中的<code>sort()</code>）对链表元素进行升序排列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">16</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">34</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br>q.<span class="hljs-built_in">sort</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-comment">// 输出1 10 16 34</span><br></code></pre></td></tr></table></figure><h3 id="删除连续重复元素"><a href="#删除连续重复元素" class="headerlink" title="删除连续重复元素"></a>删除连续重复元素</h3><p><code>unique()</code>方法可以删除<strong>连续重复</strong>(与重复含义不同)的元素只保留一个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">16</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">9</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">16</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">16</span>);<br>q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">34</span>);<br>q.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//执行删除重复之前为10 1 16 9 16 16 34</span><br>q.<span class="hljs-built_in">unique</span>();<span class="hljs-comment">//删除之后为10 1 16 9 16 34</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = q.<span class="hljs-built_in">begin</span>(); i != q.<span class="hljs-built_in">end</span>(); i++)<br>cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="bitset位集合容器"><a href="#bitset位集合容器" class="headerlink" title="bitset位集合容器"></a>bitset位集合容器</h2><p><a href="https://en.cppreference.com/w/cpp/utility/bitset">参考资料</a></p><ul><li>每个元素只占一个bit位，取值为0或1</li><li>使用需要<code>#include&lt;bitset&gt;</code></li><li>第0位是最低位，第n位是最高位</li></ul><table><thead><tr><th>方 法</th><th>功能</th></tr></thead><tbody><tr><td>b.any()</td><td>b 中是否存在置为 1 的二进制位</td></tr><tr><td>b.none()</td><td>b 中不存在置为 1 的二进制位</td></tr><tr><td>b.count()</td><td>b 中置为 1 的二进制位的个数</td></tr><tr><td>b.size()</td><td>b 中二进制位的个数</td></tr><tr><td>b.test(pos)</td><td>b 中在 pos 处的二进制位是否为 1</td></tr><tr><td>b.set()</td><td>把 b 中所有二进制位都置为 1</td></tr><tr><td>b..set(pos)</td><td>把 b 中在 pos 处的二进制位置为 1</td></tr><tr><td>b.reset()</td><td>把 b 中所有二进制位都置为 0</td></tr><tr><td>b.reset(pos)</td><td>把 b 中在 pos 处的二进制位置为 0</td></tr><tr><td>b.flip()</td><td>把 b 中所有二进制位逐位取反</td></tr><tr><td>b.flip(pos)</td><td>把 b 中在 pos 处的二进制位取反</td></tr><tr><td>b.to_ulong()</td><td>用 b 中同样的二进制位返回一个 unsigned long 值</td></tr><tr><td>os &lt;&lt; b</td><td>把 b 中的位集输出到 os 流</td></tr></tbody></table><h3 id="创建bitset对象"><a href="#创建bitset对象" class="headerlink" title="创建bitset对象"></a>创建bitset对象</h3><p>创建bitset对象时，必须指定容器大小，且大小一旦指定就不能修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">bitset&lt;1000&gt; b;<br>cout &lt;&lt; b;<br><span class="hljs-comment">//输出1000个0</span><br></code></pre></td></tr></table></figure><h3 id="为元素赋值"><a href="#为元素赋值" class="headerlink" title="为元素赋值"></a>为元素赋值</h3><ol><li>使用下标<code>b[0]=1;</code></li><li>使用<code>set()</code>方法<code>b.set();</code>将所有元素设置为1</li><li>使用<code>set(pos)</code>方法<code>b.set(1,1);</code>将第2个元素设置为1</li><li>使用<code>reset(pos)</code>方法<code>b.reset(3)</code>将第4个元素设置为0</li></ol><h3 id="元素输出"><a href="#元素输出" class="headerlink" title="元素输出"></a>元素输出</h3><ol><li>使用下标输出，与数组类似</li><li>向输出流输出全部元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">bitset&lt;10&gt; b;<br>cout &lt;&lt; b;<br><span class="hljs-comment">// 输出0000000000</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="stack堆栈容器"><a href="#stack堆栈容器" class="headerlink" title="stack堆栈容器"></a>stack堆栈容器</h2><ul><li>后进先出（LIFO）线性表，插入和删除元素都只在表的一端进行。</li><li>使用需要<code>#include&lt;stack&gt;</code></li><li>只提供入栈、出栈、栈顶元素访问和判断是否为空等几种方法。<ul><li><code>push()</code>方法将元素入栈；</li><li><code>pop()</code>方法出栈；</li><li><code>top()</code>方法访问栈顶元素；</li><li><code>empty()</code>方法判断堆栈是否为空，为空的，返回1，否则返回0。</li><li><code>size()</code>方法返回当前堆栈中有几个元素。</li></ul></li></ul><h2 id="queue队列容器"><a href="#queue队列容器" class="headerlink" title="queue队列容器"></a>queue队列容器</h2><ul><li>先进先出（FIFO）线性存储表，插入只能在队尾，删除只能在队首</li><li>使用需要<code>#include&lt;queue&gt;</code></li><li>成员函数与栈（stack）类似<ul><li><code>push()</code>入队</li><li><code>pop()</code>出队</li><li><code>front()</code>读取队首元素</li><li><code>back()</code>读取队尾元素</li><li><code>empty()</code>队列是否为空</li><li><code>size()</code>获取元素数目<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">queue&lt;string&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;first&quot;</span>);<span class="hljs-comment">//队尾插入元素</span><br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;second&quot;</span>);<br>cout&lt;&lt;q.<span class="hljs-built_in">front</span>()&lt;&lt;endl;<span class="hljs-comment">//输出队首元素first</span><br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//队首出队</span><br>cout&lt;&lt;q.<span class="hljs-built_in">front</span>()&lt;&lt;endl;<span class="hljs-comment">//输出second</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="priority-queue优先队列容器"><a href="#priority-queue优先队列容器" class="headerlink" title="priority_queue优先队列容器"></a>priority_queue优先队列容器</h2><ul><li>与<code>queue</code>一样，只能队尾插入元素，队首删除，不同在于队列中最大的元素总是位于队首。表现上相当于给队列中的元素由大到小排序</li><li>元素比较规则默认为由大到小，可以自定义比较规则</li><li>使用需要<code>#include&lt;queue&gt;</code>，使用方式除了比较规则外与<code>queue</code>一致</li></ul><h3 id="自定义比较规则"><a href="#自定义比较规则" class="headerlink" title="自定义比较规则"></a>自定义比较规则</h3><ol><li>元素类型为结构体，重载<code>&lt;</code>修改队列优先性（也可以按照2的方法）<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br>string name;<br><span class="hljs-type">int</span> va;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Info&amp; a)<span class="hljs-type">const</span> &#123;<br><span class="hljs-keyword">return</span> a.va &lt; va;<span class="hljs-comment">///按va由小到大排列。如果要由大到小排列，使用“&gt;”号即可</span><br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>priority_queue&lt;Info&gt;q;<br>Info a;<br>a.name = <span class="hljs-string">&quot;nihao&quot;</span>;<br>a.va = <span class="hljs-number">40</span>;<br>q.<span class="hljs-built_in">push</span>(a);<br>a.name=<span class="hljs-string">&quot;yede&quot;</span>;<br>a.va = <span class="hljs-number">30</span>;<br>q.<span class="hljs-built_in">push</span>(a);<br>a.name = <span class="hljs-string">&quot;tade&quot;</span>;<br>a.va = <span class="hljs-number">50</span>;<br>q.<span class="hljs-built_in">push</span>(a);<br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())&#123;<br>cout &lt;&lt; q.<span class="hljs-built_in">top</span>().name &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; q.<span class="hljs-built_in">top</span>().va &lt;&lt; endl;<br>q.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><span class="hljs-comment">// 输出为</span><br><span class="hljs-comment">// yede : 30</span><br><span class="hljs-comment">// nihao : 40</span><br><span class="hljs-comment">// tade : 50</span><br></code></pre></td></tr></table></figure></li><li>元素不是结构体类型，重载<code>()</code>定义优先级<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">com</span>&#123;<br><span class="hljs-comment">//参数类型需要与实例化的类型一致</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; a, <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; b)</span><span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> a &gt; b;<span class="hljs-comment">////由小到大排列采用“&gt;”号；如果要由大到小排列，则采用“&lt;”号</span><br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-comment">//定义优先队列，元素类型为 Info 结构体，显式说明内部结构是 vector</span><br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, com&gt;q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">40</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">24</span>);<br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; q.<span class="hljs-built_in">top</span>()&lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>q.<span class="hljs-built_in">pop</span>();<br>&#125;<br><br>&#125;<br><span class="hljs-comment">// 输出为3 20 24 40</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="cmath使用方式"><a href="#cmath使用方式" class="headerlink" title="cmath使用方式"></a>cmath使用方式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 返回x的绝对值</span><br><span class="hljs-built_in">fabs</span>(x)<br><br><span class="hljs-comment">// 乘方函数，返回a的b次方</span><br><span class="hljs-built_in">pow</span>(a,b)<br><br><span class="hljs-comment">//返回e的x次方</span><br><span class="hljs-built_in">exp</span>(x);<br><br><span class="hljs-comment">// 开方，返回根号下x</span><br><span class="hljs-built_in">sqrt</span>(x);<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://c.biancheng.net/view/6675.html">C++STL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://cplusplus.com/reference/stl/">C++STL标准手册</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://en.cppreference.com/w/">cppreference</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>C++</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++多线程</title>
    <link href="/2023/02/19/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/02/19/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>使用线程需要<code>include&lt;thread&gt;</code></p><h2 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h2><p>构造thread对象，可填以下参数：</p><ol><li>使用lambda表达式</li><li>使用函数对象，需要注意传递形式，直接传入<code>background_task()</code>将出现错误（传递临时变量将被认为是函数声明）</li><li>有函数调用符类型的实例</li><li>函数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">background_task</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;nihao&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_some_work</span><span class="hljs-params">()</span></span>&#123;<br>  cout&lt;&lt;<span class="hljs-string">&quot;do_some_work&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  background_task f;<br>  <span class="hljs-comment">// 下述四种选择一种即可</span><br>  <span class="hljs-comment">// lambda表达式</span><br>  <span class="hljs-function">thread <span class="hljs-title">my_thread</span><span class="hljs-params">([] &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">      cout &lt;&lt; <span class="hljs-string">&quot;nihao&quot;</span> &lt;&lt; endl;</span></span><br><span class="hljs-params"><span class="hljs-function">      cout &lt;&lt; <span class="hljs-string">&quot;hello2&quot;</span> &lt;&lt; endl;</span></span><br><span class="hljs-params"><span class="hljs-function">  &#125;)</span></span>;<br>  <span class="hljs-comment">// 函数</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_some_work</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function">thread <span class="hljs-title">my_thread</span><span class="hljs-params">(do_some_work)</span></span>;<br>  <span class="hljs-comment">// 有函数调用符类型的实例</span><br>  background_task f;<br>  <span class="hljs-function">thread <span class="hljs-title">my_thread</span><span class="hljs-params">(f)</span></span>;<br>  <span class="hljs-comment">// 函数对象</span><br>  <span class="hljs-function">thread <span class="hljs-title">my_thread</span><span class="hljs-params">((background_task()))</span></span>;  <br>  thread my_thread&#123;<span class="hljs-built_in">background_task</span>()&#125;;   <br><br>  my_thread.<span class="hljs-built_in">join</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="等待线程"><a href="#等待线程" class="headerlink" title="等待线程"></a>等待线程</h2><p>使用<code>join()</code>方法，清理线程相关的存储部分，<code>thread</code>对象将不再与已经完成的线程有任何关联。故只能对一个线程使用一次<code>join()</code>，可使用<code>joinable()</code>判断某个线程是否使用过<code>join()</code></p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ol><li>传递引用。在线程中直接传递引用，<code>thread</code>的构造函数会无视函数期待的参数类型，并盲目的拷贝已提供的变量，传递给函数的参数是<code>data</code>变量内部拷贝的引用，而非数据本身<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> widget_id;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> widget_data;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_data_for_widget</span><span class="hljs-params">(widget_id w, widget_data&amp; data)</span> </span>&#123;<br>data = <span class="hljs-number">4</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">oops_again</span><span class="hljs-params">(widget_id w)</span></span><br><span class="hljs-function"></span>&#123;<br>widget_data data=<span class="hljs-number">10</span>;<br>  <span class="hljs-comment">// 使用ref将参数转换成引用的形式，从而可将线程的调用改为以下形式：</span><br>  <span class="hljs-comment">// thread t(update_data_for_widget, w, ref(data));</span><br><span class="hljs-function">thread <span class="hljs-title">t</span><span class="hljs-params">(update_data_for_widget, w, data)</span></span>;<span class="hljs-comment">//直接使用该语句将会报错</span><br>cout &lt;&lt; <span class="hljs-string">&quot; current data: &quot;</span> &lt;&lt; data &lt;&lt; endl;;<br>t.<span class="hljs-built_in">join</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot; after thread data: &quot;</span> &lt;&lt; data &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">oops_again</span>(<span class="hljs-number">5</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>获取线程id和CPU最多的核芯</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">cout &lt;&lt; <span class="hljs-string">&quot;hardware_concurrency: &quot;</span> &lt;&lt; thread::<span class="hljs-built_in">hardware_concurrency</span>() &lt;&lt; endl;<br>cout &lt;&lt;<span class="hljs-string">&quot;current thread_id: &quot;</span> &lt;&lt; this_thread::<span class="hljs-built_in">get_id</span>() &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h2><p>需要<code>#include&lt;metux&gt;</code>,通过实例化metux对象创建互斥量，调用成员函数lock()和unlock()进行上锁和解锁（注意每个函数出口都要unlock()包括异常退出）；也可以使用模板类lock_guard，在构造函数中提供已锁的变量在析构时解锁<br>metux的示例程序，在两个函数中对数据some_list的访问是互斥的，当函数返回的是保护数据的指针或引用时，会破坏对数据的保护，因此切勿将受保护数据的指针或引用传递到互斥锁作用域之外</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>std::list&lt;<span class="hljs-type">int</span>&gt; some_list;<br>std::mutex some_mutex;   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_to_list</span><span class="hljs-params">(<span class="hljs-type">int</span> new_value)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;current thread: &quot;</span> &lt;&lt; std::this_thread::<span class="hljs-built_in">get_id</span>() &lt;&lt; std::endl;<br><span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">guard</span><span class="hljs-params">(some_mutex)</span></span>;<br>some_list.<span class="hljs-built_in">push_back</span>(new_value);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ele : some_list) &#123;<br>std::cout &lt;&lt; ele &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">list_contains</span><span class="hljs-params">(<span class="hljs-type">int</span> value_to_find)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;current thread: &quot;</span> &lt;&lt; std::this_thread::<span class="hljs-built_in">get_id</span>() &lt;&lt; std::endl;<br><span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">guard</span><span class="hljs-params">(some_mutex)</span></span>; <br><span class="hljs-type">bool</span> tmp = std::<span class="hljs-built_in">find</span>(some_list.<span class="hljs-built_in">begin</span>(), some_list.<span class="hljs-built_in">end</span>(), value_to_find) != some_list.<span class="hljs-built_in">end</span>();<br>std::cout &lt;&lt; tmp;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(add_to_list,<span class="hljs-number">13</span>)</span></span>;<br><span class="hljs-function">std::thread <span class="hljs-title">t2</span><span class="hljs-params">(add_to_list, <span class="hljs-number">114</span>)</span></span>;<br><span class="hljs-function">std::thread <span class="hljs-title">t3</span><span class="hljs-params">(list_contains, <span class="hljs-number">13</span>)</span></span>;<br>t1.<span class="hljs-built_in">join</span>();<br>t2.<span class="hljs-built_in">join</span>();<br>t3.<span class="hljs-built_in">join</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bookstack.cn/read/Cpp_Concurrency_In_Action/content-chapter2-2.1-chinese.md">C++ Concurrency In Action</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django学习笔记</title>
    <link href="/2023/01/29/django%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/01/29/django%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><code>django-admin startproject &lt;pro-name&gt;</code></p><p>默认项目结构说明，创建一个first项目</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">first</span><br>  manage.<span class="hljs-keyword">py</span>             项目管理，启动项目，创建app，数据管理等<br>  <span class="hljs-keyword">first</span><br>    __init__.<span class="hljs-keyword">py</span><br>    settings.<span class="hljs-keyword">py</span>         项目的配置文件<br>    urls.<span class="hljs-keyword">py</span>             url和函数的对应关系<br>    wsgi.<span class="hljs-keyword">py</span>             接收网络请求<br>    asgi.<span class="hljs-keyword">py</span>             asynchronization，同上，可接受异步<br></code></pre></td></tr></table></figure><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p><code>python manage.py startapp &lt;app_name&gt;</code>，创建之后需要<strong>注册</strong><code>&lt;app_name&gt;</code>使app生效<br>在settings.py中的<code>INSTALLED_APPS</code>注册该app，实例<br>为first项目创建一个名为app01的app，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├─app01<br>│  │  admin<span class="hljs-selector-class">.py</span>          后台管理<br>│  │  apps<span class="hljs-selector-class">.py</span>           app启动类<br>│  │  models<span class="hljs-selector-class">.py</span>         对数据库进行操作<br>│  │  tests<span class="hljs-selector-class">.py</span>          单元测试<br>│  │  views<span class="hljs-selector-class">.py</span>          视图，放置函数<br>│  │  __init__<span class="hljs-selector-class">.py</span><br>│  │<br>│  └─migrations         修改数据库时做记录<br>│<br>└─first<br>    │  asgi<span class="hljs-selector-class">.py</span><br>    │  settings<span class="hljs-selector-class">.py</span><br>    │  urls<span class="hljs-selector-class">.py</span><br>    │  wsgi<span class="hljs-selector-class">.py</span><br>    └─ __init__.py<br></code></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p><code>python manage.py runserver</code></p><h2 id="静态模板"><a href="#静态模板" class="headerlink" title="静态模板"></a>静态模板</h2><p>如果在<code>settings.py</code>中配置过<code>&#39;DIRS&#39;: [os.path.join(BASE_DIR,&#39;templates&#39;)]</code>,则根据配置位置寻找templates中的静态网页<br>缺省情况下在一个app文件夹下添加一个templates目录，放置静态网页（html文件），在app中引入该网页时，根据app的注册顺序进行寻找</p><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>在app目录下创建static目录存放css,js,img资源，以供在静态网页中引入<br>在网页中引入时，推荐对静态资源路径统一配置(当静态资源位置移动时，只需要<strong>修改settings.py文件中的静态资源路径</strong>即可)，方法如下：<br>在html网页开头添加<code>&#123;% load static %&#125;</code>以供载入<br>引入时路径可写为(以引入img标签为例)<code>src=&quot;&#123;% static 'img/1.png' %&#125;&quot;</code></p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>从函数中向页面传参，包括变量，列表，字典等数据类型，即为<code>return render(req,&#39;user_add.html&#39; , &#123;&#39;n1&#39;:name,&#39;n2&#39;:test_list,&#39;n3&#39;:test_dic&#125;)</code>中的render()函数添加第三个参数传参<br>支持for循环<br>for循环中有一些内置变量如<code>&#123;&#123; forloop.counter &#125;&#125;</code>整型，计数器,<code>&#123;&#123;forloop.counter0&#125;&#125;</code>,<code>&#123;&#123;forloop.first&#125;&#125;</code>布尔值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 输出n3字典中的键和值 --&gt;</span><br>&#123;% for k,v in n3.items %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;k&#125;&#125;=&#123;&#123;v&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>if语句，<strong>注意：</strong><code>==</code>两侧需要空格，否则报错</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% if n1 == &quot;ydx&quot; %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>n1是ydx<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;% elif n1 == &#x27;ydx2&#x27; %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>n1是ydx2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;% else %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>n1不是ydx<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>django含由csrf_token验证，在提交post请求时需要带上该token否则出错，实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&#x27;/login/&#x27;</span>&gt;</span>.<br>  &#123;% csrf_token %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="重定向到新页面"><a href="#重定向到新页面" class="headerlink" title="重定向到新页面"></a>重定向到新页面</h2><p>使用<code>return redirect(&#39;&lt;新页面网址&gt;&#39;)</code>，将该页面的url返回给浏览器，再由浏览器访问该网站、</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>不需要使用pymysql对mysql进行操作，自带有orm框架</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在settings.py中修改数据库的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>  <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>    <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>    <span class="hljs-string">&#x27;NAME&#x27;</span>: BASE_DIR / <span class="hljs-string">&#x27;db.sqlite3&#x27;</span>,<br>    <span class="hljs-string">&#x27;USER&#x27;</span>:<span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;PASSWORD&#x27;</span>:<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    <span class="hljs-string">&#x27;HOST&#x27;</span>:<span class="hljs-string">&#x27;123.&#x27;</span>,<br>    <span class="hljs-string">&#x27;PORT&#x27;</span>:<span class="hljs-number">3306</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>在某个应用(需要该应用提前注册)的models.py中写入一个类，表示一个表（示例中的类表示及其等价的sql语句）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>  name= models.CharField(<span class="hljs-number">32</span>)<br>  password=models.CharField(<span class="hljs-number">64</span>)<br>  age=models.IntegerField()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">create table app01_userinfo(</span><br><span class="hljs-string">  id bigint auto_increment primary key,</span><br><span class="hljs-string">  name varchar(32),</span><br><span class="hljs-string">  password varchar(64),</span><br><span class="hljs-string">  age int,</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>类构建完成后，执行以下语句，以类为基础创建该表，执行一次将重新构建一次<br><code>python manage.py makemigrations</code><br><code>python manage.py migrate</code><br>在原表中有数据时增加列，执行第一句代码，可以选择两种方式增加列<br>可以设置默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age=models.IntegerField(default=<span class="hljs-number">2</span>)<br>data=models.IntegerField(null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li><p>添加数据<br><code>UserInfo.objects.create(name=&#39;yede&#39;,password=&#39;124&#39;,age=12)</code><br>获取从html传回的数据，进行校验然后在views.py中插入数据库</p></li><li><p>删除数据<br><code>UserInfo.objects.filter(id=3).delete()</code>删除userinfo表中的id为3的行<br><code>UserInfo.objects.all().delete()</code>删除userinfo表中所有行</p></li><li><p>查询数据<br><code>UserInfo.objects.all()</code>获取到一个queryset类型数据，类似于对象组成的列表<br><code>UserInfo.objects.filter(id=1)</code>筛选符合条件的数据，也是queryset类型<br><code>UserInfo.objects.all(id =1).first()</code>获取上一条中的第一个数据<br>一般在views.py中获取到数据，然后传参给html文件，html文件再使用循环输出数据</p></li><li><p>更改数据<br><code>UserInfo.objects.all().update(password=999)</code>将所有数据的password列改为999</p></li></ul><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p>用于写重复的内容，如导航栏等使用模板较为方便<br>父，可以有多个代码块供继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  &#123;% block css %&#125;&#123;% endblock %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，这是导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  &#123;% block content %&#125;&#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;bar.html&#x27; %&#125;<br>&#123;% block content %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是userbar<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block css %&#125;<br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="Form与ModelForm"><a href="#Form与ModelForm" class="headerlink" title="Form与ModelForm"></a>Form与ModelForm</h2><p>可以理解为将前端的样式等交给后端解决，form可以为指定字段创建widget(如输入框)，在views.py中实例化对象传递给html；modelform功能与form类似，但它是直接对一个model创建widget<br>以下为modelform的一个简易实例<br>在views.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>    model=models.UserInfo<br>    fields=[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addModelForm</span>(<span class="hljs-params">req</span>):<br>  form =UserModelForm()<br>  <span class="hljs-keyword">return</span> render(req,<span class="hljs-string">&#x27;add_use.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;form&#x27;</span>:form&#125;)<br></code></pre></td></tr></table></figure><p>在html中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- label获取name字段在数据库中的verbose --&gt;</span><br>  &#123;&#123;form.name.label&#125;&#125;:&#123;&#123;form.name&#125;&#125;<br><br>  &#123;% for field in form %&#125;<br>    &#123;&#123;field.label&#125;&#125;:&#123;&#123;field&#125;&#125;<br>  &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用modelform后，在html中生成的选择框选项为对象（传递了queryset数据类型），则需要去该对象的定义中重写__str__(self)函数，定义对象的返回字符串</p><p>为标签添加样式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>    model=models.UserInfo<br>    fields=[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]<br>  <span class="hljs-comment"># 为每个标签添加样式</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,*args,**kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">super</span>().__init__(*args,**kwargs)<br>    <span class="hljs-keyword">for</span> name,field <span class="hljs-keyword">in</span> self.fields.items():<br>      field.widget.attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;form-control&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些算法学习的笔记</title>
    <link href="/2023/01/28/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/01/28/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="竞赛寄巧"><a href="#竞赛寄巧" class="headerlink" title="竞赛寄巧"></a>竞赛寄巧</h2><p><code>sync_with_stdio</code>将C++语言和C的输出解绑，提升输出效率，<code>cin.tie(0)</code>将C++输入与C输入解绑，提升输入效率，解绑之后<code>cin</code>与<code>cout</code>速度大幅提升，但不能与<code>scanf</code>和<code>printf</code>混用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>std::cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>使用文件输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-function">ifstream <span class="hljs-title">cin</span><span class="hljs-params">(<span class="hljs-string">&quot;a.in&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="string对象与数值相互转化"><a href="#string对象与数值相互转化" class="headerlink" title="string对象与数值相互转化"></a>string对象与数值相互转化</h2><p>需要<code>#include&lt;sstream&gt;</code>，注意两个自定义的函数，提高转化效率</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//数值转化为string</span><br><span class="hljs-function">string <span class="hljs-title">convertToString</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<br>ostringstream o; <br><span class="hljs-keyword">if</span> (o &lt;&lt; x) <br><span class="hljs-keyword">return</span> o.<span class="hljs-built_in">str</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;conversion error&quot;</span>;<span class="hljs-comment">//if error</span><br>&#125;<br><span class="hljs-comment">//string转化为数值</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">convertFromString</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s)</span> </span>&#123;<br><span class="hljs-function">istringstream <span class="hljs-title">i</span><span class="hljs-params">(s)</span></span>; <br><span class="hljs-type">double</span> x; <br><span class="hljs-keyword">if</span> (i &gt;&gt; x) <br><span class="hljs-keyword">return</span> x; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<span class="hljs-comment">//if error</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s = <span class="hljs-built_in">convertToString</span>(<span class="hljs-number">1947.9</span>);<br><span class="hljs-type">int</span> p = <span class="hljs-built_in">convertFromString</span>(<span class="hljs-string">&quot;2048&quot;</span>) + <span class="hljs-number">4</span>;<br>cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&quot;*\n&quot;</span> &lt;&lt; p &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用map实现数字分离"><a href="#使用map实现数字分离" class="headerlink" title="使用map实现数字分离"></a>使用map实现数字分离</h2><p>对数字的各位进行分离使用取余等数学方法较慢，可以把数字看做字符串使用map映照</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//该程序计算一个数字各个位的和</span><br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;m;<br><span class="hljs-comment">//构建字符映射数字</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>m[i + <span class="hljs-string">&#x27;0&#x27;</span>] = i;<br>string a = <span class="hljs-string">&quot;123764&quot;</span>;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a.<span class="hljs-built_in">size</span>(); j++) &#123;<br>sum += m[a[j]];<br>&#125;<br>cout &lt;&lt; sum &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>同样也可以用数字映射字符，实现数字转字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt;m;<br><span class="hljs-comment">//构建字符映射数字</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>m[i] = i + <span class="hljs-string">&#x27;0&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>有分层遍历和深度遍历，分层遍历通过队列可以简单实现，故在此不赘述，二叉树的深度遍历有递归和非递归两种方式，其中非递归方式主要借助栈实现，非递归的后序遍历比较有难度，有两种方式可以实现，其一为记录上一个节点，其二为增加标识位</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归实现比较简单，在此用二维数组<code>vector&lt;vector&lt;int&gt;&gt; tree(n, vector&lt;int&gt;(2))</code>表示一个二叉树，例如<code>tree[i][0]</code>表示第i个节点的左子节点，<code>tree[i][1]</code>表示第i个节点的右子节点，则前后中序的递归方式遍历如下</p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">VLR</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; tree,<span class="hljs-type">int</span> cur)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (cur == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span>;<br>cout &lt;&lt; cur &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-built_in">VLR</span>(tree, tree[cur<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">VLR</span>(tree, tree[cur<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LRV</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; tree, <span class="hljs-type">int</span> cur)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (cur == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">LRV</span>(tree, tree[cur - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">LRV</span>(tree, tree[cur - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>cout &lt;&lt; cur &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LVR</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; tree, <span class="hljs-type">int</span> cur)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (cur == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">LVR</span>(tree, tree[cur<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]);<br>cout &lt;&lt; cur &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-built_in">LVR</span>(tree, tree[cur<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><p>非递归方式的遍历，完整代码在<a href="https://github.com/DanMoLiuHen/Algorithm/tree/master/%E4%BA%8C%E5%8F%89%E6%A0%91">github仓库</a>。后序遍历相对难度大一点;节点的部分定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BNode</span> &#123;<br><span class="hljs-keyword">private</span>:<br>BNode&lt;T&gt;* left, * right;<br>T data;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>类似于set容器背后的结构，通过前向迭代器从<code>begin()</code>到<code>end()</code>的遍历完成树的中序遍历，比较困难，还不会写。</p><h2 id="大数运算"><a href="#大数运算" class="headerlink" title="大数运算"></a>大数运算</h2><p>相较于python等语言，C++对于数据类型的处理更精细，繁琐。比如浮点数的精度和大数字运算，C++都需要特殊处理，这是由于C++中数据类型的位数有限所导致，因此需要通过自定义数据类型实现大数运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 直接将输入的数字读取为string类型</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string a, b;<br>cin &gt;&gt; a&gt;&gt;b;<br><span class="hljs-type">int</span> alen = a.<span class="hljs-built_in">size</span>();<br><span class="hljs-type">int</span> blen = b.<span class="hljs-built_in">size</span>();<br><span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">reverse</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br><span class="hljs-type">int</span> maxlen = <span class="hljs-built_in">max</span>(alen, blen);<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">res</span>(maxlen + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxlen+<span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (i &lt; alen &amp;&amp; i &lt; blen)<br>res[i] = a[i] - <span class="hljs-string">&#x27;0&#x27;</span> + b[i] - <span class="hljs-string">&#x27;0&#x27;</span> + res[i];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt; alen)<br>res[i] = a[i] - <span class="hljs-string">&#x27;0&#x27;</span> + res[i];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt; blen)<br>res[i] = b[i] - <span class="hljs-string">&#x27;0&#x27;</span> + res[i];<br><span class="hljs-keyword">if</span> (res[i] &gt;= <span class="hljs-number">10</span>) &#123;<br>res[i + <span class="hljs-number">1</span>] = res[i] / <span class="hljs-number">10</span> + res[i + <span class="hljs-number">1</span>];<br>res[i] = res[i] % <span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = res[maxlen] == <span class="hljs-number">0</span> ? maxlen - <span class="hljs-number">1</span> : maxlen; i &gt;= <span class="hljs-number">0</span>; i--)<br>cout &lt;&lt; res[i];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p><a href="https://zhuanlan.zhihu.com/p/95902286">推荐网站</a>，快速幂算法比较经典，能够以<code>O(logn)</code>的时间复杂度计算乘方，在一些算法问题中常有输出结果较大，需要<code>mod 1e+7</code>再输出，该类问题也可以应用快速幂实现，同样有着递归和非递归两种方式</p><h3 id="递归快速幂"><a href="#递归快速幂" class="headerlink" title="递归快速幂"></a>递归快速幂</h3><p>如果n是偶数（不为0），先计算a的n&#x2F;2次方，后平方；如果n是奇数，先计算a的n-1次方，再乘a；递归出口是a的0次方为1。递推公式如下：<br>$a^{n}&#x3D;a^{n-1} \cdot a$  , if n is odd<br>$a^{n}&#x3D;a^{\frac{n}{2}\cdot \frac{n}{2}  } $  ,if n is even but not 0<br>$a^{n}&#x3D;1$,if n&#x3D;0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">qpow</span>(a, n - <span class="hljs-number">1</span>) * a;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> tmp = <span class="hljs-built_in">qpow</span>(a, n / <span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> tmp * tmp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="非递归快速幂"><a href="#非递归快速幂" class="headerlink" title="非递归快速幂"></a>非递归快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)<span class="hljs-comment">// n为奇数</span><br>            result *= x;<br>        n &gt;&gt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// n/2</span><br>        x *= x;  <br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>对一个大素数取模，可以用上述的大数运算，但没有必要，直接在快速幂中取模，<br>非递归方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>该思想可以扩展到快速乘，与快速幂类似。以<code>a*n</code>为例，n为偶数（非0），计算<code>a*n/2</code>两个再相加;n为奇数，计算<code>a*(n-1)</code>再与a相加，直到n为0，结束运算。<br>快速乘</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure><p>对结果取模的快速乘，做了部分简化，比如b为奇数时的处理可以与b为偶数时的处理合并</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a,ll b)</span> </span>&#123;<br>ll s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (b) &#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) <span class="hljs-comment">//b为奇数</span><br>s = (s + a) % mod;<br>a = (a + a) % mod;<span class="hljs-comment">//b为偶数或者已经对奇数处理结束（后续b/2时会将奇数变为偶数），a扩大一倍</span><br>b &gt;&gt;= <span class="hljs-number">1</span>;<span class="hljs-comment">//b除以2</span><br>&#125;<br><span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="A-搜索算法"><a href="#A-搜索算法" class="headerlink" title="A*搜索算法"></a>A*搜索算法</h3><h3 id="最短路径算法floyd算法"><a href="#最短路径算法floyd算法" class="headerlink" title="最短路径算法floyd算法"></a>最短路径算法floyd算法</h3><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><h3 id="gcd最大公约数"><a href="#gcd最大公约数" class="headerlink" title="gcd最大公约数"></a>gcd最大公约数</h3><p><code>greatest common divisor</code>，只要两数不相等，就反复用大数减小数， 直到相等为止，此相等的数就是两数的最大公约数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (x != y) &#123;<br><span class="hljs-keyword">if</span> (x &gt; y)<br>x = x - y;<br><span class="hljs-keyword">else</span><br>y = y - x;<br>&#125;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><p>最小公倍数&#x3D;X<em>Y&#x2F;gcd(x,y)，由于X</em>Y可能超出INT_MAX所以跟换顺序<code>X/gcd(x,y)*Y</code></p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p><a href="https://oi-wiki.org/ds/seg/">参考资料</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/A*_search_algorithm">参考资料1</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.redblobgames.com/pathfinding/a-star/introduction.html">参考资料2</a><br>启发函数：<code>f(n)=g(n)+h(n)</code>，其中f(n)为节点n的优先级，g(n)为节点n距起点的代价，h(n)是节点n到终点的预计代价。用于计算点的优先级<br>算法的思路如下所示：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">分别使用集合<span class="hljs-selector-tag">A</span>，<span class="hljs-selector-tag">B</span>表示未遍历和已遍历的点<br><span class="hljs-number">1</span>. 初始化<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>，将起点加入<span class="hljs-selector-tag">A</span>中<br><span class="hljs-number">2</span>. <span class="hljs-selector-tag">A</span>非空，从<span class="hljs-selector-tag">A</span>中取优先级最高的点n<br><span class="hljs-number">1</span>. 点n为终点，回退：<br><span class="hljs-number">1</span>. 从终点开始逐步追踪parent点，直到起点，返回结果，结束<br><span class="hljs-number">2</span>. 点n非终点，<br><span class="hljs-number">1</span>. 将n从<span class="hljs-selector-tag">A</span>删除，加入<span class="hljs-selector-tag">B</span>中<br><span class="hljs-number">2</span>. 遍历n的有邻接节点<br><span class="hljs-number">1</span>. 若邻接节点m在<span class="hljs-selector-tag">B</span>中（已遍历），跳过，继续<br><span class="hljs-number">2</span>. 若邻接节点m不在<span class="hljs-selector-tag">B</span>中，设置m的parent为节点n<br><span class="hljs-number">1</span>. 计算m优先级<br><span class="hljs-number">2</span>. 将m加入<span class="hljs-selector-tag">B</span>中<br></code></pre></td></tr></table></figure><br>算法实现(参考资料2中有Python,C++,C#版本实现)<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>socket网络编程</title>
    <link href="/2022/11/26/ubuntu-server%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/11/26/ubuntu-server%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-server使用"><a href="#ubuntu-server使用" class="headerlink" title="ubuntu-server使用"></a>ubuntu-server使用</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>使用<code>vim /etc/apt/sources.list</code>修改源配置文件，在首行添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 阿里源</span><br>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h2 id="使用root账户"><a href="#使用root账户" class="headerlink" title="使用root账户"></a>使用root账户</h2><p>ubuntu初始没有root账户，需要登录后创建，输入指令<code>sudo passwd root</code>即可创建root用户，后续登录可以使用root登录，（在root角色下不需要执行<code>sudo</code>获取权限）</p><p>可以使用<code>su</code>进入root用户，退出root用户</p><p>若需要禁用root账户，执行即可<code>sudo passwd -l root</code></p><h2 id="vim行号设置"><a href="#vim行号设置" class="headerlink" title="vim行号设置"></a>vim行号设置</h2><p>输入<code>vim</code>进入vim界面，按<code>esc</code>+<code>:</code>进入底行模式，输入指令<code>echo $VIM</code>查看<code>vim</code>的环境变量</p><p>我的是<code>/usr/share/vim</code>，因此进入该目录修改<code>vimrc</code>文件即可，在文件末尾加上<code>set number</code>即可永久查看行号</p><h2 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h2><h1 id="一些指令"><a href="#一些指令" class="headerlink" title="一些指令"></a>一些指令</h1><p><code>top</code>指令</p>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习</title>
    <link href="/2022/09/27/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/27/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>使用python完成爬虫，《python网络数据采集》学习笔记</p><div class="note note-warning">            <p>使用时需要关闭网络代理</p>          </div> <h1 id="python使用"><a href="#python使用" class="headerlink" title="python使用"></a>python使用</h1><h2 id="使用虚拟环境安装包"><a href="#使用虚拟环境安装包" class="headerlink" title="使用虚拟环境安装包"></a>使用虚拟环境安装包</h2><p><strong>使用好处</strong></p><ol><li>可以避免已安装的包产生冲突，若不使用则默认安装在root下（linux中）</li><li>可以打包整个环境发送给他人（项目关联的所有库单独放在一个虚拟环境）</li></ol><p><strong>使用方法</strong></p><p>创建了一个叫作 scrapingEnv 的新环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">virtualenv scrapingEnv<br></code></pre></td></tr></table></figure><p>在python3.3版本之后创建虚拟环境可以使用指令<code>python -m venv myvenv</code>实现，激活与关闭虚拟环境与<code>virtualenv</code>类似</p><p>执行activate文件，以激活新环境（部分版本是scripts目录不是bin目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> scrapingEnv <br><span class="hljs-built_in">source</span> bin/activate<br></code></pre></td></tr></table></figure><p>激活环境后环境名称出现在命令行提示符前，此后的任意安装包或执行程序都在该环境下（如下所示）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">(scrapingEnv)ryan$ </span><span class="language-bash">pip install beautifulsoup4</span><br></code></pre></td></tr></table></figure><p>退出虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">(scrapingEnv)ryan$ </span><span class="language-bash">deactivate</span><br></code></pre></td></tr></table></figure><p>生成依赖项清单<br><code>pip freeze &gt; requirements.txt</code></p><p>读取并安装依赖项<br><code>pip install -r requirements.txt</code></p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>先请求网络（即根据url等信息打开网页），再解析网页html（个人理解）</li><li>网络请求可用requests或urllib(python自带)</li><li>解析html和xml文档可用BeautifulSoup或lxml（处理速度很快）或<a href="https://docs.python.org/3/library/html.parser.html">HTML parser</a>(python自带)</li><li>Requests 库擅长处理复杂的HTTP请求、cookie、header（响应头和请求头）等内容<br>本次用到的包为urllib(进行网络请求)和BeautifulSoup（解析）,安装方式：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pip install requests</span><br>pip install beautifulsoup4<br></code></pre></td></tr></table></figure>requests使用<br>requests返回对象中包含的内容<table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>apparent_encoding</td><td>编码方式</td></tr><tr><td>close()</td><td>关闭与服务器的连接</td></tr><tr><td>content</td><td>返回响应的内容，以字节为单位</td></tr><tr><td>cookies</td><td>返回一个 CookieJar 对象，包含了从服务器发回的 cookie</td></tr><tr><td>elapsed</td><td>返回一个 timedelta 对象，包含了从发送请求到响应到达之间经过的时间量，可以用于测试响应速度。比如 r.elapsed.microseconds 表示响应到达需要多少微秒。</td></tr><tr><td>encoding</td><td>解码 r.text 的编码方式</td></tr><tr><td>headers</td><td>返回响应头，字典格式</td></tr><tr><td>history</td><td>返回包含请求历史的响应对象列表（url）</td></tr><tr><td>is_permanent_redirect</td><td>如果响应是永久重定向的 url，则返回 True，否则返回 False</td></tr><tr><td>is_redirect</td><td>如果响应被重定向，则返回 True，否则返回 False</td></tr><tr><td>iter_content()</td><td>迭代响应</td></tr><tr><td>iter_lines()</td><td>迭代响应的行</td></tr><tr><td>json()</td><td>返回结果的 JSON 对象 (结果需要以 JSON 格式编写的，否则会引发错误)</td></tr><tr><td>links</td><td>返回响应的解析头链接</td></tr><tr><td>next</td><td>返回重定向链中下一个请求的 PreparedRequest 对象</td></tr><tr><td>ok</td><td>检查 “status_code” 的值，如果小于400，则返回 True，如果不小于 400，则返回 False</td></tr><tr><td>raise_for_status()</td><td>如果发生错误，方法返回一个 HTTPError 对象</td></tr><tr><td>reason</td><td>响应状态的描述，比如 “Not Found” 或 “OK”</td></tr><tr><td>request</td><td>返回请求此响应的请求对象</td></tr><tr><td>status_code</td><td>返回 http 的状态码，比如 404 和 200（200 是 OK，404 是 Not Found）</td></tr><tr><td>text</td><td>返回响应的内容，unicode 类型数据</td></tr><tr><td>url</td><td>返回响应的 URL</td></tr></tbody></table></li></ul><p>参数说明<br><code>requests.post(url, data=&#123;key: value&#125;, json=&#123;key: value&#125;, args)</code></p><blockquote><p>url 请求 url。<br>data 参数为要发送到指定 url 的字典、元组列表、字节或文件对象。<br>json 参数为要发送到指定 url 的 JSON 对象。<br>args 为其他参数，比如 cookies、headers、verify等。</p></blockquote><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常情况：</p><ul><li>404、500抛出HTMLError</li><li>BeautifulSoup获取的标签不存在返回None</li><li>requests请求超时<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> HTTPError <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getTitle</span>(<span class="hljs-params">url</span>): <br>    <span class="hljs-keyword">try</span>:<br>        html = urlopen(url,timeout=<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">except</span> HTTPError <span class="hljs-keyword">as</span> e: <br>        <span class="hljs-comment"># 打印异常</span><br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 请求超时</span><br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">try</span>:<br>        bsObj = BeautifulSoup(html.read()) <br>        title = bsObj.body.h1<br>    <span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:     <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> title<br><br>title = getTitle(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page1.html&quot;</span>) <br><span class="hljs-keyword">if</span> title == <span class="hljs-literal">None</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Title could not be found&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(title)<br></code></pre></td></tr></table></figure></li></ul><h2 id="BeautifulSoup方法"><a href="#BeautifulSoup方法" class="headerlink" title="BeautifulSoup方法"></a>BeautifulSoup方法</h2><p>BeautifulSoup返回对象方法findAll()可以根据属性查找所需标签<code>findAll(tag, attributes, recursive, text, limit, keywords)</code></p><ul><li><code>recursive</code>是一个布尔变量，为<code>Ture</code>查找标签参数的所有子标签，以及子标签的子标签，默认值是<code>True</code></li><li><code>text</code>用文本内容去匹配，设置<code>text=&#39;the prince&#39;</code>是查找网页中包含“the prince”内容的标签数量</li><li><code>limit</code>范围限制参数,<code>find</code>等价于<code>findAll</code>的<code>limit</code>等于1时的情形 </li><li><code>keyword</code>选择那些具有指定属性的标签，如<code>findAll(id=&quot;text&quot;)</code>其等价于<code>findAll(&quot;&quot;, &#123;&quot;id&quot;:&quot;text&quot;&#125;)</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/warandpeace.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br><span class="hljs-comment"># 获取span标签中class属性为green的所有对象</span><br>nameList = bsObj.findAll(<span class="hljs-string">&quot;span&quot;</span>, &#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;green&quot;</span>&#125;) <br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> nameList:<br>    <span class="hljs-comment"># get_text()只保留文本</span><br>    <span class="hljs-built_in">print</span>(name.get_text())<br><br>---<br><br><span class="hljs-comment"># 标签列表作为参数</span><br>.findAll(&#123;<span class="hljs-string">&quot;h1&quot;</span>,<span class="hljs-string">&quot;h2&quot;</span>,<span class="hljs-string">&quot;h3&quot;</span>,<span class="hljs-string">&quot;h4&quot;</span>,<span class="hljs-string">&quot;h5&quot;</span>,<span class="hljs-string">&quot;h6&quot;</span>&#125;)<br><span class="hljs-comment"># 属性列表做参数,返回所有属性为green和red的span标签</span><br>.findAll(<span class="hljs-string">&quot;span&quot;</span>, &#123;<span class="hljs-string">&quot;class&quot;</span>:&#123;<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>&#125;&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="子标签、后代标签与兄弟标签"><a href="#子标签、后代标签与兄弟标签" class="headerlink" title="子标签、后代标签与兄弟标签"></a>子标签、后代标签与兄弟标签</h2><ul><li>子标签：一个父标签的下一级<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 只取下一级</span><br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page3.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> bsObj.find(<span class="hljs-string">&quot;table&quot;</span>,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;giftList&quot;</span>&#125;).children:<br>    <span class="hljs-built_in">print</span>(child)<br>---<br><span class="hljs-comment"># 与后代有区别（获取所有后代）</span><br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> bsObj.find(<span class="hljs-string">&quot;table&quot;</span>,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;giftList&quot;</span>&#125;).descendants:<br>    <span class="hljs-built_in">print</span>(child)<br></code></pre></td></tr></table></figure></li><li>后代标签：一个父标签下面所有级别的标签</li><li>兄弟标签：与自己平级的标签（不包含自己），常用于表格处理中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 取与tr平级的所有标签</span><br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page3.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br><span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> bsObj.find(<span class="hljs-string">&quot;table&quot;</span>,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;giftList&quot;</span>&#125;).tr.next_siblings:<br>    <span class="hljs-built_in">print</span>(sibling)<br></code></pre></td></tr></table></figure></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>大多数支持字符串参数的函数可用正则表达式实现，如下抓取所有以<code>../img/gifts/img</code>开头，以<code>.jpg</code>结尾的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">import</span> re<br>html = urlopen(<span class="hljs-string">&quot;http://www.pythonscraping.com/pages/page3.html&quot;</span>) <br>bsObj = BeautifulSoup(html)<br>images = bsObj.findAll(<span class="hljs-string">&quot;img&quot;</span>,&#123;<span class="hljs-string">&quot;src&quot;</span>:re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;\.\.\/img\/gifts/img.*\.jpg&quot;</span>)&#125;) <br><span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> images:<br>    <span class="hljs-built_in">print</span>(image[<span class="hljs-string">&quot;src&quot;</span>])<br></code></pre></td></tr></table></figure><p>常用正则表达式<br><a href="https://www.runoob.com/regexp/regexp-syntax.html">参考链接</a><br><img src="/../img/regular-expression.png" alt="常用正则表达式"></p><h2 id="网站信息采集"><a href="#网站信息采集" class="headerlink" title="网站信息采集"></a>网站信息采集</h2><p>通过递归爬取一个有多页面的网站信息，策略：若获取的新链接不在全局变量集合中，则加入全局变量并爬取这个页面的信息，若已存在则跳过，python的递归限制为1000次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">import</span> re<br>pages = <span class="hljs-built_in">set</span>() <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getLinks</span>(<span class="hljs-params">pageUrl</span>): <br>    <span class="hljs-keyword">global</span> pages<br>    html = urlopen(<span class="hljs-string">&quot;http://en.wikipedia.org&quot;</span>+pageUrl) <br>    bsObj = BeautifulSoup(html) <br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> bsObj.findAll(<span class="hljs-string">&quot;a&quot;</span>, href=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;^(/wiki/)&quot;</span>)): <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;href&#x27;</span> <span class="hljs-keyword">in</span> link.attrs: <br>            <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> pages: <span class="hljs-comment"># 我们遇到了新页面</span><br>                newPage = link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>]    <br>                <span class="hljs-built_in">print</span>(newPage) <br>                pages.add(newPage) <br>                getLinks(newPage)<br>getLinks(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>以下代码从 <a href="http://oreilly.com/">http://oreilly.com</a> 开始，随机地从一个外链跳到另一个外链，但没有异常处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br><span class="hljs-keyword">import</span> re <br><span class="hljs-keyword">import</span> datetime <br><span class="hljs-keyword">import</span> random<br>pages = <span class="hljs-built_in">set</span>() <br>random.seed(datetime.datetime.now())<br><br><span class="hljs-comment"># 获取页面所有内链的列表 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getInternalLinks</span>(<span class="hljs-params">bsObj, includeUrl</span>): <br>    internalLinks = [] <br>    <span class="hljs-comment"># 找出所有以&quot;/&quot;开头的链接 .</span><br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> bsObj.findAll(<span class="hljs-string">&quot;a&quot;</span>, href=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;^(/|.*&quot;</span>+includeUrl+<span class="hljs-string">&quot;)&quot;</span>)): <br>        <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: <br>            <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> internalLinks: <br>                internalLinks.append(link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>])<br>    <span class="hljs-keyword">return</span> internalLinks<br><br><span class="hljs-comment"># 获取页面所有外链的列表 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getExternalLinks</span>(<span class="hljs-params">bsObj, excludeUrl</span>): <br>    externalLinks = [] <br>    <span class="hljs-comment"># 找出所有以&quot;http&quot;或&quot;www&quot;开头且不包含当前URL的链接 </span><br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> bsObj.findAll(<span class="hljs-string">&quot;a&quot;</span>,href=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;^(http|www)((?!&quot;</span>+excludeUrl+<span class="hljs-string">&quot;).)*$&quot;</span>)):<br>        <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: <br>            <span class="hljs-keyword">if</span> link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> externalLinks: <br>                externalLinks.append(link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>])<br>    <span class="hljs-keyword">return</span> externalLinks <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">splitAddress</span>(<span class="hljs-params">address</span>):<br>    addressParts = address.replace(<span class="hljs-string">&quot;http://&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-string">&quot;/&quot;</span>) <br>    <span class="hljs-keyword">return</span> addressParts<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRandomExternalLink</span>(<span class="hljs-params">startingPage</span>): <br>    html = urlopen(startingPage) <br>    bsObj = BeautifulSoup(html)<br>    externalLinks = getExternalLinks(bsObj, splitAddress(startingPage)[<span class="hljs-number">0</span>]) <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(externalLinks) == <span class="hljs-number">0</span>:<br>        internalLinks = getInternalLinks(startingPage) <br>        <span class="hljs-keyword">return</span> getNextExternalLink(internalLinks[random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(internalLinks)-<span class="hljs-number">1</span>)])<br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-keyword">return</span> externalLinks[random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(externalLinks)-<span class="hljs-number">1</span>)] <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">followExternalOnly</span>(<span class="hljs-params">startingSite</span>):<br>    externalLink = getRandomExternalLink(<span class="hljs-string">&quot;http://oreilly.com&quot;</span>) <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;随机外链是：&quot;</span>+externalLink) <br>    followExternalOnly(externalLink)<br><br>followExternalOnly(<span class="hljs-string">&quot;http://oreilly.com&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以使用scrapy完成爬虫</p><h2 id="scrapy使用"><a href="#scrapy使用" class="headerlink" title="scrapy使用"></a>scrapy使用</h2><p>scrapy是一个爬虫框架，相关教程可以参考<a href="https://docs.scrapy.org/en/latest/">scrapy教程</a>（另有一份<a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html">中文版</a>但不是最新且项目已废弃，可参考）这里只记录一点常用的指令和个人理解。</p><ol><li>安装<br><code>pip install scrapy</code>即可</li><li>创建一个命名为name的项目<br><code>scrapy startproject &lt;name&gt;</code></li><li>创建一个命名为douban域名为movie.douban.com的spider（也可以手动创建，继承Spider类即可）<br><code>scrapy genspider &lt;douban&gt; &lt;movie.douban.com&gt;</code></li><li>启动命名为name的spider<br><code>scrapy crawl &lt;name&gt;</code></li></ol><ul><li>scrapy shell功能有助于快速了解网页内容<br><code>scrapy shell &lt;&quot;https://www.amazon.com/dp/B00004CQT3/&quot;&gt;</code></li><li>运行quotes输出到quotes.json中，-O覆盖，-o续写<br><code>scrapy crawl &lt;quotes&gt; -O &lt;quotes.json&gt;</code></li></ul><h2 id="处理复杂的http请求"><a href="#处理复杂的http请求" class="headerlink" title="处理复杂的http请求"></a>处理复杂的http请求</h2><p>urllib在处理复杂的http请求（比如涉及传参）时有些不足，requests为更优选择</p><p>进行post请求，并传递参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>params = &#123;<span class="hljs-string">&#x27;firstname&#x27;</span>: <span class="hljs-string">&#x27;Ryan&#x27;</span>, <span class="hljs-string">&#x27;lastname&#x27;</span>: <span class="hljs-string">&#x27;Mitchell&#x27;</span>&#125;<br>r = requests.post(<span class="hljs-string">&quot;http://pythonscraping.com/files/processing.php&quot;</span>, data=params)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>跟踪cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此处代码不完整</span><br>r = requests.post(<span class="hljs-string">&quot;http://pythonscraping.com/pages/cookies/welcome.php&quot;</span>, params) <br><span class="hljs-built_in">print</span>(r.cookies.get_dict()) <br></code></pre></td></tr></table></figure><p>当网站cookies经常变动，可以使用session完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests <br>session = requests.Session()<br>params = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;password&#x27;</span>&#125; <br>s = session.post(<span class="hljs-string">&quot;http://pythonscraping.com/pages/cookies/welcome.php&quot;</span>, params) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cookie is set to:&quot;</span>) <br><span class="hljs-built_in">print</span>(s.cookies.get_dict()) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------&quot;</span>) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Going to profile page...&quot;</span>)<br>s = session.get(<span class="hljs-string">&quot;http://pythonscraping.com/pages/cookies/profile.php&quot;</span>)<br><span class="hljs-built_in">print</span>(s.text)<br></code></pre></td></tr></table></figure><h2 id="处理javascript"><a href="#处理javascript" class="headerlink" title="处理javascript"></a>处理javascript</h2><p>一般javascript不会被采集，因此对于一些动态的网站采集的数据与网站上显示的内容可能不一致，因此使用<a href="http://www.seleniumhq.org/">Selenium</a>库(可直接使用指令<code>pip install selenium</code>完成安装)，一般配合无头浏览器<a href="https://phantomjs.org/download.html">PhantomJS</a>(不是python库，所以安装需要在官网下载)使用，遇到Google Analytics时需要设置cookie</p><div class="note note-warning">            <p>新版Selenium不支持phantomjs（可通过安装低版本使用<code>pip install selenium==2.48.0</code>），也可以用谷歌浏览器</p>          </div> <h3 id="selenium-Chrome配置"><a href="#selenium-Chrome配置" class="headerlink" title="selenium+Chrome配置"></a>selenium+Chrome配置</h3><ol><li>在谷歌浏览器网址中输入<code>chrome://version/</code>，查看版本信息</li><li>在<code>https://chromedriver.chromium.org/home</code>网站下载对应版本的驱动</li><li>将下载后的exe文件放入python路径中的Scripts即可，如<code>...\Python\Python38\Scripts</code>路径</li><li>执行以下代码不报错说明成功<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>)<br>driver.quit()<br></code></pre></td></tr></table></figure></li></ol><h2 id="爬虫进阶"><a href="#爬虫进阶" class="headerlink" title="爬虫进阶"></a>爬虫进阶</h2><ol><li>修改请求头，以达到爬虫更像人<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit 537.36 (KHTML, like Gecko) Chrome&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>:<span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>&#125;<br></code></pre></td></tr></table></figure>使用use-gent：<code>iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257Safari/9537.53</code>相当于使用移动设备访问网站（内容更简化没有广告等干扰）</li><li>处理cookie<br>需要使用Selenium 和 PhantomJS，可以实现获取cookie或者保存cookie<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver <br>driver = webdriver.PhantomJS(executable_path=<span class="hljs-string">&#x27;&lt;Path to Phantom JS&gt;&#x27;</span>) <br>driver.get(<span class="hljs-string">&quot;http://pythonscraping.com&quot;</span>) <br>driver.implicitly_wait(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(driver.get_cookies())<br></code></pre></td></tr></table></figure></li><li>处理隐含字段<br>如下html网页，含有三个隐含字段，若填充并提交会被服务器判为机器人封杀，</li></ol><ul><li>第一个链接通过CSS属性设置display:None</li><li>name&#x3D;”phone” 一个隐含的输入字段 </li><li>name&#x3D;”email” 将元素向右移动 50 000 像素（超出电脑显示器的边界）并隐藏滚动条<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>A bot-proof form<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">overflow-x</span>:hidden; &#125; </span><br><span class="language-css">    <span class="hljs-selector-class">.customHidden</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>:absolute; </span><br><span class="language-css">    <span class="hljs-attribute">right</span>:<span class="hljs-number">50000px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>A bot-proof form<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://pythonscraping.com/dontgohere&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span>Go here!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://pythonscraping.com&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;valueShouldNotBeModified&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;customHidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;intentionallyBlank&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstName&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>使用selenium解决，通过link.is_displayed()自动判断<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver <br><span class="hljs-keyword">from</span> selenium.webdriver.remote.webelement <span class="hljs-keyword">import</span> WebElement<br>driver = webdriver.PhantomJS(executable_path=<span class="hljs-string">&#x27;&#x27;</span>) <br>driver.get(<span class="hljs-string">&quot;http://pythonscraping.com/pages/itsatrap.html&quot;</span>) <br>links = driver.find_elements_by_tag_name(<span class="hljs-string">&quot;a&quot;</span>) <br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> links: <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> link.is_displayed(): <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The link &quot;</span>+link.get_attribute(<span class="hljs-string">&quot;href&quot;</span>)+<span class="hljs-string">&quot; is a trap&quot;</span>)<br><br>fields = driver.find_elements_by_tag_name(<span class="hljs-string">&quot;input&quot;</span>) <br><span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> fields: <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> field.is_displayed():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Do not change value of &quot;</span>+field.get_attribute(<span class="hljs-string">&quot;name&quot;</span>))<br></code></pre></td></tr></table></figure></li></ul><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="http消息"><a href="#http消息" class="headerlink" title="http消息"></a>http消息</h2><p>http消息由头字段（header field）和数据字段（data field）组成，常用的头字段有</p><table><thead><tr><th>名称</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>User-Agent</td><td>字符串，表示发出请求的浏览器和操作系统信息</td><td>Mozilla&#x2F;5.0 (X11; Ubuntu; Linux x86_64; rv:28.0) Gecko&#x2F;20100101 Firefox&#x2F;28.0</td></tr><tr><td>Cookie</td><td>变量，被网络应用用来存储会话数据和其他信息</td><td>实例略</td></tr><tr><td>Status</td><td>表示网页请求状态</td><td>“200”（成功），“404”（文件未找到）</td></tr></tbody></table><h2 id="关于《python网络数据采集》"><a href="#关于《python网络数据采集》" class="headerlink" title="关于《python网络数据采集》"></a>关于《python网络数据采集》</h2><p>书中还介绍了图像识别与文字处理（用于部分验证码）这部分笔记中未记录，以及很多技术比如lambda，“无头”（headless）浏览器PhantomJS等，这些没有详细展开</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>python网络数据采集<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.scrapy.org/en/latest/">scrapy教程</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生学习笔记</title>
    <link href="/2022/09/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p>记录云原生项目部署中的一些事项，从k8s部署到镜像打包推送（使用docker）</p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>运行在虚拟机ubuntu20.04上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 构建容器镜像，.表示在当前文件夹内，需要先有一个dockerfile</span><br>docker build -t getting-started .<br><br><span class="hljs-comment"># docker run运行docker，-d在后台运行，-p 80:6379，将主机的端口80映射到容器中的端口80</span><br><span class="hljs-comment"># --name给容命名</span><br>docker run -d -p 80:6379 --name redis redis:lastest<br></code></pre></td></tr></table></figure><p>更新源码后，需要先删除旧容器，再启动新容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取容器的 ID </span><br>docker ps<br><br><span class="hljs-comment"># 使用docker stop命令停止容器。</span><br><span class="hljs-comment"># 用docker ps查询的ip更换&lt;the-container-id&gt;</span><br>docker stop &lt;the-container-id&gt;<br><br><span class="hljs-comment"># 容器停止后，使用docker rm命令将其删除</span><br>docker <span class="hljs-built_in">rm</span> &lt;the-container-id&gt;<br><br><span class="hljs-comment"># 将停止和删除命令合并，通过force指令</span><br>docker <span class="hljs-built_in">rm</span> -f &lt;the-container-id&gt;<br><br><span class="hljs-comment"># 启动更新后的容器</span><br>docker run -dp 3000:3000 getting-started<br></code></pre></td></tr></table></figure><p>使用卷实现持久化数据，更换容器后被存储的数据不会改变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用docker volume create命令创建卷</span><br>docker volume create todo-db<br><br><span class="hljs-comment"># 再次停止并删除应用程序容器docker rm -f &lt;id&gt;，因为它仍在运行而不使用持久</span><br><br><span class="hljs-comment"># 启动 todo 应用程序容器，添加-v标志以指定卷安装，使用命名卷并将其挂载到/etc/todos，捕获在该路径创建的所有文件</span><br>docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started<br></code></pre></td></tr></table></figure><p>docker compose使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否安装上</span><br>docker compose version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动应用程序栈，-d在后台运行所有内容</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h2 id="安装与使用镜像"><a href="#安装与使用镜像" class="headerlink" title="安装与使用镜像"></a>安装与使用镜像</h2><h3 id="1-找镜像。"><a href="#1-找镜像。" class="headerlink" title="1. 找镜像。"></a>1. 找镜像。</h3><p>在<a href="https://hub.docker.com/">docker hub</a>找所需的镜像，找不同版本可以点击tag查找所需版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载最新版本</span><br>docker pull nginx<br><br>docker pull nginx:1.20.1<br><br><span class="hljs-comment"># 查看所有镜像</span><br>docker images<br><br><span class="hljs-comment"># 删除镜像</span><br>docker rmi 镜像名:版本号/镜像<span class="hljs-built_in">id</span><br><br>docker <span class="hljs-built_in">rm</span> 镜像<br></code></pre></td></tr></table></figure><h3 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2. 启动容器"></a>2. 启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><span class="hljs-comment"># 常用的OPTIONS</span><br><span class="hljs-comment"># OPTIONS:开机自启</span><br>--restart-always <br><span class="hljs-comment"># OPTIONS:端口映射，主机到镜像</span><br>-p 88:80<br><br><span class="hljs-comment"># 查看正在运行的容器</span><br>docker ps<br><span class="hljs-comment"># 查看所有</span><br>docker ps -a <br><span class="hljs-comment"># 删除停止的容器</span><br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span>/名称<br></code></pre></td></tr></table></figure><h3 id="3-进入容器修改内容"><a href="#3-进入容器修改内容" class="headerlink" title="3. 进入容器修改内容"></a>3. 进入容器修改内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器内部</span><br>docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> /bin/bash<br></code></pre></td></tr></table></figure><h3 id="4-提交改变"><a href="#4-提交改变" class="headerlink" title="4. 提交改变"></a>4. 提交改变</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 总命令,，打包成一个镜像，细节使用--help查看</span><br>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br><br><span class="hljs-comment"># 常用形式</span><br>docker commit -a <span class="hljs-string">&quot;作者&quot;</span> -m <span class="hljs-string">&quot;提交变化&quot;</span> 容器<span class="hljs-built_in">id</span> 自定义名称<br></code></pre></td></tr></table></figure><h3 id="5-远程使用"><a href="#5-远程使用" class="headerlink" title="5. 远程使用"></a>5. 远程使用</h3><ul><li>打包成一个压缩包tar后传输给另一个机器，另一个机器再解压运行即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打包成一个压缩包tar后传输</span><br>docker save -o 自定义名称 镜像<br><br><span class="hljs-comment"># 对压缩包解压运行即可</span><br>docker load -i 上一步定义的名称<br></code></pre></td></tr></table></figure></li><li>推送到远程仓库，需要先<code>docker login</code>登录，并且dockerhub上有自己的仓库(<code>docker logout</code>登出)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker tag &lt;local-image:tagname&gt; &lt;new-repo:tagname&gt;<br>docker push &lt;new-repo:tagname&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-将数据挂载到外部"><a href="#6-将数据挂载到外部" class="headerlink" title="6. 将数据挂载到外部"></a>6. 将数据挂载到外部</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro --restart=always -d nginx<br><span class="hljs-comment"># --name some-nginx 定义名称</span><br><span class="hljs-comment"># -v /some/content:/usr/share/nginx/html:ro 将/usr/share/nginx/html与主机/some/content目录挂载，且为只读模式</span><br><span class="hljs-comment"># -d 后台运行</span><br><span class="hljs-comment"># --restart=always 开机自启</span><br><br>docker run --name my-nginx \<br>-v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro <br>-d nginx<br></code></pre></td></tr></table></figure><p>挂载一个redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -v /data/redis/redis.conf:/etc/redis/redis.conf \<br>-v /data/redis/data:/data  \<br>-d --name myredis  \<br>-p 6379:6379 \<br>redis:latest redis-server /etc/redis/redis.conf<br><span class="hljs-comment"># 指令解释</span><br><span class="hljs-comment"># -v 进行挂载，将本地/data/redis/redis.conf与容器/etc/redis/redis.conf相挂载</span><br><span class="hljs-comment"># redis-server /etc/redis/redis.conf 启动自定义配置文件,指定配置文件必须是容器内的</span><br></code></pre></td></tr></table></figure><h3 id="7-杂项"><a href="#7-杂项" class="headerlink" title="7. 杂项"></a>7. 杂项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看日志</span><br>docker logs 容器<span class="hljs-built_in">id</span><br><br><span class="hljs-comment"># 把容器指定位置的东西复制出来，将命令返回来是将外部复制到容器内</span><br>docker <span class="hljs-built_in">cp</span> 容器<span class="hljs-built_in">id</span>:文件绝对路径 外部路径<br></code></pre></td></tr></table></figure><p>在docker运行期间操作防火墙需要重启docker<br><code>systemctl restart docker</code></p><h2 id="打包并使用镜像"><a href="#打包并使用镜像" class="headerlink" title="打包并使用镜像"></a>打包并使用镜像</h2><p>编写Dockerfile，示例如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> docker pull openjdk:<span class="hljs-number">8</span>-jdk-slim<br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=yedeng</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> target/*.jar /app.jar</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在当前目录下开始打包（必须要有docker环境），打包结束后可以使用<code>docker images</code>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t java-demo:v1.0 .<br><span class="hljs-comment"># -t java-demo:v1.0 表示命名</span><br><span class="hljs-comment"># . 表示在当前目录下，用于COPY中的路径</span><br></code></pre></td></tr></table></figure><p>设置主机名<br>hostnamectl set-hostname 自定义名称</p><h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h1><p>部分概念类似于docker，但k8s具有自愈、负载均衡等自动调整的能力</p><h2 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 验证集群节点状态</span><br>kubectl get nodes<br><br><span class="hljs-comment"># 获取各pod的ip</span><br>kubectl get pod -owide<br><br><span class="hljs-comment"># 查看对pod的描述</span><br>kubectl describe pod &lt;pod-name&gt;<br>kubectl describe pod -n &lt;namespace&gt; &lt;pod-name&gt;<br><br><span class="hljs-comment"># 应用yaml文件</span><br>kubectl apply -f &lt;calico.yaml&gt;<br><br><span class="hljs-comment"># 取消对yaml文件应用</span><br>kubectl delete -f &lt;ingress.yaml&gt;<br><br><span class="hljs-comment"># 查看集群信息</span><br>kubectl cluster-info<br></code></pre></td></tr></table></figure><h2 id="可视化工具dashboard"><a href="#可视化工具dashboard" class="headerlink" title="可视化工具dashboard"></a>可视化工具dashboard</h2><p><a href="https://github.com/kubernetes/dashboard">dashboard</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml<br></code></pre></td></tr></table></figure><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><p><a href="https://www.yuque.com/leifengyang/oncloud/gz1sls#XKRmo">安装步骤</a><br>部署中遇到<code>/proc/sys/net/ipv4/ip_forward</code>为0的问题<br><a href="https://stackoverflow.com/questions/55531834/kubeadm-fails-to-initialize-when-kubeadm-init-is-called">解决方法</a></p><p>部署网络组件calico时，应使用获取对应版本(部署使用1.20.9版本)的<code>calico.yaml</code><br><code>curl https://docs.projectcalico.org/v3.20/manifests/calico.yaml -O</code></p><p>部署metrics之后使用<code>kubectl top nodes</code>显示服务不可获取<br><a href="https://stackoverflow.com/questions/53811388/error-from-server-serviceunavailable-the-server-is-currently-unable-to-handle">参考资料</a></p><p>devops中使用apache下载，改为阿里云镜像<br>在ks-devops-agent配置文件修改MavenSetting</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>部署：(Deployment)<br>有状态副本集：中间件（StatefulSet）<br>守护进程集：(DaemonSet)日志收集</p><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><p>通过deployment部署的应用，只有删除deployment才能删除pod（直接删除pod将重启pod）<br>具有多副本、扩缩容、自愈、故障转移、滚动更新、版本回退能力<br>命令行部署<code>kubectl create deployment &lt;mytomcat&gt; --image=&lt;tomcat:8.5.68&gt;</code><br>查看部署<code>kubectl get deploy</code></p><p>yaml配置部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-dep</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>获取命名空间<code>kubectl get ns</code></p><p>命令行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create ns hello<br>kubectl delete ns hello<br></code></pre></td></tr></table></figure><p>通过yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br></code></pre></td></tr></table></figure><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>命令行创建，与docker类似<code>kubectl run mynginx --image=nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看default名称空间的Pod</span><br>kubectl get pod <br><span class="hljs-comment"># 描述</span><br>kubectl describe pod &lt;pod-name&gt;<br><span class="hljs-comment"># 删除</span><br>kubectl delete pod &lt;pod-name&gt; -n &lt;namespace&gt;<br><span class="hljs-comment"># 查看Pod的运行日志</span><br>kubectl logs &lt;pod-name&gt;<br><br><span class="hljs-comment"># 打印更完善的信息</span><br>kubectl get pod -owide<br><span class="hljs-comment"># 每个Pod,k8s都会分配一个ip（仅限集群内），使用Pod的ip+pod里面运行容器的端口</span><br>curl 192.168.169.136<br><br><span class="hljs-comment"># 集群中的任意一个机器以及任意的应用都能通过Pod分配的ip来访问这个Pod</span><br></code></pre></td></tr></table></figure><p>访问pod的bash，也可以使用dashboard选择’执行’访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">exec</span> -it &lt;pod-name&gt; -- /bin/bash<br></code></pre></td></tr></table></figure><p>通过yaml创建</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">mynginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mynginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mynginx</span><br></code></pre></td></tr></table></figure><p>一个pod两个容器（两个image），一个pod有一个内部ip，多个容器共用这个ip，通过不同的端口区分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:8.5.68</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br></code></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>仅限集群内部访问<br>获取所有暴露的服务<code>kubectl get service</code><br>删除某个service<code>kubectl delete service &lt;service-name&gt;</code></p><p>选择一次部署，统一部署pod使用的ip（任意）（在集群内的机器上可以通过该方法访问）<br>也可以在容器内部，使用域名访问，域名为：服务名.命名空间.svc（在机器上无法使用域名访问）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 暴露my-dep部署内容，--port是集群内部开放的端口，在集群内使用serviceip:8000即可负载均衡的访问，--target-port是（部署pod的）目标端口,type缺省为ClusterIP</span><br>kubectl expose deployment &lt;my-dep&gt; --port=8000 --target-port=80 --<span class="hljs-built_in">type</span>=ClusterIP<br><br><span class="hljs-comment">#使用标签检索Pod</span><br>kubectl get pod -l app=my-dep<br></code></pre></td></tr></table></figure><p>暴露服务有两种方式ClusterIP和NodeIP</p><h4 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h4><h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><p>集群外部可访问</p><p>nodeport在每个集群都会开放一个端口，开放的端口范围在30000-32767，可访问任意一台机器的ip:对应端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class="hljs-built_in">type</span>=NodePort<br></code></pre></td></tr></table></figure><p>通过yaml文件暴露端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-dep</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-dep</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p>相当于网关层<br>查看规则<code>kubectl get ingress</code>可简写为<code>kubectl get ing</code><br>修改规则<code>kubectl edit ing &lt;name&gt;</code></p><p>配置通过域名访问服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span>  <br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-host-bar</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ingressClassName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;hello.atguigu.com&quot;</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span> <span class="hljs-comment"># 以&quot;hello.atguigu.com&quot;作为前缀的所有请求发给hello-server服务（即hello.atguigu.com/的所有请求）</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/&quot;</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">service:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">hello-server</span><br>            <span class="hljs-attr">port:</span><br>              <span class="hljs-attr">number:</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><h2 id="存储持久化"><a href="#存储持久化" class="headerlink" title="存储持久化"></a>存储持久化</h2><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>一个文件系统<br>实现k8s主从节点共享<br>在k8s的主节点运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#nfs主节点，将/ngs/data作为共享文件夹暴露</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot;</span> &gt; /etc/exports<br><br><span class="hljs-built_in">mkdir</span> -p /nfs/data<br><span class="hljs-comment"># 启用rpc远程绑定</span><br>systemctl <span class="hljs-built_in">enable</span> rpcbind --now<br><span class="hljs-comment"># 启动nfs服务器</span><br>systemctl <span class="hljs-built_in">enable</span> nfs-server --now<br><span class="hljs-comment">#配置生效</span><br>exportfs -r<br></code></pre></td></tr></table></figure><p>删除部署之后，文件系统内的东西不会自动清理</p><p>将部署中的<code>/usr/share/nginx/html</code>路径下内容挂载到<code>/nfs/data/nginx-pv</code>（nfs路径，需要装好nfs文件系统）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-pv-demo</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-pv-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-pv-demo</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-pv-demo</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">172.31</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/nginx-pv</span><br></code></pre></td></tr></table></figure><h4 id="PV-amp-PVC"><a href="#PV-amp-PVC" class="headerlink" title="PV&amp;PVC"></a>PV&amp;PVC</h4><p>PV：持久卷（Persistent Volume），将应用需要持久化的数据保存到指定位置<br>PVC：持久卷申明（Persistent Volume Claim），申明需要使用的持久卷规格<br>二者配合使用，能够为应用分配指定大小空间；当pod删除时，其对应的存储空间也会删除</p><p><strong>静态供应</strong>创建好PV池，申请时在内部选择<br>查看创建的pv池<code>kubectl get pv</code><br>创建PV</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># capacity.storage限定大小10M，</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv01-100m</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">100M</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/01</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.4</span><span class="hljs-number">.17</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv02-3gi</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">3Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/02</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.4</span><span class="hljs-number">.17</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv03-5gi</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs/data/03</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.4</span><span class="hljs-number">.17</span><br></code></pre></td></tr></table></figure><p>PVC相当于申请书，用于申请空间<br><strong>动态供应</strong>申请时自动创建PV</p><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><p>配置统一管理</p><p>将redis.conf文件制作为configmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create cm redis-conf --from-file=redis.conf<br></code></pre></td></tr></table></figure><p>以上指令等价于一下yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">data:</span>    <span class="hljs-comment">#data是所有真正的数据，key：默认是文件名   value：配置文件的内容</span><br>  <span class="hljs-attr">redis.conf:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    appendonly yes</span><br><span class="hljs-string"></span><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis-conf</span> <span class="hljs-comment">#定义配置名</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure><p>在部署redis时使用配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-server</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/redis-master/redis.conf&quot;</span>  <span class="hljs-comment">#指的是redis容器内部的位置</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span> <span class="hljs-comment"># /data中的内容以data形式挂载，对应volume中name为data的挂载方式</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/redis-master</span> <span class="hljs-comment"># 挂载路径，名为config</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>      <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment"># 配置名为config的挂载方式</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">redis-conf</span> <span class="hljs-comment"># 名为redis-conf的配置集</span><br>        <span class="hljs-attr">items:</span> <span class="hljs-comment"># 获取data中的对应项目</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">redis.conf</span> <span class="hljs-comment"># 取出key值放在path（redis内部的）下</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">redis.conf</span><br></code></pre></td></tr></table></figure><h2 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h2><p>用于保存敏感信息</p><p>查看<code>kubectl get secret</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create secret docker-registry leifengyang-docker \<br>--docker-username=leifengyang \<br>--docker-password=Lfy123456 \<br>--docker-email=534096094@qq.com<br></code></pre></td></tr></table></figure><p>使用保存的secret下载镜像yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">private-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">private-nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">leifengyang/guignginx:v1.0</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">leifengyang-docker</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot+mysql+vue2尝试记录</title>
    <link href="/2022/09/24/springboot%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/24/springboot%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>记录一次springboot+mysql+vue2的尝试记录，从前端干到后端，主要使用IDEA,Mysql(后端),VSCode(前端)，先很粗略的走通一下</p><div class="note note-warning">            <p><strong>环境：</strong>windows10，IDEA2022.2.2，MySQL8.0.30</p>          </div> <h2 id="IDEA使用"><a href="#IDEA使用" class="headerlink" title="IDEA使用"></a>IDEA使用</h2><p>在application.properties文件中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.compression.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.devtools.restart.additional-paths</span>=<span class="hljs-string">src/main/java</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 静态资源映射</span><br><span class="hljs-comment"># 表示静态资源的访问路径（缺省为/**）</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/images/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 文件上传</span><br><span class="hljs-attr">&lt;!--</span> <span class="hljs-string">文件的最大大小 --&gt;</span><br><span class="hljs-attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.data.cassandra.request.throttler.max-requests-size</span>=<span class="hljs-string">10MB</span><br></code></pre></td></tr></table></figure><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><ul><li>controller控制器使用<ul><li>@Controller请求页面和数据，返回html页面（前后端不分离）</li><li>@RestController请求数据</li></ul></li><li>RequestMapping负责url的路由映射，可添加在controller类上，其参数有<ul><li>value（请求url的路径），</li><li>method（http的请求方法，如get（获取资源），delete（删除资源），post（新建或更新），put（更新资源）等），method匹配也可用getmapping，putmapping等</li><li>consumes请求的媒体类型，</li><li>produces请求的响应类型，</li><li>params,headers请求的参数和请求头的值</li></ul></li><li>参数传递，@RequestParam(value&#x3D;”nickname”，required&#x3D;fasle)传入nickname参数映射到其后一个参数，required表示是否可选参数，加上注解后表明该参数必须，</li><li>常见错误，<ul><li>4开头是浏览器的错误</li><li>404路径错误或未编译</li><li>405方法（post等）不匹配，参数有误</li></ul></li><li>通配符<ul><li>**表示路径后任意层都是该页面</li><li>*表示路径后一层是该页面</li></ul></li><li>拦截器，HandleInterceptor<ul><li>HandleInterceptor接口有三种方法，preHandle,postHandle,afterCompletion</li><li>拦截器注册，</li></ul></li></ul><p>Restful API</p><h2 id="Swagger使用"><a href="#Swagger使用" class="headerlink" title="Swagger使用"></a>Swagger使用</h2><ol><li>需要在项目中加入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在application.properties中添加配置<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="hljs-string">ant_path_matcher</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="Mysql使用"><a href="#Mysql使用" class="headerlink" title="Mysql使用"></a>Mysql使用</h2><ol><li>在项目中添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        MyBatisPlus依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mysql驱动依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        数据连接池druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在application.properties中配置数据库的相关信息<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mybatis-plus.comfiguration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure></li><li>添加@MapperScan注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootAppliation</span><br><span class="hljs-meta">@MapperScan(&quot;com.xx.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusDemoApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringBootAppliation.run(MybatisplusDemoApplication.class,args)<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="vue使用"><a href="#vue使用" class="headerlink" title="vue使用"></a>vue使用</h2><p>v-if是直接不创建对应标签，v-show是创建标签但通过css隐藏（频繁切换使用v-show）<br>v-for中的key一般取item.id而不能是index<br>package.json与IDEA中的pom.xml类似<br>vue3使用create创建组件；vue2使用render<br>使用了elementui和<a href="https://fontawesome.dashgame.com/">第三方图标库</a><br>使用axios进行网络请求<a href="https://axios-http.com/zh/docs/req_config">参考</a>，可直接在main.js中导入axios<br>使用vuerouter<code>npm vue-router@3</code>，有子路由，动态路由，路由传参<br>路由跳转分为声明式和编程式<br>路由守卫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">router.beforeEach((to,from,next)=&gt;&#123;<br>    if(to.path===&#x27;/main&#x27;&amp;&amp;!isAuthenticated)&#123;<br>        next(&#x27;/login&#x27;)<br>    &#125;<br>    else&#123;<br>        next()<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Vuex使用"><a href="#Vuex使用" class="headerlink" title="Vuex使用"></a>Vuex使用</h2><p>vuex中的State,Getter,Mutation,Action,Module五个概念<br>vue2对应安装vuex3<code>npm install vuex@3</code></p><p>跨域问题<br>不同源（同源是指两个页面具有相同的协议、主机和端口号）的客户端脚本在没有明确授权的情况下，不能读写对方资源，可通过CORS解决（后端实现）</p><h2 id="mock使用"><a href="#mock使用" class="headerlink" title="mock使用"></a>mock使用</h2><p>用于前端进行接口调用测试，模拟接口<br>语法规范：</p><ol><li><p>数据模板（Data Template Definition，DTD）</p></li><li><p>数据占位符（Data Placeholder Definition，DPD）<br>数据模板的组成：属性名name，生成规则rule，属性值value<br><code>&#39;name|rule&#39;: value</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 七种格式</span><br>&#x27;name|min-max&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|count&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|min-max.dmin-dmax&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|min-max.dcount&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|count.dmin-dmax&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|count.dcount&#x27;<span class="hljs-punctuation">:</span> value<br>&#x27;name|+step&#x27;<span class="hljs-punctuation">:</span> value<br></code></pre></td></tr></table></figure></li><li><p>属性值为string</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//1. 属性值是string</span><br><br><span class="hljs-comment">//重复string [min,max]次</span><br>&#x27;name|min-max&#x27;<span class="hljs-punctuation">:</span>String<br><span class="hljs-comment">//重复string count次</span><br>&#x27;name|count&#x27;<span class="hljs-punctuation">:</span>String<br></code></pre></td></tr></table></figure></li><li><p>属性值为numebr</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//属性值自动加一</span><br>&#x27;name|+<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">:</span>number<br><span class="hljs-comment">//生成一个[min,max]之间的数字,与number所填的数字无关</span><br>&#x27;name|min-max&#x27;<span class="hljs-punctuation">:</span>number<br><span class="hljs-comment">//生成一个整数在[min,max]，小数部分保留[dmin,dmax]位</span><br>&#x27;name|min-max.dmin-dmax&#x27;<span class="hljs-punctuation">:</span>number<br></code></pre></td></tr></table></figure></li><li><p>属性值为bool</p></li><li><p>属性值为Object</p></li><li><p>属性值为array</p></li><li><p>属性值为functio</p></li><li><p>属性值为正则表达式regexp</p></li></ol><p>数据占位符<br>格式：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-meta">@占位符</span><br><span class="hljs-meta">@占位符(参数</span> [， 参数])<br><br>例如<br><span class="hljs-meta">@ip,</span><span class="hljs-meta">@email,</span><span class="hljs-meta">@cname(随机生成中文名)</span><br></code></pre></td></tr></table></figure><h2 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h2><p>基于vue和element-ui用于后台管理员使用的界面</p><h2 id="跨域认证JWT"><a href="#跨域认证JWT" class="headerlink" title="跨域认证JWT"></a>跨域认证JWT</h2><p>json web token(JWT)是一个token的具体实现方案<br>分为三部分：Header(json对象，描述jwt的元数据，alg是签名算法，typ是令牌类型),Payload(json对象，存放实际传递的数据),Signatrue(对前两部分的签名，防止数据篡改)</p><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>ECS(Elastic Compute Service)</p><h2 id="云端环境准备"><a href="#云端环境准备" class="headerlink" title="云端环境准备"></a>云端环境准备</h2><p>以CentOS为例</p><h3 id="1-Xshell远程连接服务器，xftp上传文件"><a href="#1-Xshell远程连接服务器，xftp上传文件" class="headerlink" title="1. Xshell远程连接服务器，xftp上传文件"></a>1. Xshell远程连接服务器，xftp上传文件</h3><p>也可以在终端直接使用ssh连接远程服务器</p><h3 id="2-Mysql安装（用云服务器系统的版本）"><a href="#2-Mysql安装（用云服务器系统的版本）" class="headerlink" title="2. Mysql安装（用云服务器系统的版本）"></a>2. Mysql安装（用云服务器系统的版本）</h3><p>卸载CentOS7自带的mariadb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查找</span><br>rpm -qa|grep mariadb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载,卸载版本应对应查找结果</span><br>rpm -e mariadb-libs-5.5.52-1.e17.x86_64 --nodeps<br></code></pre></td></tr></table></figure><p>解压mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建mysql安装包存放点</span><br>mkdir /usr/server/mysql<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压，-C指定解压的目录</span><br>tar xvf mysql-5.7.34-1.el7.x86_64.rpm-bundle.tar -C mysql<br></code></pre></td></tr></table></figure><p>执行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到安装目录后安装依赖</span><br>yum -y install libaio<br>yum -y install libncurses*<br>yum -y install perl perl-devel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">正式安装</span><br>rpm -ivh mysql-community-common-5.7.34-1.e17.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.34-1.e17.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.34-1.e17.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.34-1.e17.x86_64.rpm<br></code></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动mysql</span><br>systemctl start mysqld.Service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看生成的临时root密码</span><br>cat /var/log/mysqld.log | grep password<br></code></pre></td></tr></table></figure><p>修改初始的随机密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录mysql</span><br>mysql -u root -p<br>Enter passsword: # 输入临时密码<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新root密码</span><br>set global validate_password_policy=0;<br>set global validate_password_length=1;<br>set passsword=passsword(&#x27;root&#x27;);<br></code></pre></td></tr></table></figure><p>授予远程连接的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all privilage on *.* to &#x27;root&#x27; @&#x27;%&#x27; identified by &#x27;root&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新</span><br>flush privileges;<br></code></pre></td></tr></table></figure><p>控制命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql的启动 状态查看 关闭</span><br>systemctl stop mysqld<br>systemctl status mysqld<br>systemctl start mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置为开机自启</span><br>systemctl enable mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看是否设置成功</span><br>systemctl list-unit-files | grep mysqld<br></code></pre></td></tr></table></figure><p>关闭防火墙(如果是自己的虚拟机)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看防火墙状态</span><br>firewall-cmd --state<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止firewall</span><br>systemctl stop firewalld.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁止firewall开机启动</span><br>systemctl disable firewalld.service<br><br><br></code></pre></td></tr></table></figure><h3 id="3-nginx安装"><a href="#3-nginx安装" class="headerlink" title="3. nginx安装"></a>3. nginx安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br>yum update<br>yum -y install nginx<br></code></pre></td></tr></table></figure><p>nginx命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx<br>systemctl stop nginx<br>systemctl restart nginx<br></code></pre></td></tr></table></figure><h3 id="4-配置jdk"><a href="#4-配置jdk" class="headerlink" title="4. 配置jdk"></a>4. 配置jdk</h3><p>下载所需的jdk后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zvxf jdk-8u131-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打开文件后在文末添加</span><br>export JAVA_HOME=/usr/server/jdk1.8.0_131 # 解压路径（自定义）<br>export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使修改生效</span><br>source /stc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试</span><br>java -version<br></code></pre></td></tr></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">构建项目，生成dist文件夹</span><br>npm run build<br></code></pre></td></tr></table></figure><p>将dist文件夹上传云服务器，再配置nginx<br>修改nginx&#x2F;conf.d目录下的vue.conf文件（没有则新建）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">server&#123;<br>    listen 80;<br>    # 域名<br>    server_name localhost;<br><br>    location / &#123;<br>        root /usr/app/dist;# 路径自定义<br>        index index.html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>将java程序打包生成jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">nohup</span>是在后台执行</span><br>nohup java -jar xxx.jar &gt; logName.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://cn.vuejs.org/guide/introduction.html">vue文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://baomidou.com/pages/24112f/">MyBatisPlus文档</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://element.eleme.cn/#/zh-CN/component/table">elementui文档</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.logosc.cn/logo/favicon">favicon图标制作</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://fontawesome.dashgame.com/">小图标库</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">vue-element-admin文档</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>practical-experience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake学习笔记</title>
    <link href="/2022/09/23/cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/23/cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在项目目录下写好cmake文件，然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">常用指令</span><br>cmake -B build # 创建一个build目录<br>cmake --build build  # 在build目录下进行build<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 指定最小 CMake 版本要求</span><br>cmake_minimum_required(VERSION 3.9)<br><span class="hljs-comment"># 设置项目名称</span><br>project(answer)<br><br><span class="hljs-comment">#[[</span><br>添加可执行文件 target，类似于原来 Makefile 的：<br><br>    answer: main.o answer.o<br>    main.o: main.cpp answer.hpp<br>    answer.o: answer.cpp answer.hpp<br><br>CMake 会自动找到依赖的头文件，因此不需要特别指定，<br>当头文件修改的时候，会重新编译依赖它的目标文件。<br><span class="hljs-comment">#]]</span><br>add_executable(answer main.cpp answer.cpp)<br><br><span class="hljs-comment">#[[</span><br>使用如下命令构建本项目：<br><br>    cmake -B build      <span class="hljs-comment"># 生成构建目录</span><br>    cmake --build build <span class="hljs-comment"># 执行构建</span><br>    ./build/answer      <span class="hljs-comment"># 运行 answer 程序</span><br><span class="hljs-comment">#]]</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs makefile">cmake_minimum_required(VERSION 3.9)<br>project(answer)<br><br><span class="hljs-comment"># 添加 libanswer 库目标，STATIC 指定为静态库</span><br>add_library(libanswer STATIC answer.cpp)<br><br>add_executable(answer main.cpp)<br><br><span class="hljs-comment">#[[</span><br>为 libanswer 库链接 libcurl，这里 PRIVATE 和 PUBLIC 的区别是：<br><span class="hljs-section">CURL::libcurl 库只会被 libanswer 看到，根级别的 main.cpp 中</span><br>无法 <span class="hljs-keyword">include</span> curl 的头文件。<br><span class="hljs-comment">#]]</span><br>target_link_libraries(libanswer PRIVATE CURL::libcurl)<br><br><span class="hljs-comment">#[[</span><br>find_package 用于在系统中寻找已经安装的第三方库的头文件和库文件<br>的位置，并创建一个名为 CURL::libcurl 的库目标，以供链接。<br><span class="hljs-comment">#]]</span><br>find_package(CURL REQUIRED)<br></code></pre></td></tr></table></figure><h3 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h3><p>实现指定C++版本，添加可执行文件等基础功能，并在CMakeLists.txt中定义一个能够在源码里被访问的变量。文件结构如下所示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── CMakeLists<span class="hljs-selector-class">.txt</span><br>├── TutorialConfig<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.in</span><br>└── tutorial.cpp<br></code></pre></td></tr></table></figure><p>CMakeLists.txt中的内容如下所示，主要通过<code>configure_file(&lt;input&gt; &lt;output&gt;)</code>实现将变量定义在头文件中以供源码访问</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 所有CMakeLists.txt文件都需要指定cmake版本和项目名称</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><br><span class="hljs-comment"># project()调用之后 CMake 定义 Tutorial_VERSION_MAJOR 和 Tutorial_VERSION_MINOR，除了项目名称还添加了版本号</span><br><span class="hljs-keyword">project</span>(Tutorial VERSION <span class="hljs-number">1.0</span>)<br><br><span class="hljs-comment"># 需要确保在add_executable之前设置C++版本</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">True</span>)<br><br><span class="hljs-comment"># TutorialConfig.h.in 是输入的配置头文件</span><br><span class="hljs-comment"># 当该句被调用，@Tutorial_VERSION_MAJOR@ 和 @Tutorial_VERSION_MINOR@ 的值将替换为TutorialConfig.h中项目的版本号</span><br><span class="hljs-comment"># 在tutorial.cpp中应该包含TutorialConfig.h头文件</span><br><span class="hljs-keyword">configure_file</span>(TutorialConfig.h.in TutorialConfig.h)<br><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.cpp)<br><span class="hljs-comment"># 使用target_include_directories（）指定可执行目标在哪查找include文件</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                           <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                           )<br></code></pre></td></tr></table></figure><p>如此，在<code>TutorialConfig.h.in</code>中定义以下内容，然后在<code>tutorial.cpp</code>中<code>#include &quot;TutorialConfig.h&quot;</code>即可使用<code>Tutorial_VERSION_MAJOR</code>变量和<code>Tutorial_VERSION_MINOR</code>变量</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">// the configured options and settings for Tutorial</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Tutorial_VERSION_MAJOR <span class="hljs-comment">@Tutorial_VERSION_MAJOR@</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Tutorial_VERSION_MINOR <span class="hljs-comment">@Tutorial_VERSION_MINOR@</span></span><br></code></pre></td></tr></table></figure><h4 id="运行说明"><a href="#运行说明" class="headerlink" title="运行说明"></a>运行说明</h4><p>在项目路径下运行以下指令，后续若指令无区别将不再赘述</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 指定路径为build文件夹</span><br>cmake -<span class="hljs-keyword">B </span><span class="hljs-keyword">biuld</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># 在build路径下进行构建</span><br>cmake --<span class="hljs-keyword">build </span><span class="hljs-keyword">build</span><br></code></pre></td></tr></table></figure><h3 id="添加library"><a href="#添加library" class="headerlink" title="添加library"></a>添加library</h3><p>主要实现添加library，进行链接，使用子目录（subdirectory），条件编译等</p><p>文件结构如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CMakeLists</span>.</span></span>txt<br>├── MathFunctions<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CMakeLists</span>.</span></span>txt<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MathFunctions</span>.</span></span>cpp<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MathFunctions</span>.</span></span>h # 实现mysub两个整数相减<br>│   ├── myadd.cpp<br>│   └── myadd.h # 实现myadd两个整数相加<br>└── tutorial.cpp # 调用子目录下实现函数<br></code></pre></td></tr></table></figure><p>两个cmakelists.txt文件内容如下所示：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># top-level CMakeLists.txt file</span><br><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">project</span>(Tutorial VERSION <span class="hljs-number">1.0</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">True</span>)<br><br><span class="hljs-comment"># 添加一个子目录</span><br><span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.cpp)<br><br><span class="hljs-comment"># 将library链接到可执行目标上（library的名称是由子路径中的cmake文件所指定的）</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC MathFunctions)<br><br><span class="hljs-comment"># 指定库的头文件位置, 将MathFunctions子目录添加为include目录，以便可以找到MathFunctions.h头文件</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                          <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                          <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions&quot;</span><br>                          )<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># MathFunctions/CMakeLists.txt</span><br><br><span class="hljs-keyword">add_library</span>(MathFunctions MathFunctions.cpp)<br><span class="hljs-comment"># 通过option添加一个选项，用户可以修改该选项</span><br><span class="hljs-keyword">option</span>(USE_ADD <span class="hljs-string">&quot;Use add&quot;</span> <span class="hljs-keyword">ON</span>)<br><span class="hljs-comment"># USE_MYMATH 为 ON, 编译时USE_MYMATH将被定义，在代码中可以通过该变量是否被定义实现条件编译</span><br><span class="hljs-keyword">if</span> (USE_ADD)<br>    <span class="hljs-keyword">add_library</span>(SqrtLibrary STATIC<br>                myadd.cpp)<br>    <span class="hljs-keyword">target_compile_definitions</span>(MathFunctions PRIVATE <span class="hljs-string">&quot;USE_ADD&quot;</span>)<br>    <span class="hljs-keyword">target_link_libraries</span>(MathFunctions PUBLIC SqrtLibrary)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><p>其中<code>MathFunctions.cpp</code>文件内容如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;MathFunctions.h&quot;</span></span><br><br><span class="hljs-comment">// 当USE_ADD为真将调用add方法</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_ADD</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myadd.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mysub</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_ADD</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">myadd</span>(a,b);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">return</span> a-b;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过上述方法构建出的项目中，使用了静态链接，可以看到在构建出的文件夹内有后缀<code>.a</code>的静态库，</p><h4 id="运行说明-1"><a href="#运行说明-1" class="headerlink" title="运行说明"></a>运行说明</h4><p>在项目路径下运行以下指令</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 指定USE_ADD为<span class="hljs-keyword">OFF</span>，由于上述文件中已写过默认为<span class="hljs-keyword">ON</span>因此不指定参数USE_ADD将为<span class="hljs-keyword">ON</span><br>cmake -DUSE_MYMATH=<span class="hljs-keyword">OFF</span> -B build<br><br>cmake <span class="hljs-comment">--build build</span><br></code></pre></td></tr></table></figure><h3 id="为一个library添加Usage-Requirements"><a href="#为一个library添加Usage-Requirements" class="headerlink" title="为一个library添加Usage Requirements"></a>为一个library添加Usage Requirements</h3><p>实现自行添加所需的目录。该步骤对应官方教程Step3，在此仅对三种参数做出说明，本人对于该步骤也存在一些疑惑，有待后续补坑</p><p>有关三种参数的含义如下所示，其中生产者可以具体为产生library的，消费者是使用library的：</p><ul><li>PRIVATE：仅供producer使用</li><li>PUBLIC：consumer 和producer都使用</li><li>INTERFACE： consumer 使用，producer不使用。面对只有头文件时，无法编译成库，因此只能使用INTERFACE参数</li></ul><p>文件结构如下所示，与上一步骤相同：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CMakeLists</span>.</span></span>txt<br>├── MathFunctions<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CMakeLists</span>.</span></span>txt<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MathFunctions</span>.</span></span>cpp<br>│   ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MathFunctions</span>.</span></span>h # 实现mysub两个整数相减<br>│   ├── myadd.cpp<br>│   └── myadd.h # 实现myadd两个整数相加<br>└── tutorial.cpp # 调用子目录下实现函数<br></code></pre></td></tr></table></figure><p>两个cmakelists.txt文件内容如下所示：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># top-level CMakeLists.txt file</span><br><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">project</span>(Tutorial VERSION <span class="hljs-number">1.0</span>)<br><br><span class="hljs-keyword">add_library</span>(tutorial_compiler_flags INTERFACE)<br><span class="hljs-comment"># 使用modern cmake设置C++11 </span><br><span class="hljs-keyword">target_compile_features</span>(tutorial_compiler_flags INTERFACE cxx_std_11)<br><br><span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br><br><span class="hljs-keyword">list</span>(APPEND EXTRA_INCLUDES <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions&quot;</span>)<br><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.cpp)<br><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)<br><br><span class="hljs-comment"># add the binary tree to the search path for include files</span><br><span class="hljs-comment"># so that we will find TutorialConfig.h</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                           <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                           )<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># MathFunctions/CMakeLists.txt</span><br><br><span class="hljs-keyword">add_library</span>(MathFunctions MathFunctions.cpp)<br><br><span class="hljs-keyword">option</span>(USE_ADD <span class="hljs-string">&quot;Use add&quot;</span> <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">if</span> (USE_ADD)<br>    <span class="hljs-keyword">add_library</span>(SqrtLibrary STATIC<br>                myadd.cpp)<br>    <span class="hljs-keyword">target_compile_definitions</span>(MathFunctions PRIVATE <span class="hljs-string">&quot;USE_ADD&quot;</span>)<br>    <span class="hljs-keyword">target_link_libraries</span>(SqrtLibrary PUBLIC tutorial_compiler_flags)<br>    <span class="hljs-keyword">target_link_libraries</span>(MathFunctions PUBLIC SqrtLibrary)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># INTERFACE means things that consumers require but the producer doesn&#x27;t.</span><br><span class="hljs-keyword">target_include_directories</span>(MathFunctions<br>                           INTERFACE <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span><br>                           )<br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://cmake.org/cmake/help/latest/guide/tutorial/A%20Basic%20Starting%20Point.html#exercise-1-building-a-basic-project">Cmake教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算理解</title>
    <link href="/2022/09/23/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2022/09/23/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>在涉及数字的算法中，如果要追求最优解，往往会使用位运算，而位运算在高中以前接触不多，印象不够深刻，所以特此系统的学习位运算，并运用在一些很作者认为很奇妙的算法中。</p><h1 id="位运算基础"><a href="#位运算基础" class="headerlink" title="位运算基础"></a>位运算基础</h1><table><thead><tr><th></th><th>&amp;</th><th>^</th><th>$\vert$</th><th>~</th><th>&gt;&gt;</th><th>&lt;&lt;</th></tr></thead><tbody><tr><td>名称</td><td>与</td><td>异或</td><td>或</td><td>非</td><td>右移</td><td>左移</td></tr><tr><td>0 1</td><td>0</td><td>1</td><td>1</td><td></td><td></td><td></td></tr><tr><td>1 0</td><td>0</td><td>1</td><td>1</td><td></td><td></td><td></td></tr><tr><td>1 1</td><td>1</td><td>0</td><td>1</td><td></td><td></td><td></td></tr><tr><td>0 0</td><td>0</td><td>0</td><td>0</td><td></td><td></td><td></td></tr></tbody></table><p>所有的位运算都先将数字转化为二进制（从左到右对应高位到低位），再进行对应的操作</p><h1 id="位运算性质"><a href="#位运算性质" class="headerlink" title="位运算性质"></a>位运算性质</h1><p>（也不能说是所有的性质，只是算法中会用的一些方法）</p><ol><li>a^a&#x3D;0</li><li>a^0&#x3D;a</li><li>a&gt;&gt;1相当于a&#x2F;2，a&lt;&lt;1相当于a*2</li><li>a&amp;(a-1)是移除最末尾的1（与最低位的1不同）</li><li>偶数&amp;1&#x3D;&#x3D;0，奇数&amp;1&#x3D;&#x3D;1(奇偶判断的新方式)</li></ol><h1 id="算法应用"><a href="#算法应用" class="headerlink" title="算法应用"></a>算法应用</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p>有点加法器运算的感觉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">sum</span> (a^b, (a&amp;b) &lt;&lt; <span class="hljs-number">1</span>) : a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="找单出来的数字"><a href="#找单出来的数字" class="headerlink" title="找单出来的数字"></a>找单出来的数字</h2><p>要求：在一个int数组中，除了一个数字只出现一次，其余数字均出现两次，找出出现一次的数字（原题目忘记了，但意思是这样）</p><p>分析：利用异或的性质a^a&#x3D;0，使用位运算对数组内所有数字取异或和，所有出现两次的数字异或和将为0，最终只留下出现一次的数字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();i++)&#123;   <br>        tmp = tmp ^ nums[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="找缺掉的两个数字"><a href="#找缺掉的两个数字" class="headerlink" title="找缺掉的两个数字"></a>找缺掉的两个数字</h2><p>要求：给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。在 O(N) 时间内只用 O(1) 的空间找到它们，以任意顺序返回这两个数字均可</p><p>分析：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure><h2 id="计算不大于a且能被4整除的最大数"><a href="#计算不大于a且能被4整除的最大数" class="headerlink" title="计算不大于a且能被4整除的最大数"></a>计算不大于a且能被4整除的最大数</h2><p>要求：给定一个数字max_num，求不大于max_num的最大数，且该数字是4的倍数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getNum</span><span class="hljs-params">(<span class="hljs-type">int</span> max_num)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> max_num &amp; ~<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git学习笔记</title>
    <link href="/2022/08/23/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/23/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将文件add到（本地）仓库，可一次add多个</span><br>git add readme.txt<br><br><span class="hljs-comment"># 提交全部修改</span><br>git add --all<br><br><span class="hljs-comment"># commit到（本地）仓库，双引号内为注释</span><br>git commit -m <span class="hljs-string">&quot;wrote a readme file&quot;</span><br><br><span class="hljs-comment"># 将当前分支上传到远程仓库</span><br>git push<br><br><span class="hljs-comment"># 查看远程仓库的信息，包括命名</span><br>git remote -v<br><br><span class="hljs-comment"># 本地仓库和远程仓库解绑,origin是对远程仓库的命名，查看远程仓库信息以获取</span><br>git remote <span class="hljs-built_in">rm</span> origin<br><br><span class="hljs-comment"># 关联一个远程仓库，origin是对远程仓库的命名，可修改</span><br>git remote add origin git@server-name:path/repo-name.git<br><br><span class="hljs-comment"># 查看当前分支</span><br>git branch<br><br><span class="hljs-comment"># 创建分支dev，并切换到dev分支</span><br>git checkout -b dev<br><span class="hljs-comment"># 相当于一下两条指令</span><br>git branch dev <span class="hljs-comment"># 创建分支</span><br>git checkout dev <span class="hljs-comment"># 切换分支</span><br><br><span class="hljs-comment"># 设置用户名和邮箱(--global 为全局参数，表明本地所有Git仓库都会使用这个配置)</span><br>git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br><br><span class="hljs-comment"># 查看工作区状态</span><br>git status<br><br><span class="hljs-comment"># 创建并切换分支到某个tag上（能够在tag基础上修改代码）</span><br>git checkout -b branch_name tag_name<br><br><span class="hljs-comment"># 与上游分支同步，master是当前本地分支</span><br>git fetch upstream<br>git merge upstream/master<br></code></pre></td></tr></table></figure><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="为常用指令配置别名"><a href="#为常用指令配置别名" class="headerlink" title="为常用指令配置别名"></a>为常用指令配置别名</h2><p>在用户目录下创建.bashrc文件，在其中输入想要执行的指令（比较难输入的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出git提交日志</span><br><span class="hljs-built_in">alias</span> git-log=<span class="hljs-string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="hljs-comment"># 输出当前目录所有文件信息</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -al&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h2><p>创建<code>.gitignore</code>文件，在其中输入不需要管理的文件名*.a</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> .gitignore<br>vim .gitignore<br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>查看当前分支<code>git branch</code></p><h3 id="切换与创建分支"><a href="#切换与创建分支" class="headerlink" title="切换与创建分支"></a>切换与创建分支</h3><p>创建分支dev，并切换到dev分支<code>git checkout -b &lt;dev&gt;</code>，相当于以下两条指令</p><ul><li><code>git branch dev</code> # 创建分支</li><li><code>git checkout dev</code> # 切换分支<br>对于切换<code>checkout</code>可以用<code>switch</code>代替<br>创建并切换分支<code>git switch -c &lt;dev&gt;</code></li></ul><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>不能删除当前所在的分支<br>删除dev01分支<code>git branch -d &lt;dev01&gt;</code><br>强制删除dev01分支<code>git branch -D &lt;dev01&gt;</code></p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>将<code>&lt;dev01&gt;</code>分支合并到当前所在的分支上<code>git merge &lt;dev01&gt; </code></p><p>合并冲突之后，将保留冲突部分，手动消除冲突后，再add，commit</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>查看历史提交信息<br><code>git log [options]</code><br>  options可以重复添加:</p><ul><li>–all 显示所有分支</li><li>–pretty&#x3D;online 将提交信息显示为一行</li><li>–abbrev-commit 使得输出的commitid变简短</li><li>–graph 以图的形式显示</li></ul><p>查看之前的所有操作记录<br><code>git reflog</code></p><p>选中即复制，点击鼠标滚轮粘贴</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p><code>git reset --hard &lt;commitid&gt;</code><br><code>&lt;commitid&gt;</code>根据<code>git log</code>查看</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>添加远程仓库<code>git remote add &lt;origin&gt; &lt;仓库地址&gt;</code><br>查看关联的仓库<code>git remote -v</code></p><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p><code>git push [-f] [--set-upstream] [远程仓库名称] [本地分支名][:远端分支名]</code></p><ul><li>远程仓库和本地仓库分支名称相同<code>git push &lt;origin&gt; &lt;master&gt;</code></li><li>–set-upstream 推送到远程的同时并建立起和远端分支的关联</li><li>-f表示强制覆盖<br>当前分支和远程分支已建立联系可以直接<code>git push</code>，第一次push时需要添加<code>--set-upstream</code>参数或者直接使用<code>-u</code></li></ul><h3 id="抓取与拉取"><a href="#抓取与拉取" class="headerlink" title="抓取与拉取"></a>抓取与拉取</h3><p>抓取指令<code>git fetch [remote name] [branch name]</code></p><ul><li>需要在在抓取之后<code>git merge origin/master</code>才能查看到代码的内容</li><li>将远程仓库里的更新都抓取到本地，不会进行合并</li><li>不指定远程仓库名和分支名则抓取所有分支</li></ul><p>拉取指令<code>git pull [remote name] [branch name]</code></p><ul><li>将远程仓库的修改拉到本地自动合并，等于fetch+merge</li><li>若不指定remote name 和 branch name 抓取所有并更新当前分支</li></ul><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><h2 id="个人开发"><a href="#个人开发" class="headerlink" title="个人开发"></a>个人开发</h2><p>&amp;emsp;&amp;emsp; 配合远程仓库使用，一般从远程仓库拉取下代码<code>git clone xxx</code>，在本地新建一个分支<code>git checkout -b &lt;new_branch&gt;</code>进行开发测试，开发完成后切换回到主分支，与测试新开的分支合并<code>git merge &lt;new_branch&gt;</code>，最后<code>push</code>到远程仓库即可</p><h2 id="团队开发"><a href="#团队开发" class="headerlink" title="团队开发"></a>团队开发</h2><p>&amp;emsp;&amp;emsp;与个人开发流程比较类似，但在本地修改完成，上传远程仓库时（此时已处于主分支上）可能会出现冲突（原因：他人先一步提交）导致上传失败，此时需要先<code>git pull</code>拉取远程主分支的内容，在本地修改冲突内容（会有提示），修改完成再依次<code>add commit push</code>即可</p>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell学习笔记</title>
    <link href="/2022/08/23/shell_notes/"/>
    <url>/2022/08/23/shell_notes/</url>
    
    <content type="html"><![CDATA[<h2 id="shell注意事项"><a href="#shell注意事项" class="headerlink" title="shell注意事项"></a>shell注意事项</h2><ul><li><p>重定向<br>  标准输入文件，stdin文件描述符0<br>  标准输出文件，stdout文件描述符1<br>  标准错误文件，stderr文件描述符2<br>  重定向到&#x2F;dev&#x2F;null文件&#x3D;禁止输出（任何内容均丢弃）</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将hello.txt文件中的内容传给<span class="hljs-built_in">cat</span> ,然后再传给hello2.txt（覆盖原内容）</span><br>cat &lt; hello.txt &gt; hello2.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将hello.txt文件中的内容传给<span class="hljs-built_in">cat</span> ,再追加给hello2.txt（不覆盖原内容）</span><br>cat &lt; hello.txt &gt;&gt; hello2.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将错误信息重定向到文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> 2&gt;file</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将错误信息和标准输出信息重定向到文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> &gt; file 2&gt;&amp;1</span><br></code></pre></td></tr></table></figure></li><li><p><code>let</code>指令无法使用，将开头的<code>#!/bin/sh</code>换为<code>#!/bin/bash</code><br>语法</p></li><li><p>变量名和等号之间不能有空格</p></li><li><p>0代表true，1代表false</p></li></ul><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>以下两种启动子shell执行脚本，执行完成后回到父shell，子shell可以使用父shell的变量<br>绝对&#x2F;相对路径（需要x权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./hello.sh<br>绝对路径/hello.sh<br></code></pre></td></tr></table></figure><p>使用bash执行（不需要x权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh hello.sh<br></code></pre></td></tr></table></figure><p>使用source执行，不启动子shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">. hello.sh<br>source hello.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">source</span>是shell中内嵌的，<span class="hljs-built_in">source</span>中不会启动子shell</span><br></code></pre></td></tr></table></figure><p><img src="/img/note-picture/4.png"></p><h2 id="权限说明"><a href="#权限说明" class="headerlink" title="权限说明"></a>权限说明</h2><p><img src="/img/note-picture/3.png"></p><table><thead><tr><th>符号</th><th>d</th><th>-</th><th>l</th><th>r</th><th>w</th><th>x</th></tr></thead><tbody><tr><td>含义</td><td>文件夹</td><td>文件</td><td>链接</td><td>可读</td><td>可写</td><td>可执行</td></tr></tbody></table><ul><li>第一个字符是类型，后每三个为一组，分别表示文件的<strong>拥有者</strong>，文件的<strong>所属组</strong>，文件的<strong>其他用户</strong>所拥有的权限</li><li>第一个yede表示拥有者，第二个为这个拥有者所在组</li></ul><p>赋于执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x ./filename # 使脚本具有执行权限<br>./filename # 执行脚步<br></code></pre></td></tr></table></figure><h2 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h2><ul><li><code>export variable_name</code>将局部变量提升为全局变量（不需要$），子bash中的修改只对子bash有效</li><li><code>set</code>包含所有系统和用户定义的全局变量、局部变量；<br>  <code>env</code>中是系统中的全局变量；<br>  局部变量在子shell中无效</li><li><code>readonly variable_name</code>设置变量只读  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">myUrl=&quot;https://www.google.com&quot;<br>readonly myUrl<br></code></pre></td></tr></table></figure></li><li><code>unset variable_name</code>删除变量，测试之后需要及时删除以免占用内存,<code>readonly</code>无法<code>unset</code>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unset variable_name<br></code></pre></td></tr></table></figure></li><li>特殊变量<table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>$#</td><td>参数个数</td></tr><tr><td>$*</td><td>所有参数，以”$1 $2 … $n”的形式输出所有参数</td></tr><tr><td>$@</td><td>所有参数，以”$1”,”$2” … “$n” 的形式输出所有参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$?</td><td>最后命令的退出状态。0没有错误，其他值有错</td></tr></tbody></table></li><li>字符串<br>  单引号内任何字符都会原样输出，转义符无效；双引号里可以有变量，有转义字符;也可以不要引号</li><li>数组<br>  定义方式array_name&#x3D;(value0 value1 value2 value3)，用空格分开  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">读取某一元素的值</span><br>valuen=$&#123;array_name[n]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash"> @可以获取数组中的所有元素</span><br>echo $&#123;array_name[@]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span><br>length=$&#123;#array_name[@]&#125;<br>length=$&#123;#array_name[*]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span><br>lengthn=$&#123;#array_name[n]&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>使用<code>expr</code>完成计算</li><li>使用<code>$[]</code>或者<code>$(())</code></li><li>关系运算符,使用如右<code>[ $a -eq $b ]</code><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>equal 相等</td></tr><tr><td>-ne</td><td>not equal 不相等</td></tr><tr><td>-lt</td><td>less than 小于</td></tr><tr><td>-le</td><td>less equal 小于等于</td></tr><tr><td>-gt</td><td>greater than 大于</td></tr><tr><td>-ge</td><td>greater equal 大于等于</td></tr><tr><td>!</td><td>非</td></tr><tr><td>-r</td><td>or 或</td></tr><tr><td>-a</td><td>and 与</td></tr></tbody></table></li><li>逻辑运算符&amp;&amp; ,||可借此形成三元表达式</li><li>字符串运算符，文件测试运算符，不常用,见<a href="https://www.runoob.com/linux/linux-shell-basic-operators.html">链接</a></li></ul><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">expression</span><br>a=`expr 1 + 2`<br>echo $a<br><br>expr 4 \* 2 # 乘法运算<br>echo $[ 1+2 ]<br>echo $((3*5))<br><br>echo $[ 3 == 3 ]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在比较运算中使用[]不能用&lt;&gt;，但(())中可以使用&lt;&gt;（测试中好像都行）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行加一操作的两种方法</span><br>let a++<br>let a+=1<br>a=$[$a+1]<br><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>在<code>expr</code>表达式和运算符之间要有空格</li><li>条件表达式注意空格<code>[ 2 == 3 ]</code>（测试中主要是[]两侧的空格）</li><li>表达式中的&#x3D;可用于检测字符串是否相等，&#x3D;&#x3D;检测</li></ul><h2 id="if-for-while-case-until语句"><a href="#if-for-while-case-until语句" class="headerlink" title="if,for,while,case,until语句"></a>if,for,while,case,until语句</h2><p><strong>if</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">if-slse</span><br>if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN<br>else<br>    command<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">if-elif-else</span><br>if condition1<br>then<br>    command1<br>elif condition2 <br>then <br>    command2<br>else<br>    commandN<br>fi<br></code></pre></td></tr></table></figure><p><strong>for</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br><br>for ((初始值;循环控制条件;变量变化))<br>do<br>    command<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">实例</span><br>for loop in 1 2 3 4 5<br>do<br>    echo &quot;The value is: $loop&quot;<br>done<br></code></pre></td></tr></table></figure><p><strong>while</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p><strong>多选择语句</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">;;相当于<span class="hljs-built_in">break</span></span><br>case 值 in<br>模式1)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>模式2)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><h2 id="读取输入read"><a href="#读取输入read" class="headerlink" title="读取输入read"></a>读取输入read</h2><p>-t 指定等待时间，不加则一直等待<br>-p 指定提示语</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">实例，name表示输入数据名称</span><br>read -t 10 -p &quot;please input your name: &quot; name<br>echo $name<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>系统函数<br>basename获取当前文件名<br>dirname获取路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">函数的格式，[]内的是可省略部分</span><br>[ function ] funname [()]<br>&#123;<br><br>    action;<br><br>    [return int;]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>return后的数值n(0-255)</p><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><p><strong>字符串截取</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">从start开始，截取长度为length的字符串<br>格式：$&#123;str:start:length&#125;  <br>echo $&#123;str:5:8&#125;<br></code></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li><p>wc 统计文件信息</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>统计行数</td></tr><tr><td>-m</td><td>统计字符数</td></tr><tr><td>-w</td><td>统计字数</td></tr><tr><td>-c</td><td>统计字节数</td></tr></tbody></table>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">统计3个文件的信息，输出分别表示行数、单词数、字节数</span><br>wc filename1 filename2 filename3<br>3 94 234 filename1<br>...<br></code></pre></td></tr></table></figure></li><li><p>uptime 获取服务器信息</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">uptime<br>08:21:34 up 36 min,  2 users,  load average: 0.00, 0.00, 0.00<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前服务器时间：    08:21:34</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前服务器运行时长  36 min</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前用户数          2 <span class="hljs-built_in">users</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前的负载均衡      load average  0.00, 0.00, 0.00，分别取1min,5min,15min的均值</span><br></code></pre></td></tr></table></figure></li><li><p>date 有关日期的指令</p></li><li><p>head </p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看第一行内容</span><br>head -1 filename<br></code></pre></td></tr></table></figure></li><li><p>tail<br>  与head类似</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看最后一行内容</span><br>tail -1 filename<br></code></pre></td></tr></table></figure></li><li><p>ssh 远程连接</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">连接远程服务器并执行以下指令</span><br>ssh user@公网ip &quot;cd /home ; ./a.sh&quot;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用指令汇总</title>
    <link href="/2022/08/23/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/08/23/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将文件add到（本地）仓库，可一次add多个</span><br>git add readme.txt<br><br><span class="hljs-comment"># 提交全部修改</span><br>git add --all<br><br><span class="hljs-comment"># commit到（本地）仓库，双引号内为注释</span><br>git commit -m <span class="hljs-string">&quot;wrote a readme file&quot;</span><br><br><span class="hljs-comment"># 将当前分支上传到远程仓库</span><br>git push<br><br><span class="hljs-comment"># 查看远程仓库的信息，包括命名</span><br>git remote -v<br><br><span class="hljs-comment"># 本地仓库和远程仓库解绑,origin是对远程仓库的命名，查看远程仓库信息以获取</span><br>git remote <span class="hljs-built_in">rm</span> origin<br><br><span class="hljs-comment"># 关联一个远程仓库，origin是对远程仓库的命名，可修改</span><br>git remote add origin git@server-name:path/repo-name.git<br><br><span class="hljs-comment"># 查看当前分支</span><br>git branch<br><br><span class="hljs-comment"># 创建分支dev，并切换到dev分支</span><br>git checkout -b dev<br><span class="hljs-comment"># 相当于一下两条指令</span><br>git branch dev <span class="hljs-comment"># 创建分支</span><br>git checkout dev <span class="hljs-comment"># 切换分支</span><br><br><span class="hljs-comment"># 设置用户名和邮箱(--global 为全局参数，表明本地所有Git仓库都会使用这个配置)</span><br>git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br><br><span class="hljs-comment"># 查看历史提交信息</span><br>git <span class="hljs-built_in">log</span> <br>git reflog<br></code></pre></td></tr></table></figure><h1 id="服务器常用指令"><a href="#服务器常用指令" class="headerlink" title="服务器常用指令"></a>服务器常用指令</h1><ol><li>ssh<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 连接服务器，并执行指令</span><br>ssh user@公网ip <span class="hljs-string">&quot;cd /home ; ./a.sh&quot;</span><br><br><span class="hljs-comment"># 连接某端口的服务器</span><br>ssh -p &lt;port&gt; &lt;remote_username&gt;@&lt;remote_ip&gt;<br></code></pre></td></tr></table></figure></li><li>scp<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 向服务器传输文件夹</span><br>scp -r &lt;local_folder&gt; &lt;remote_username&gt;@&lt;remote_ip&gt;:&lt;remote_folder&gt;<br><br><span class="hljs-comment"># 向服务器传输文件</span><br>scp &lt;local_file&gt; &lt;remote_username&gt;@&lt;remote_ip&gt;:&lt;remote_file&gt;<br><br><span class="hljs-comment"># 从服务器传到本地</span><br>scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3 <br>scp -r www.runoob.com:/home/root/others/ /home/space/music/<br><br><span class="hljs-comment"># 通过指定端口号传输</span><br>scp -P 4588 remote@www.runoob.com:/usr/local/sin.sh /home/administrator<br></code></pre></td></tr></table></figure></li></ol><h1 id="linux常用指令"><a href="#linux常用指令" class="headerlink" title="linux常用指令"></a>linux常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前所有进程</span><br>ps -f<br><br><span class="hljs-comment"># 查看文件夹下所有文件的数量（不含隐藏文件</span><br>ll | <span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 删除文件夹及内部的所有文件，不提醒</span><br><span class="hljs-built_in">rm</span> -rf /var/log/httpd/access<br>-r 向下递归<br>-f 强制删除不提醒<br><br></code></pre></td></tr></table></figure><ol><li>打压缩包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将/home/这个目录下所有文件和文件夹打包为当前目录下的files.zip</span><br>zip –q –r files.zip /home<br><br><span class="hljs-comment"># 强制删除文件夹及其内容，不提示</span><br><span class="hljs-built_in">rm</span> -rf &lt;<span class="hljs-built_in">dir</span>&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>learning-notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
